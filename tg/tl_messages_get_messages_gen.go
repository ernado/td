// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessagesGetMessagesRequest represents TL type `messages.getMessages#63c66506`.
// Returns the list of messages by their IDs.
//
// See https://core.telegram.org/method/messages.getMessages for reference.
type MessagesGetMessagesRequest struct {
	// Message ID list
	ID []InputMessageClass
}

// MessagesGetMessagesRequestTypeID is TL type id of MessagesGetMessagesRequest.
const MessagesGetMessagesRequestTypeID = 0x63c66506

func (g *MessagesGetMessagesRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.ID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *MessagesGetMessagesRequest) String() string {
	if g == nil {
		return "MessagesGetMessagesRequest(nil)"
	}
	type Alias MessagesGetMessagesRequest
	return fmt.Sprintf("MessagesGetMessagesRequest%+v", Alias(*g))
}

// FillFrom fills MessagesGetMessagesRequest from given interface.
func (g *MessagesGetMessagesRequest) FillFrom(from interface {
	GetID() (value []InputMessageClass)
}) {
	g.ID = from.GetID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesGetMessagesRequest) TypeID() uint32 {
	return MessagesGetMessagesRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesGetMessagesRequest) TypeName() string {
	return "messages.getMessages"
}

// TypeInfo returns info about TL type.
func (g *MessagesGetMessagesRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.getMessages",
		ID:   MessagesGetMessagesRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *MessagesGetMessagesRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "messages.getMessages#63c66506",
		}
	}
	b.PutID(MessagesGetMessagesRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *MessagesGetMessagesRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "messages.getMessages#63c66506",
		}
	}
	b.PutVectorHeader(len(g.ID))
	for idx, v := range g.ID {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "messages.getMessages#63c66506",
				FieldName: "id",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<InputMessage>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "messages.getMessages#63c66506",
				FieldName: "id",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetID returns value of ID field.
func (g *MessagesGetMessagesRequest) GetID() (value []InputMessageClass) {
	return g.ID
}

// MapID returns field ID wrapped in InputMessageClassArray helper.
func (g *MessagesGetMessagesRequest) MapID() (value InputMessageClassArray) {
	return InputMessageClassArray(g.ID)
}

// Decode implements bin.Decoder.
func (g *MessagesGetMessagesRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "messages.getMessages#63c66506",
		}
	}
	if err := b.ConsumeID(MessagesGetMessagesRequestTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "messages.getMessages#63c66506",
			Underlying: err,
		}
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *MessagesGetMessagesRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "messages.getMessages#63c66506",
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.getMessages#63c66506",
				FieldName:  "id",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			g.ID = make([]InputMessageClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeInputMessage(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "messages.getMessages#63c66506",
					FieldName:  "id",
					Underlying: err,
				}
			}
			g.ID = append(g.ID, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetMessagesRequest.
var (
	_ bin.Encoder     = &MessagesGetMessagesRequest{}
	_ bin.Decoder     = &MessagesGetMessagesRequest{}
	_ bin.BareEncoder = &MessagesGetMessagesRequest{}
	_ bin.BareDecoder = &MessagesGetMessagesRequest{}
)

// MessagesGetMessages invokes method messages.getMessages#63c66506 returning error if any.
// Returns the list of messages by their IDs.
//
// See https://core.telegram.org/method/messages.getMessages for reference.
// Can be used by bots.
func (c *Client) MessagesGetMessages(ctx context.Context, id []InputMessageClass) (MessagesMessagesClass, error) {
	var result MessagesMessagesBox

	request := &MessagesGetMessagesRequest{
		ID: id,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Messages, nil
}
