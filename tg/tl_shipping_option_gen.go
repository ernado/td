// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ShippingOption represents TL type `shippingOption#b6213cdf`.
// Shipping option
//
// See https://core.telegram.org/constructor/shippingOption for reference.
type ShippingOption struct {
	// Option ID
	ID string
	// Title
	Title string
	// List of price portions
	Prices []LabeledPrice
}

// ShippingOptionTypeID is TL type id of ShippingOption.
const ShippingOptionTypeID = 0xb6213cdf

func (s *ShippingOption) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ID == "") {
		return false
	}
	if !(s.Title == "") {
		return false
	}
	if !(s.Prices == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *ShippingOption) String() string {
	if s == nil {
		return "ShippingOption(nil)"
	}
	type Alias ShippingOption
	return fmt.Sprintf("ShippingOption%+v", Alias(*s))
}

// FillFrom fills ShippingOption from given interface.
func (s *ShippingOption) FillFrom(from interface {
	GetID() (value string)
	GetTitle() (value string)
	GetPrices() (value []LabeledPrice)
}) {
	s.ID = from.GetID()
	s.Title = from.GetTitle()
	s.Prices = from.GetPrices()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ShippingOption) TypeID() uint32 {
	return ShippingOptionTypeID
}

// TypeName returns name of type in TL schema.
func (*ShippingOption) TypeName() string {
	return "shippingOption"
}

// TypeInfo returns info about TL type.
func (s *ShippingOption) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "shippingOption",
		ID:   ShippingOptionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Prices",
			SchemaName: "prices",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *ShippingOption) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode %s as nil", "shippingOption#b6213cdf")
	}
	b.PutID(ShippingOptionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *ShippingOption) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode %s as nil", "shippingOption#b6213cdf")
	}
	b.PutString(s.ID)
	b.PutString(s.Title)
	b.PutVectorHeader(len(s.Prices))
	for idx, v := range s.Prices {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode %s: field %s element with index %d: %w", "shippingOption#b6213cdf", "prices", idx, err)
		}
	}
	return nil
}

// GetID returns value of ID field.
func (s *ShippingOption) GetID() (value string) {
	return s.ID
}

// GetTitle returns value of Title field.
func (s *ShippingOption) GetTitle() (value string) {
	return s.Title
}

// GetPrices returns value of Prices field.
func (s *ShippingOption) GetPrices() (value []LabeledPrice) {
	return s.Prices
}

// Decode implements bin.Decoder.
func (s *ShippingOption) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode %s to nil", "shippingOption#b6213cdf")
	}
	if err := b.ConsumeID(ShippingOptionTypeID); err != nil {
		return fmt.Errorf("unable to decode %s: %w", "shippingOption#b6213cdf", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *ShippingOption) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode %s to nil", "shippingOption#b6213cdf")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "shippingOption#b6213cdf", "id", err)
		}
		s.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "shippingOption#b6213cdf", "title", err)
		}
		s.Title = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "shippingOption#b6213cdf", "prices", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value LabeledPrice
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode %s: field %s: %w", "shippingOption#b6213cdf", "prices", err)
			}
			s.Prices = append(s.Prices, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ShippingOption.
var (
	_ bin.Encoder     = &ShippingOption{}
	_ bin.Decoder     = &ShippingOption{}
	_ bin.BareEncoder = &ShippingOption{}
	_ bin.BareDecoder = &ShippingOption{}
)
