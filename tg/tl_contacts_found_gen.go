// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ContactsFound represents TL type `contacts.found#b3134d9d`.
// Users found by name substring and auxiliary data.
//
// See https://core.telegram.org/constructor/contacts.found for reference.
type ContactsFound struct {
	// Personalized results
	MyResults []PeerClass
	// List of found user identifiers
	Results []PeerClass
	// Found chats
	Chats []ChatClass
	// List of users
	Users []UserClass
}

// ContactsFoundTypeID is TL type id of ContactsFound.
const ContactsFoundTypeID = 0xb3134d9d

func (f *ContactsFound) Zero() bool {
	if f == nil {
		return true
	}
	if !(f.MyResults == nil) {
		return false
	}
	if !(f.Results == nil) {
		return false
	}
	if !(f.Chats == nil) {
		return false
	}
	if !(f.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (f *ContactsFound) String() string {
	if f == nil {
		return "ContactsFound(nil)"
	}
	type Alias ContactsFound
	return fmt.Sprintf("ContactsFound%+v", Alias(*f))
}

// FillFrom fills ContactsFound from given interface.
func (f *ContactsFound) FillFrom(from interface {
	GetMyResults() (value []PeerClass)
	GetResults() (value []PeerClass)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	f.MyResults = from.GetMyResults()
	f.Results = from.GetResults()
	f.Chats = from.GetChats()
	f.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ContactsFound) TypeID() uint32 {
	return ContactsFoundTypeID
}

// TypeName returns name of type in TL schema.
func (*ContactsFound) TypeName() string {
	return "contacts.found"
}

// TypeInfo returns info about TL type.
func (f *ContactsFound) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "contacts.found",
		ID:   ContactsFoundTypeID,
	}
	if f == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MyResults",
			SchemaName: "my_results",
		},
		{
			Name:       "Results",
			SchemaName: "results",
		},
		{
			Name:       "Chats",
			SchemaName: "chats",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (f *ContactsFound) Encode(b *bin.Buffer) error {
	if f == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "contacts.found#b3134d9d",
		}
	}
	b.PutID(ContactsFoundTypeID)
	return f.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (f *ContactsFound) EncodeBare(b *bin.Buffer) error {
	if f == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "contacts.found#b3134d9d",
		}
	}
	b.PutVectorHeader(len(f.MyResults))
	for idx, v := range f.MyResults {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "my_results",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<Peer>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "my_results",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(f.Results))
	for idx, v := range f.Results {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "results",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<Peer>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "results",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(f.Chats))
	for idx, v := range f.Chats {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "chats",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<Chat>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "chats",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(f.Users))
	for idx, v := range f.Users {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "users",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<User>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "contacts.found#b3134d9d",
				FieldName: "users",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetMyResults returns value of MyResults field.
func (f *ContactsFound) GetMyResults() (value []PeerClass) {
	return f.MyResults
}

// MapMyResults returns field MyResults wrapped in PeerClassArray helper.
func (f *ContactsFound) MapMyResults() (value PeerClassArray) {
	return PeerClassArray(f.MyResults)
}

// GetResults returns value of Results field.
func (f *ContactsFound) GetResults() (value []PeerClass) {
	return f.Results
}

// MapResults returns field Results wrapped in PeerClassArray helper.
func (f *ContactsFound) MapResults() (value PeerClassArray) {
	return PeerClassArray(f.Results)
}

// GetChats returns value of Chats field.
func (f *ContactsFound) GetChats() (value []ChatClass) {
	return f.Chats
}

// MapChats returns field Chats wrapped in ChatClassArray helper.
func (f *ContactsFound) MapChats() (value ChatClassArray) {
	return ChatClassArray(f.Chats)
}

// GetUsers returns value of Users field.
func (f *ContactsFound) GetUsers() (value []UserClass) {
	return f.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (f *ContactsFound) MapUsers() (value UserClassArray) {
	return UserClassArray(f.Users)
}

// Decode implements bin.Decoder.
func (f *ContactsFound) Decode(b *bin.Buffer) error {
	if f == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "contacts.found#b3134d9d",
		}
	}
	if err := b.ConsumeID(ContactsFoundTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "contacts.found#b3134d9d",
			Underlying: err,
		}
	}
	return f.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (f *ContactsFound) DecodeBare(b *bin.Buffer) error {
	if f == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "contacts.found#b3134d9d",
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "contacts.found#b3134d9d",
				FieldName:  "my_results",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			f.MyResults = make([]PeerClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePeer(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "contacts.found#b3134d9d",
					FieldName:  "my_results",
					Underlying: err,
				}
			}
			f.MyResults = append(f.MyResults, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "contacts.found#b3134d9d",
				FieldName:  "results",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			f.Results = make([]PeerClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePeer(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "contacts.found#b3134d9d",
					FieldName:  "results",
					Underlying: err,
				}
			}
			f.Results = append(f.Results, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "contacts.found#b3134d9d",
				FieldName:  "chats",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			f.Chats = make([]ChatClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "contacts.found#b3134d9d",
					FieldName:  "chats",
					Underlying: err,
				}
			}
			f.Chats = append(f.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "contacts.found#b3134d9d",
				FieldName:  "users",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			f.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "contacts.found#b3134d9d",
					FieldName:  "users",
					Underlying: err,
				}
			}
			f.Users = append(f.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ContactsFound.
var (
	_ bin.Encoder     = &ContactsFound{}
	_ bin.Decoder     = &ContactsFound{}
	_ bin.BareEncoder = &ContactsFound{}
	_ bin.BareDecoder = &ContactsFound{}
)
