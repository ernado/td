// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ChatInviteImporter represents TL type `chatInviteImporter#1e3e6680`.
//
// See https://core.telegram.org/constructor/chatInviteImporter for reference.
type ChatInviteImporter struct {
	// UserID field of ChatInviteImporter.
	UserID int
	// Date field of ChatInviteImporter.
	Date int
}

// ChatInviteImporterTypeID is TL type id of ChatInviteImporter.
const ChatInviteImporterTypeID = 0x1e3e6680

func (c *ChatInviteImporter) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.UserID == 0) {
		return false
	}
	if !(c.Date == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatInviteImporter) String() string {
	if c == nil {
		return "ChatInviteImporter(nil)"
	}
	type Alias ChatInviteImporter
	return fmt.Sprintf("ChatInviteImporter%+v", Alias(*c))
}

// FillFrom fills ChatInviteImporter from given interface.
func (c *ChatInviteImporter) FillFrom(from interface {
	GetUserID() (value int)
	GetDate() (value int)
}) {
	c.UserID = from.GetUserID()
	c.Date = from.GetDate()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatInviteImporter) TypeID() uint32 {
	return ChatInviteImporterTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatInviteImporter) TypeName() string {
	return "chatInviteImporter"
}

// TypeInfo returns info about TL type.
func (c *ChatInviteImporter) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatInviteImporter",
		ID:   ChatInviteImporterTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatInviteImporter) Encode(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "chatInviteImporter#1e3e6680",
		}
	}
	b.PutID(ChatInviteImporterTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatInviteImporter) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "chatInviteImporter#1e3e6680",
		}
	}
	b.PutInt(c.UserID)
	b.PutInt(c.Date)
	return nil
}

// GetUserID returns value of UserID field.
func (c *ChatInviteImporter) GetUserID() (value int) {
	return c.UserID
}

// GetDate returns value of Date field.
func (c *ChatInviteImporter) GetDate() (value int) {
	return c.Date
}

// Decode implements bin.Decoder.
func (c *ChatInviteImporter) Decode(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "chatInviteImporter#1e3e6680",
		}
	}
	if err := b.ConsumeID(ChatInviteImporterTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "chatInviteImporter#1e3e6680",
			Underlying: err,
		}
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatInviteImporter) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "chatInviteImporter#1e3e6680",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "chatInviteImporter#1e3e6680",
				FieldName:  "user_id",
				Underlying: err,
			}
		}
		c.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "chatInviteImporter#1e3e6680",
				FieldName:  "date",
				Underlying: err,
			}
		}
		c.Date = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChatInviteImporter.
var (
	_ bin.Encoder     = &ChatInviteImporter{}
	_ bin.Decoder     = &ChatInviteImporter{}
	_ bin.BareEncoder = &ChatInviteImporter{}
	_ bin.BareDecoder = &ChatInviteImporter{}
)
