// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// UpdatesInterceptor intercepts results of all methods that return UpdatesClass response
// and passes them to the specified handler first.
// If the interceptor function returns an error, the original method call also fails.
type UpdatesInterceptor struct {
	*Client
	handle func(UpdatesClass) error
}

// NewUpdatesInterceptor creates new update interceptor.
func NewUpdatesInterceptor(client *Client, handler func(UpdatesClass) error) *UpdatesInterceptor {
	return &UpdatesInterceptor{client, handler}
}

// AccountGetNotifyExceptions invokes method account.getNotifyExceptions#53577479 returning error if any.
// Returns list of chats with non-default notification settings
//
// See https://core.telegram.org/method/account.getNotifyExceptions for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) AccountGetNotifyExceptions(ctx context.Context, request *AccountGetNotifyExceptionsRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.AccountGetNotifyExceptions(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ContactsDeleteContacts invokes method contacts.deleteContacts#96a0e00 returning error if any.
// Deletes several contacts from the list.
//
// See https://core.telegram.org/method/contacts.deleteContacts for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ContactsDeleteContacts(ctx context.Context, id []InputUserClass) (UpdatesClass, error) {
	updates, err := icpt.Client.ContactsDeleteContacts(ctx, id)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ContactsAddContact invokes method contacts.addContact#e8f463d0 returning error if any.
// Add an existing telegram user as contact.
// Use contacts.importContacts¹ to add contacts by phone number, without knowing their
// Telegram ID.
//
// Links:
//  1) https://core.telegram.org/method/contacts.importContacts
//
// Possible errors:
//  400 CONTACT_ID_INVALID: The provided contact ID is invalid
//  400 CONTACT_NAME_EMPTY: Contact name empty
//  400 MSG_ID_INVALID: Invalid message ID provided
//
// See https://core.telegram.org/method/contacts.addContact for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ContactsAddContact(ctx context.Context, request *ContactsAddContactRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ContactsAddContact(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ContactsAcceptContact invokes method contacts.acceptContact#f831a20f returning error if any.
// If the peer settings¹ of a new user allow us to add him as contact, add that user as
// contact
//
// Links:
//  1) https://core.telegram.org/constructor/peerSettings
//
// Possible errors:
//  400 CONTACT_ADD_MISSING: Contact to add is missing
//  400 CONTACT_ID_INVALID: The provided contact ID is invalid
//  400 CONTACT_REQ_MISSING: Missing contact request
//
// See https://core.telegram.org/method/contacts.acceptContact for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ContactsAcceptContact(ctx context.Context, id InputUserClass) (UpdatesClass, error) {
	updates, err := icpt.Client.ContactsAcceptContact(ctx, id)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ContactsGetLocated invokes method contacts.getLocated#d348bc44 returning error if any.
// Get contacts near you
//
// Possible errors:
//  400 GEO_POINT_INVALID: Invalid geoposition provided
//  406 USERPIC_UPLOAD_REQUIRED: You must have a profile picture to publish your geolocation
//
// See https://core.telegram.org/method/contacts.getLocated for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ContactsGetLocated(ctx context.Context, request *ContactsGetLocatedRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ContactsGetLocated(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ContactsBlockFromReplies invokes method contacts.blockFromReplies#29a8962c returning error if any.
// Stop getting notifications about thread replies¹ of a certain user in @replies
//
// Links:
//  1) https://core.telegram.org/api/threads
//
// See https://core.telegram.org/method/contacts.blockFromReplies for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ContactsBlockFromReplies(ctx context.Context, request *ContactsBlockFromRepliesRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ContactsBlockFromReplies(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendMessage invokes method messages.sendMessage#520c3870 returning error if any.
// Sends a message to a chat
//
// Possible errors:
//  401 AUTH_KEY_PERM_EMPTY: The temporary auth key must be binded to the permanent auth key to use these methods.
//  400 BOT_DOMAIN_INVALID: Bot domain invalid
//  400 BOT_INVALID: This is not a valid bot
//  400 BUTTON_DATA_INVALID: The data of one or more of the buttons you provided is invalid
//  400 BUTTON_TYPE_INVALID: The type of one or more of the buttons you provided is invalid
//  400 BUTTON_URL_INVALID: Button URL invalid
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 CHAT_RESTRICTED: You can't send messages in this chat, you were restricted
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 ENCRYPTION_DECLINED: The secret chat was declined
//  400 ENTITY_MENTION_USER_INVALID: You mentioned an invalid user
//  400 FROM_MESSAGE_BOT_DISABLED: Bots can't use fromMessage min constructors
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MESSAGE_EMPTY: The provided message is empty
//  400 MESSAGE_TOO_LONG: The provided message is too long
//  400 MSG_ID_INVALID: Provided reply_to_msg_id is invalid
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 PINNED_DIALOGS_TOO_MUCH: Too many pinned dialogs
//  400 REPLY_MARKUP_INVALID: The provided reply markup is invalid
//  400 SCHEDULE_BOT_NOT_ALLOWED: Bots cannot schedule messages
//  400 SCHEDULE_DATE_TOO_LATE: You can't schedule a message this far in the future
//  400 SCHEDULE_TOO_MUCH: There are too many scheduled messages
//  420 SLOWMODE_WAIT_X: Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
//  400 USER_BANNED_IN_CHANNEL: You're banned from sending messages in supergroups/channels
//  400 USER_IS_BLOCKED: You were blocked by this user
//  400 USER_IS_BOT: Bots can't send messages to other bots
//  400 YOU_BLOCKED_USER: You blocked this user
//
// See https://core.telegram.org/method/messages.sendMessage for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendMessage(ctx context.Context, request *MessagesSendMessageRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendMessage(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendMedia invokes method messages.sendMedia#3491eba9 returning error if any.
// Send a media
//
// Possible errors:
//  400 BROADCAST_PUBLIC_VOTERS_FORBIDDEN: You can't forward polls with public voters
//  400 BUTTON_DATA_INVALID: The data of one or more of the buttons you provided is invalid
//  400 BUTTON_TYPE_INVALID: The type of one or more of the buttons you provided is invalid
//  400 BUTTON_URL_INVALID: Button URL invalid
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_RESTRICTED: You can't send messages in this chat, you were restricted
//  403 CHAT_SEND_GIFS_FORBIDDEN: You can't send gifs in this chat
//  403 CHAT_SEND_MEDIA_FORBIDDEN: You can't send media in this chat
//  403 CHAT_SEND_STICKERS_FORBIDDEN: You can't send stickers in this chat.
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 EXTERNAL_URL_INVALID: External URL invalid
//  400 FILE_PARTS_INVALID: The number of file parts is invalid
//  400 FILE_PART_LENGTH_INVALID: The length of a file part is invalid
//  400 IMAGE_PROCESS_FAILED: Failure while processing image
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MD5_CHECKSUM_INVALID: The MD5 checksums do not match
//  400 MEDIA_CAPTION_TOO_LONG: The caption is too long
//  400 MEDIA_EMPTY: The provided media object is invalid
//  400 MEDIA_INVALID: Media invalid
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 PHOTO_EXT_INVALID: The extension of the photo is invalid
//  400 PHOTO_INVALID_DIMENSIONS: The photo dimensions are invalid
//  400 PHOTO_SAVE_FILE_INVALID: Internal issues, try again later
//  400 POLL_ANSWERS_INVALID: Invalid poll answers were provided
//  400 POLL_OPTION_DUPLICATE: Duplicate poll options provided
//  400 POLL_OPTION_INVALID: Invalid poll option provided
//  400 QUIZ_CORRECT_ANSWERS_EMPTY: No correct quiz answer was specified
//  400 QUIZ_CORRECT_ANSWER_INVALID: An invalid value was provided to the correct_answers field
//  400 REPLY_MARKUP_BUY_EMPTY: Reply markup for buy button empty
//  400 REPLY_MARKUP_INVALID: The provided reply markup is invalid
//  400 SCHEDULE_TOO_MUCH: There are too many scheduled messages
//  420 SLOWMODE_WAIT_X: Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
//  400 TTL_MEDIA_INVALID: Invalid media Time To Live was provided
//  400 USER_BANNED_IN_CHANNEL: You're banned from sending messages in supergroups/channels
//  400 USER_IS_BLOCKED: You were blocked by this user
//  400 USER_IS_BOT: Bots can't send messages to other bots
//  400 WEBPAGE_CURL_FAILED: Failure while fetching the webpage with cURL
//  400 WEBPAGE_MEDIA_EMPTY: Webpage media empty
//  400 YOU_BLOCKED_USER: You blocked this user
//
// See https://core.telegram.org/method/messages.sendMedia for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendMedia(ctx context.Context, request *MessagesSendMediaRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendMedia(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesForwardMessages invokes method messages.forwardMessages#d9fee60e returning error if any.
// Forwards messages by their IDs.
//
// Possible errors:
//  400 BROADCAST_PUBLIC_VOTERS_FORBIDDEN: You can't forward polls with public voters
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 CHAT_RESTRICTED: You can't send messages in this chat, you were restricted
//  403 CHAT_SEND_GIFS_FORBIDDEN: You can't send gifs in this chat
//  403 CHAT_SEND_MEDIA_FORBIDDEN: You can't send media in this chat
//  403 CHAT_SEND_POLL_FORBIDDEN: You can't send polls in this chat
//  403 CHAT_SEND_STICKERS_FORBIDDEN: You can't send stickers in this chat.
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 GROUPED_MEDIA_INVALID: Invalid grouped media
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MEDIA_EMPTY: The provided media object is invalid
//  400 MESSAGE_IDS_EMPTY: No message ids were provided
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//  400 MSG_ID_INVALID: Invalid message ID provided
//  420 P0NY_FLOODWAIT:
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 RANDOM_ID_INVALID: A provided random ID is invalid
//  400 SCHEDULE_TOO_MUCH: There are too many scheduled messages
//  400 SLOWMODE_MULTI_MSGS_DISABLED: Slowmode is enabled, you cannot forward multiple messages to this group.
//  420 SLOWMODE_WAIT_X: Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
//  400 USER_BANNED_IN_CHANNEL: You're banned from sending messages in supergroups/channels
//  400 USER_IS_BLOCKED: You were blocked by this user
//  400 USER_IS_BOT: Bots can't send messages to other bots
//  400 YOU_BLOCKED_USER: You blocked this user
//
// See https://core.telegram.org/method/messages.forwardMessages for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesForwardMessages(ctx context.Context, request *MessagesForwardMessagesRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesForwardMessages(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesEditChatTitle invokes method messages.editChatTitle#dc452855 returning error if any.
// Chanages chat name and sends a service message on it.
//
// Possible errors:
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 CHAT_TITLE_EMPTY: No chat title provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//
// See https://core.telegram.org/method/messages.editChatTitle for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesEditChatTitle(ctx context.Context, request *MessagesEditChatTitleRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesEditChatTitle(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesEditChatPhoto invokes method messages.editChatPhoto#ca4c79d8 returning error if any.
// Changes chat photo and sends a service message on it
//
// Possible errors:
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 INPUT_CONSTRUCTOR_INVALID: The provided constructor is invalid
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 PHOTO_CROP_SIZE_SMALL: Photo is too small
//  400 PHOTO_EXT_INVALID: The extension of the photo is invalid
//  400 PHOTO_INVALID: Photo invalid
//
// See https://core.telegram.org/method/messages.editChatPhoto for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesEditChatPhoto(ctx context.Context, request *MessagesEditChatPhotoRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesEditChatPhoto(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesAddChatUser invokes method messages.addChatUser#f9a0aa09 returning error if any.
// Adds a user to a chat and sends a service message on it.
//
// Possible errors:
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 USERS_TOO_MUCH: The maximum number of users has been exceeded (to create a chat, for example)
//  400 USER_ALREADY_PARTICIPANT: The user is already in the group
//  400 USER_ID_INVALID: The provided user ID is invalid
//  403 USER_NOT_MUTUAL_CONTACT: The provided user is not a mutual contact
//  403 USER_PRIVACY_RESTRICTED: The user's privacy settings do not allow you to do this
//
// See https://core.telegram.org/method/messages.addChatUser for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesAddChatUser(ctx context.Context, request *MessagesAddChatUserRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesAddChatUser(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesDeleteChatUser invokes method messages.deleteChatUser#c534459a returning error if any.
// Deletes a user from a chat and sends a service message on it.
//
// Possible errors:
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 USER_ID_INVALID: The provided user ID is invalid
//  400 USER_NOT_PARTICIPANT: You're not a member of this supergroup/channel
//
// See https://core.telegram.org/method/messages.deleteChatUser for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesDeleteChatUser(ctx context.Context, request *MessagesDeleteChatUserRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesDeleteChatUser(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesCreateChat invokes method messages.createChat#9cb126e returning error if any.
// Creates a new chat.
//
// Possible errors:
//  400 CHAT_INVALID: Invalid chat
//  400 CHAT_TITLE_EMPTY: No chat title provided
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 USERS_TOO_FEW: Not enough users (to create a chat, for example)
//  403 USER_RESTRICTED: You're spamreported, you can't create channels or chats.
//
// See https://core.telegram.org/method/messages.createChat for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesCreateChat(ctx context.Context, request *MessagesCreateChatRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesCreateChat(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesImportChatInvite invokes method messages.importChatInvite#6c50051c returning error if any.
// Import a chat invite and join a private chat/supergroup/channel
//
// Possible errors:
//  400 CHANNELS_TOO_MUCH: You have joined too many channels/supergroups
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 INVITE_HASH_EMPTY: The invite hash is empty
//  400 INVITE_HASH_EXPIRED: The invite link has expired
//  400 INVITE_HASH_INVALID: The invite hash is invalid
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 USERS_TOO_MUCH: The maximum number of users has been exceeded (to create a chat, for example)
//  400 USER_ALREADY_PARTICIPANT: The user is already in the group
//  400 USER_CHANNELS_TOO_MUCH: One of the users you tried to add is already in too many channels/supergroups
//
// See https://core.telegram.org/method/messages.importChatInvite for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesImportChatInvite(ctx context.Context, hash string) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesImportChatInvite(ctx, hash)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesStartBot invokes method messages.startBot#e6df7378 returning error if any.
// Start a conversation with a bot using a deep linking parameter¹
//
// Links:
//  1) https://core.telegram.org/bots#deep-linking
//
// Possible errors:
//  400 BOT_INVALID: This is not a valid bot
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 START_PARAM_EMPTY: The start parameter is empty
//  400 START_PARAM_INVALID: Start parameter invalid
//  400 START_PARAM_TOO_LONG: Start parameter is too long
//
// See https://core.telegram.org/method/messages.startBot for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesStartBot(ctx context.Context, request *MessagesStartBotRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesStartBot(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesMigrateChat invokes method messages.migrateChat#15a3b8e3 returning error if any.
// Turn a legacy group into a supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  403 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 PEER_ID_INVALID: The provided peer id is invalid
//
// See https://core.telegram.org/method/messages.migrateChat for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesMigrateChat(ctx context.Context, chatid int) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesMigrateChat(ctx, chatid)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendInlineBotResult invokes method messages.sendInlineBotResult#220815b0 returning error if any.
// Send a result obtained using messages.getInlineBotResults¹.
//
// Links:
//  1) https://core.telegram.org/method/messages.getInlineBotResults
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_RESTRICTED: You can't send messages in this chat, you were restricted
//  403 CHAT_SEND_GIFS_FORBIDDEN: You can't send gifs in this chat
//  403 CHAT_SEND_INLINE_FORBIDDEN: You can't send inline messages in this group
//  403 CHAT_SEND_MEDIA_FORBIDDEN: You can't send media in this chat
//  403 CHAT_SEND_STICKERS_FORBIDDEN: You can't send stickers in this chat.
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 INLINE_RESULT_EXPIRED: The inline query expired
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MEDIA_EMPTY: The provided media object is invalid
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 QUERY_ID_EMPTY: The query ID is empty
//  400 RESULT_ID_EMPTY: Result ID empty
//  420 SLOWMODE_WAIT_X: Slowmode is enabled in this chat: you must wait for the specified number of seconds before sending another message to the chat.
//  400 USER_BANNED_IN_CHANNEL: You're banned from sending messages in supergroups/channels
//  400 WEBPAGE_CURL_FAILED: Failure while fetching the webpage with cURL
//  400 WEBPAGE_MEDIA_EMPTY: Webpage media empty
//  400 YOU_BLOCKED_USER: You blocked this user
//
// See https://core.telegram.org/method/messages.sendInlineBotResult for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendInlineBotResult(ctx context.Context, request *MessagesSendInlineBotResultRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendInlineBotResult(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesEditMessage invokes method messages.editMessage#48f71778 returning error if any.
// Edit message
//
// Possible errors:
//  400 BUTTON_DATA_INVALID: The data of one or more of the buttons you provided is invalid
//  400 BUTTON_TYPE_INVALID: The type of one or more of the buttons you provided is invalid
//  400 BUTTON_URL_INVALID: Button URL invalid
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  403 INLINE_BOT_REQUIRED: Only the inline bot can edit message
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MEDIA_CAPTION_TOO_LONG: The caption is too long
//  400 MEDIA_PREV_INVALID: Previous media invalid
//  403 MESSAGE_AUTHOR_REQUIRED: Message author required
//  400 MESSAGE_EDIT_TIME_EXPIRED: You can't edit this message anymore, too much time has passed since its creation.
//  400 MESSAGE_EMPTY: The provided message is empty
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//  400 MESSAGE_NOT_MODIFIED: The message text has not changed
//  400 MESSAGE_TOO_LONG: The provided message is too long
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 REPLY_MARKUP_INVALID: The provided reply markup is invalid
//  400 SCHEDULE_DATE_INVALID: Invalid schedule date provided
//  400 USER_BANNED_IN_CHANNEL: You're banned from sending messages in supergroups/channels
//
// See https://core.telegram.org/method/messages.editMessage for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesEditMessage(ctx context.Context, request *MessagesEditMessageRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesEditMessage(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesGetAllDrafts invokes method messages.getAllDrafts#6a3f8d65 returning error if any.
// Save get all message drafts¹.
//
// Links:
//  1) https://core.telegram.org/api/drafts
//
// See https://core.telegram.org/method/messages.getAllDrafts for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesGetAllDrafts(ctx context.Context) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesGetAllDrafts(ctx)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSetGameScore invokes method messages.setGameScore#8ef8ecc0 returning error if any.
// Use this method to set the score of the specified user in a game sent as a normal
// message (bots only).
//
// Possible errors:
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 USER_BOT_REQUIRED: This method can only be called by a bot
//
// See https://core.telegram.org/method/messages.setGameScore for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSetGameScore(ctx context.Context, request *MessagesSetGameScoreRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSetGameScore(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendScreenshotNotification invokes method messages.sendScreenshotNotification#c97df020 returning error if any.
// Notify the other user in a private chat that a screenshot of the chat was taken
//
// Possible errors:
//  400 PEER_ID_INVALID: The provided peer id is invalid
//
// See https://core.telegram.org/method/messages.sendScreenshotNotification for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendScreenshotNotification(ctx context.Context, request *MessagesSendScreenshotNotificationRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendScreenshotNotification(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendMultiMedia invokes method messages.sendMultiMedia#cc0110cb returning error if any.
// Send an album or grouped media¹
//
// Links:
//  1) https://core.telegram.org/api/files#albums-grouped-media
//
// Possible errors:
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 MEDIA_EMPTY: The provided media object is invalid
//  400 MEDIA_INVALID: Media invalid
//  400 MULTI_MEDIA_TOO_LONG: Too many media files for album
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 RANDOM_ID_EMPTY: Random ID empty
//
// See https://core.telegram.org/method/messages.sendMultiMedia for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendMultiMedia(ctx context.Context, request *MessagesSendMultiMediaRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendMultiMedia(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesUpdatePinnedMessage invokes method messages.updatePinnedMessage#d2aaf7ec returning error if any.
// Pin a message
//
// Possible errors:
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//  400 PIN_RESTRICTED: You can't pin messages
//
// See https://core.telegram.org/method/messages.updatePinnedMessage for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesUpdatePinnedMessage(ctx context.Context, request *MessagesUpdatePinnedMessageRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesUpdatePinnedMessage(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendVote invokes method messages.sendVote#10ea6184 returning error if any.
// Vote in a poll¹
//
// Links:
//  1) https://core.telegram.org/constructor/poll
//
// Possible errors:
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//  400 MESSAGE_POLL_CLOSED: Poll closed
//  400 OPTIONS_TOO_MUCH: Too many options provided
//  400 OPTION_INVALID: Invalid option selected
//  400 REVOTE_NOT_ALLOWED: You cannot change your vote
//
// See https://core.telegram.org/method/messages.sendVote for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendVote(ctx context.Context, request *MessagesSendVoteRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendVote(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesGetPollResults invokes method messages.getPollResults#73bb643b returning error if any.
// Get poll results
//
// Possible errors:
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//
// See https://core.telegram.org/method/messages.getPollResults for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesGetPollResults(ctx context.Context, request *MessagesGetPollResultsRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesGetPollResults(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesEditChatDefaultBannedRights invokes method messages.editChatDefaultBannedRights#a5866b41 returning error if any.
// Edit the default banned rights of a channel/supergroup/group¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 BANNED_RIGHTS_INVALID: You provided some invalid flags in the banned rights
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 UNTIL_DATE_INVALID: Invalid until date provided
//
// See https://core.telegram.org/method/messages.editChatDefaultBannedRights for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesEditChatDefaultBannedRights(ctx context.Context, request *MessagesEditChatDefaultBannedRightsRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesEditChatDefaultBannedRights(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSendScheduledMessages invokes method messages.sendScheduledMessages#bd38850a returning error if any.
// Send scheduled messages right away
//
// Possible errors:
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//
// See https://core.telegram.org/method/messages.sendScheduledMessages for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSendScheduledMessages(ctx context.Context, request *MessagesSendScheduledMessagesRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSendScheduledMessages(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesDeleteScheduledMessages invokes method messages.deleteScheduledMessages#59ae2b16 returning error if any.
// Delete scheduled messages
//
// See https://core.telegram.org/method/messages.deleteScheduledMessages for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesDeleteScheduledMessages(ctx context.Context, request *MessagesDeleteScheduledMessagesRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesDeleteScheduledMessages(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// MessagesSetHistoryTTL invokes method messages.setHistoryTTL#b80e5fe4 returning error if any.
//
// See https://core.telegram.org/method/messages.setHistoryTTL for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) MessagesSetHistoryTTL(ctx context.Context, request *MessagesSetHistoryTTLRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.MessagesSetHistoryTTL(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// HelpGetAppChangelog invokes method help.getAppChangelog#9010ef6f returning error if any.
// Get changelog of current app.
// Typically, an updates¹ constructor will be returned, containing one or more
// updateServiceNotification² updates with app-specific changelogs.
//
// Links:
//  1) https://core.telegram.org/constructor/updates
//  2) https://core.telegram.org/constructor/updateServiceNotification
//
// See https://core.telegram.org/method/help.getAppChangelog for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) HelpGetAppChangelog(ctx context.Context, prevappversion string) (UpdatesClass, error) {
	updates, err := icpt.Client.HelpGetAppChangelog(ctx, prevappversion)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsCreateChannel invokes method channels.createChannel#3d5fb10f returning error if any.
// Create a supergroup/channel¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNELS_TOO_MUCH: You have joined too many channels/supergroups
//  400 CHAT_ABOUT_TOO_LONG: Chat about too long
//  400 CHAT_TITLE_EMPTY: No chat title provided
//  403 USER_RESTRICTED: You're spamreported, you can't create channels or chats.
//
// See https://core.telegram.org/method/channels.createChannel for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsCreateChannel(ctx context.Context, request *ChannelsCreateChannelRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsCreateChannel(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsEditAdmin invokes method channels.editAdmin#d33c8902 returning error if any.
// Modify the admin rights of a user in a supergroup/channel¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 ADMINS_TOO_MUCH: There are too many admins
//  400 BOTS_TOO_MUCH: There are too many bots in this chat/channel
//  400 BOT_CHANNELS_NA: Bots can't edit admin privileges
//  400 BOT_GROUPS_BLOCKED: This bot can't be added to groups
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  403 CHAT_ADMIN_INVITE_REQUIRED: You do not have the rights to do this
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  406 FRESH_CHANGE_ADMINS_FORBIDDEN: You were just elected admin, you can't add or modify other admins yet
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  403 RIGHT_FORBIDDEN: Your admin rights do not allow you to do this
//  400 USERS_TOO_MUCH: The maximum number of users has been exceeded (to create a chat, for example)
//  400 USER_BLOCKED: User blocked
//  403 USER_CHANNELS_TOO_MUCH: One of the users you tried to add is already in too many channels/supergroups
//  400 USER_CREATOR: You can't leave this channel, because you're its creator
//  400 USER_ID_INVALID: The provided user ID is invalid
//  400 USER_NOT_MUTUAL_CONTACT: The provided user is not a mutual contact
//  403 USER_PRIVACY_RESTRICTED: The user's privacy settings do not allow you to do this
//  403 USER_RESTRICTED: You're spamreported, you can't create channels or chats.
//
// See https://core.telegram.org/method/channels.editAdmin for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsEditAdmin(ctx context.Context, request *ChannelsEditAdminRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsEditAdmin(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsEditTitle invokes method channels.editTitle#566decd0 returning error if any.
// Edit the name of a channel/supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 CHAT_TITLE_EMPTY: No chat title provided
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//
// See https://core.telegram.org/method/channels.editTitle for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsEditTitle(ctx context.Context, request *ChannelsEditTitleRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsEditTitle(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsEditPhoto invokes method channels.editPhoto#f12e57c9 returning error if any.
// Change the photo of a channel/supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 PHOTO_CROP_SIZE_SMALL: Photo is too small
//  400 PHOTO_EXT_INVALID: The extension of the photo is invalid
//  400 PHOTO_INVALID: Photo invalid
//
// See https://core.telegram.org/method/channels.editPhoto for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsEditPhoto(ctx context.Context, request *ChannelsEditPhotoRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsEditPhoto(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsJoinChannel invokes method channels.joinChannel#24b524c5 returning error if any.
// Join a channel/supergroup
//
// Possible errors:
//  400 CHANNELS_TOO_MUCH: You have joined too many channels/supergroups
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 INVITE_HASH_EMPTY: The invite hash is empty
//  400 INVITE_HASH_EXPIRED: The invite link has expired
//  400 INVITE_HASH_INVALID: The invite hash is invalid
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 USERS_TOO_MUCH: The maximum number of users has been exceeded (to create a chat, for example)
//  400 USER_ALREADY_PARTICIPANT: The user is already in the group
//  400 USER_CHANNELS_TOO_MUCH: One of the users you tried to add is already in too many channels/supergroups
//
// See https://core.telegram.org/method/channels.joinChannel for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsJoinChannel(ctx context.Context, channel InputChannelClass) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsJoinChannel(ctx, channel)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsLeaveChannel invokes method channels.leaveChannel#f836aa95 returning error if any.
// Leave a channel/supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  403 CHANNEL_PUBLIC_GROUP_NA: channel/supergroup not available
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 USER_CREATOR: You can't leave this channel, because you're its creator
//  400 USER_NOT_PARTICIPANT: You're not a member of this supergroup/channel
//
// See https://core.telegram.org/method/channels.leaveChannel for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsLeaveChannel(ctx context.Context, channel InputChannelClass) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsLeaveChannel(ctx, channel)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsInviteToChannel invokes method channels.inviteToChannel#199f3a6c returning error if any.
// Invite users to a channel/supergroup
//
// Possible errors:
//  400 BOTS_TOO_MUCH: There are too many bots in this chat/channel
//  400 BOT_GROUPS_BLOCKED: This bot can't be added to groups
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_INVALID: Invalid chat
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 USERS_TOO_MUCH: The maximum number of users has been exceeded (to create a chat, for example)
//  400 USER_BANNED_IN_CHANNEL: You're banned from sending messages in supergroups/channels
//  400 USER_BLOCKED: User blocked
//  400 USER_BOT: Bots can only be admins in channels.
//  403 USER_CHANNELS_TOO_MUCH: One of the users you tried to add is already in too many channels/supergroups
//  400 USER_ID_INVALID: The provided user ID is invalid
//  400 USER_KICKED: This user was kicked from this supergroup/channel
//  400 USER_NOT_MUTUAL_CONTACT: The provided user is not a mutual contact
//  403 USER_PRIVACY_RESTRICTED: The user's privacy settings do not allow you to do this
//
// See https://core.telegram.org/method/channels.inviteToChannel for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsInviteToChannel(ctx context.Context, request *ChannelsInviteToChannelRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsInviteToChannel(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsDeleteChannel invokes method channels.deleteChannel#c0111fe3 returning error if any.
// Delete a channel/supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHANNEL_TOO_LARGE: Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change)
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//
// See https://core.telegram.org/method/channels.deleteChannel for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsDeleteChannel(ctx context.Context, channel InputChannelClass) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsDeleteChannel(ctx, channel)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsToggleSignatures invokes method channels.toggleSignatures#1f69b606 returning error if any.
// Enable/disable message signatures in channels
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//
// See https://core.telegram.org/method/channels.toggleSignatures for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsToggleSignatures(ctx context.Context, request *ChannelsToggleSignaturesRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsToggleSignatures(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsEditBanned invokes method channels.editBanned#96e6cd81 returning error if any.
// Ban/unban/kick a user in a supergroup/channel¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PINNED_DIALOGS_TOO_MUCH: Too many pinned dialogs
//  400 USER_ADMIN_INVALID: You're not an admin
//  400 USER_ID_INVALID: The provided user ID is invalid
//
// See https://core.telegram.org/method/channels.editBanned for reference.
// Can be used by bots.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsEditBanned(ctx context.Context, request *ChannelsEditBannedRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsEditBanned(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsTogglePreHistoryHidden invokes method channels.togglePreHistoryHidden#eabbb94c returning error if any.
// Hide/unhide message history for new channel/supergroup users
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 CHAT_LINK_EXISTS: The chat is public, you can't hide the history to new users
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//
// See https://core.telegram.org/method/channels.togglePreHistoryHidden for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsTogglePreHistoryHidden(ctx context.Context, request *ChannelsTogglePreHistoryHiddenRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsTogglePreHistoryHidden(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsEditCreator invokes method channels.editCreator#8f38cd1f returning error if any.
// Transfer channel ownership
//
// Possible errors:
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 PASSWORD_HASH_INVALID: The provided password hash is invalid
//  400 PASSWORD_MISSING: You must enable 2FA in order to transfer ownership of a channel
//  400 PASSWORD_TOO_FRESH_X: The password was modified less than 24 hours ago, try again in X seconds
//  400 SESSION_TOO_FRESH_X: This session was created less than 24 hours ago, try again in X seconds
//  400 USER_ID_INVALID: The provided user ID is invalid
//
// See https://core.telegram.org/method/channels.editCreator for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsEditCreator(ctx context.Context, request *ChannelsEditCreatorRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsEditCreator(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsToggleSlowMode invokes method channels.toggleSlowMode#edd49ef0 returning error if any.
// Toggle supergroup slow mode: if enabled, users will only be able to send one message
// every seconds seconds
//
// Possible errors:
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 INPUT_METHOD_INVALID_1192227_X: Invalid method
//  400 INPUT_METHOD_INVALID_1604042050_X: Invalid method
//  400 SECONDS_INVALID: Invalid duration provided
//
// See https://core.telegram.org/method/channels.toggleSlowMode for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsToggleSlowMode(ctx context.Context, request *ChannelsToggleSlowModeRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsToggleSlowMode(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// ChannelsConvertToGigagroup invokes method channels.convertToGigagroup#b290c69 returning error if any.
//
// See https://core.telegram.org/method/channels.convertToGigagroup for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) ChannelsConvertToGigagroup(ctx context.Context, channel InputChannelClass) (UpdatesClass, error) {
	updates, err := icpt.Client.ChannelsConvertToGigagroup(ctx, channel)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneDiscardCall invokes method phone.discardCall#b2cbc1c0 returning error if any.
// Refuse or end running call
//
// Possible errors:
//  400 CALL_ALREADY_ACCEPTED: The call was already accepted
//  400 CALL_PEER_INVALID: The provided call peer object is invalid
//
// See https://core.telegram.org/method/phone.discardCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneDiscardCall(ctx context.Context, request *PhoneDiscardCallRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneDiscardCall(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneSetCallRating invokes method phone.setCallRating#59ead627 returning error if any.
// Rate a call
//
// Possible errors:
//  400 CALL_PEER_INVALID: The provided call peer object is invalid
//
// See https://core.telegram.org/method/phone.setCallRating for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneSetCallRating(ctx context.Context, request *PhoneSetCallRatingRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneSetCallRating(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneCreateGroupCall invokes method phone.createGroupCall#48cdc6d8 returning error if any.
//
// See https://core.telegram.org/method/phone.createGroupCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneCreateGroupCall(ctx context.Context, request *PhoneCreateGroupCallRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneCreateGroupCall(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneJoinGroupCall invokes method phone.joinGroupCall#b132ff7b returning error if any.
//
// See https://core.telegram.org/method/phone.joinGroupCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneJoinGroupCall(ctx context.Context, request *PhoneJoinGroupCallRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneJoinGroupCall(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneLeaveGroupCall invokes method phone.leaveGroupCall#500377f9 returning error if any.
//
// See https://core.telegram.org/method/phone.leaveGroupCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneLeaveGroupCall(ctx context.Context, request *PhoneLeaveGroupCallRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneLeaveGroupCall(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneInviteToGroupCall invokes method phone.inviteToGroupCall#7b393160 returning error if any.
//
// See https://core.telegram.org/method/phone.inviteToGroupCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneInviteToGroupCall(ctx context.Context, request *PhoneInviteToGroupCallRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneInviteToGroupCall(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneDiscardGroupCall invokes method phone.discardGroupCall#7a777135 returning error if any.
//
// See https://core.telegram.org/method/phone.discardGroupCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneDiscardGroupCall(ctx context.Context, call InputGroupCall) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneDiscardGroupCall(ctx, call)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneToggleGroupCallSettings invokes method phone.toggleGroupCallSettings#74bbb43d returning error if any.
//
// See https://core.telegram.org/method/phone.toggleGroupCallSettings for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneToggleGroupCallSettings(ctx context.Context, request *PhoneToggleGroupCallSettingsRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneToggleGroupCallSettings(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneToggleGroupCallRecord invokes method phone.toggleGroupCallRecord#c02a66d7 returning error if any.
//
// See https://core.telegram.org/method/phone.toggleGroupCallRecord for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneToggleGroupCallRecord(ctx context.Context, request *PhoneToggleGroupCallRecordRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneToggleGroupCallRecord(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneEditGroupCallParticipant invokes method phone.editGroupCallParticipant#d975eb80 returning error if any.
//
// See https://core.telegram.org/method/phone.editGroupCallParticipant for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneEditGroupCallParticipant(ctx context.Context, request *PhoneEditGroupCallParticipantRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneEditGroupCallParticipant(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneEditGroupCallTitle invokes method phone.editGroupCallTitle#1ca6ac0a returning error if any.
//
// See https://core.telegram.org/method/phone.editGroupCallTitle for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneEditGroupCallTitle(ctx context.Context, request *PhoneEditGroupCallTitleRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneEditGroupCallTitle(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneToggleGroupCallStartSubscription invokes method phone.toggleGroupCallStartSubscription#219c34e6 returning error if any.
//
// See https://core.telegram.org/method/phone.toggleGroupCallStartSubscription for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneToggleGroupCallStartSubscription(ctx context.Context, request *PhoneToggleGroupCallStartSubscriptionRequest) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneToggleGroupCallStartSubscription(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// PhoneStartScheduledGroupCall invokes method phone.startScheduledGroupCall#5680e342 returning error if any.
//
// See https://core.telegram.org/method/phone.startScheduledGroupCall for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) PhoneStartScheduledGroupCall(ctx context.Context, call InputGroupCall) (UpdatesClass, error) {
	updates, err := icpt.Client.PhoneStartScheduledGroupCall(ctx, call)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// FoldersEditPeerFolders invokes method folders.editPeerFolders#6847d0ab returning error if any.
// Edit peers in peer folder¹
//
// Links:
//  1) https://core.telegram.org/api/folders#peer-folders
//
// Possible errors:
//  400 FOLDER_ID_INVALID: Invalid folder ID
//
// See https://core.telegram.org/method/folders.editPeerFolders for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) FoldersEditPeerFolders(ctx context.Context, folderpeers []InputFolderPeer) (UpdatesClass, error) {
	updates, err := icpt.Client.FoldersEditPeerFolders(ctx, folderpeers)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}

// FoldersDeleteFolder invokes method folders.deleteFolder#1c295881 returning error if any.
// Delete a peer folder¹
//
// Links:
//  1) https://core.telegram.org/api/folders#peer-folders
//
// See https://core.telegram.org/method/folders.deleteFolder for reference.
//
// Note: If the method call was successful, the received updates will be passed to the interceptor first.
// If the interceptor returns an error, this error will be returned as the result of the method.
func (icpt *UpdatesInterceptor) FoldersDeleteFolder(ctx context.Context, folderid int) (UpdatesClass, error) {
	updates, err := icpt.Client.FoldersDeleteFolder(ctx, folderid)
	if err != nil {
		return nil, err
	}

	if err := icpt.handle(updates); err != nil {
		return nil, fmt.Errorf("interceptor: %w", err)
	}

	return updates, nil
}
