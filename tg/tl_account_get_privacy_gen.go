// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// AccountGetPrivacyRequest represents TL type `account.getPrivacy#dadbc950`.
// Get privacy settings of current account
//
// See https://core.telegram.org/method/account.getPrivacy for reference.
type AccountGetPrivacyRequest struct {
	// Peer category whose privacy settings should be fetched
	Key InputPrivacyKeyClass
}

// AccountGetPrivacyRequestTypeID is TL type id of AccountGetPrivacyRequest.
const AccountGetPrivacyRequestTypeID = 0xdadbc950

func (g *AccountGetPrivacyRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Key == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *AccountGetPrivacyRequest) String() string {
	if g == nil {
		return "AccountGetPrivacyRequest(nil)"
	}
	type Alias AccountGetPrivacyRequest
	return fmt.Sprintf("AccountGetPrivacyRequest%+v", Alias(*g))
}

// FillFrom fills AccountGetPrivacyRequest from given interface.
func (g *AccountGetPrivacyRequest) FillFrom(from interface {
	GetKey() (value InputPrivacyKeyClass)
}) {
	g.Key = from.GetKey()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AccountGetPrivacyRequest) TypeID() uint32 {
	return AccountGetPrivacyRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AccountGetPrivacyRequest) TypeName() string {
	return "account.getPrivacy"
}

// TypeInfo returns info about TL type.
func (g *AccountGetPrivacyRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "account.getPrivacy",
		ID:   AccountGetPrivacyRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Key",
			SchemaName: "key",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *AccountGetPrivacyRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode %s as nil", "account.getPrivacy#dadbc950")
	}
	b.PutID(AccountGetPrivacyRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *AccountGetPrivacyRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode %s as nil", "account.getPrivacy#dadbc950")
	}
	if g.Key == nil {
		return fmt.Errorf("unable to encode %s: field %s is nil", "account.getPrivacy#dadbc950", "key")
	}
	if err := g.Key.Encode(b); err != nil {
		return fmt.Errorf("unable to encode %s: field %s: %w", "account.getPrivacy#dadbc950", "key", err)
	}
	return nil
}

// GetKey returns value of Key field.
func (g *AccountGetPrivacyRequest) GetKey() (value InputPrivacyKeyClass) {
	return g.Key
}

// Decode implements bin.Decoder.
func (g *AccountGetPrivacyRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode %s to nil", "account.getPrivacy#dadbc950")
	}
	if err := b.ConsumeID(AccountGetPrivacyRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode %s: %w", "account.getPrivacy#dadbc950", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *AccountGetPrivacyRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode %s to nil", "account.getPrivacy#dadbc950")
	}
	{
		value, err := DecodeInputPrivacyKey(b)
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "account.getPrivacy#dadbc950", "key", err)
		}
		g.Key = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountGetPrivacyRequest.
var (
	_ bin.Encoder     = &AccountGetPrivacyRequest{}
	_ bin.Decoder     = &AccountGetPrivacyRequest{}
	_ bin.BareEncoder = &AccountGetPrivacyRequest{}
	_ bin.BareDecoder = &AccountGetPrivacyRequest{}
)

// AccountGetPrivacy invokes method account.getPrivacy#dadbc950 returning error if any.
// Get privacy settings of current account
//
// Possible errors:
//  400 PRIVACY_KEY_INVALID: The privacy key is invalid
//
// See https://core.telegram.org/method/account.getPrivacy for reference.
func (c *Client) AccountGetPrivacy(ctx context.Context, key InputPrivacyKeyClass) (*AccountPrivacyRules, error) {
	var result AccountPrivacyRules

	request := &AccountGetPrivacyRequest{
		Key: key,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
