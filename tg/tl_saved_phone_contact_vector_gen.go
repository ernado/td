// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// SavedPhoneContactVector is a box for Vector<SavedContact>
type SavedPhoneContactVector struct {
	// Elements of Vector<SavedContact>
	Elems []SavedPhoneContact
}

// SavedPhoneContactVectorTypeID is TL type id of SavedPhoneContactVector.
const SavedPhoneContactVectorTypeID = bin.TypeVector

func (vec *SavedPhoneContactVector) Zero() bool {
	if vec == nil {
		return true
	}
	if !(vec.Elems == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (vec *SavedPhoneContactVector) String() string {
	if vec == nil {
		return "SavedPhoneContactVector(nil)"
	}
	type Alias SavedPhoneContactVector
	return fmt.Sprintf("SavedPhoneContactVector%+v", Alias(*vec))
}

// FillFrom fills SavedPhoneContactVector from given interface.
func (vec *SavedPhoneContactVector) FillFrom(from interface {
	GetElems() (value []SavedPhoneContact)
}) {
	vec.Elems = from.GetElems()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SavedPhoneContactVector) TypeID() uint32 {
	return SavedPhoneContactVectorTypeID
}

// TypeName returns name of type in TL schema.
func (*SavedPhoneContactVector) TypeName() string {
	return ""
}

// TypeInfo returns info about TL type.
func (vec *SavedPhoneContactVector) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "",
		ID:   SavedPhoneContactVectorTypeID,
	}
	if vec == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Elems",
			SchemaName: "Elems",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (vec *SavedPhoneContactVector) Encode(b *bin.Buffer) error {
	if vec == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "Vector<SavedContact>",
		}
	}

	return vec.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (vec *SavedPhoneContactVector) EncodeBare(b *bin.Buffer) error {
	if vec == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "Vector<SavedContact>",
		}
	}
	b.PutVectorHeader(len(vec.Elems))
	for idx, v := range vec.Elems {
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "Vector<SavedContact>",
				FieldName: "Elems",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetElems returns value of Elems field.
func (vec *SavedPhoneContactVector) GetElems() (value []SavedPhoneContact) {
	return vec.Elems
}

// Decode implements bin.Decoder.
func (vec *SavedPhoneContactVector) Decode(b *bin.Buffer) error {
	if vec == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "Vector<SavedContact>",
		}
	}

	return vec.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (vec *SavedPhoneContactVector) DecodeBare(b *bin.Buffer) error {
	if vec == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "Vector<SavedContact>",
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "Vector<SavedContact>",
				FieldName:  "Elems",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			vec.Elems = make([]SavedPhoneContact, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value SavedPhoneContact
			if err := value.Decode(b); err != nil {
				return &bin.FieldError{
					Action:     "decode",
					BareField:  false,
					TypeName:   "Vector<SavedContact>",
					FieldName:  "Elems",
					Underlying: err,
				}
			}
			vec.Elems = append(vec.Elems, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for SavedPhoneContactVector.
var (
	_ bin.Encoder     = &SavedPhoneContactVector{}
	_ bin.Decoder     = &SavedPhoneContactVector{}
	_ bin.BareEncoder = &SavedPhoneContactVector{}
	_ bin.BareDecoder = &SavedPhoneContactVector{}
)
