// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ChannelsChannelParticipant represents TL type `channels.channelParticipant#dfb80317`.
// Represents a channel participant
//
// See https://core.telegram.org/constructor/channels.channelParticipant for reference.
type ChannelsChannelParticipant struct {
	// The channel participant
	Participant ChannelParticipantClass
	// Chats field of ChannelsChannelParticipant.
	Chats []ChatClass
	// Users
	Users []UserClass
}

// ChannelsChannelParticipantTypeID is TL type id of ChannelsChannelParticipant.
const ChannelsChannelParticipantTypeID = 0xdfb80317

func (c *ChannelsChannelParticipant) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Participant == nil) {
		return false
	}
	if !(c.Chats == nil) {
		return false
	}
	if !(c.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelsChannelParticipant) String() string {
	if c == nil {
		return "ChannelsChannelParticipant(nil)"
	}
	type Alias ChannelsChannelParticipant
	return fmt.Sprintf("ChannelsChannelParticipant%+v", Alias(*c))
}

// FillFrom fills ChannelsChannelParticipant from given interface.
func (c *ChannelsChannelParticipant) FillFrom(from interface {
	GetParticipant() (value ChannelParticipantClass)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	c.Participant = from.GetParticipant()
	c.Chats = from.GetChats()
	c.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsChannelParticipant) TypeID() uint32 {
	return ChannelsChannelParticipantTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsChannelParticipant) TypeName() string {
	return "channels.channelParticipant"
}

// TypeInfo returns info about TL type.
func (c *ChannelsChannelParticipant) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.channelParticipant",
		ID:   ChannelsChannelParticipantTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Participant",
			SchemaName: "participant",
		},
		{
			Name:       "Chats",
			SchemaName: "chats",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChannelsChannelParticipant) Encode(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "channels.channelParticipant#dfb80317",
		}
	}
	b.PutID(ChannelsChannelParticipantTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChannelsChannelParticipant) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "channels.channelParticipant#dfb80317",
		}
	}
	if c.Participant == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "channels.channelParticipant#dfb80317",
			FieldName: "participant",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "ChannelParticipant",
			},
		}
	}
	if err := c.Participant.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "channels.channelParticipant#dfb80317",
			FieldName:  "participant",
			Underlying: err,
		}
	}
	b.PutVectorHeader(len(c.Chats))
	for idx, v := range c.Chats {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "channels.channelParticipant#dfb80317",
				FieldName: "chats",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<Chat>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "channels.channelParticipant#dfb80317",
				FieldName: "chats",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(c.Users))
	for idx, v := range c.Users {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "channels.channelParticipant#dfb80317",
				FieldName: "users",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<User>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "channels.channelParticipant#dfb80317",
				FieldName: "users",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetParticipant returns value of Participant field.
func (c *ChannelsChannelParticipant) GetParticipant() (value ChannelParticipantClass) {
	return c.Participant
}

// GetChats returns value of Chats field.
func (c *ChannelsChannelParticipant) GetChats() (value []ChatClass) {
	return c.Chats
}

// MapChats returns field Chats wrapped in ChatClassArray helper.
func (c *ChannelsChannelParticipant) MapChats() (value ChatClassArray) {
	return ChatClassArray(c.Chats)
}

// GetUsers returns value of Users field.
func (c *ChannelsChannelParticipant) GetUsers() (value []UserClass) {
	return c.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (c *ChannelsChannelParticipant) MapUsers() (value UserClassArray) {
	return UserClassArray(c.Users)
}

// Decode implements bin.Decoder.
func (c *ChannelsChannelParticipant) Decode(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "channels.channelParticipant#dfb80317",
		}
	}
	if err := b.ConsumeID(ChannelsChannelParticipantTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "channels.channelParticipant#dfb80317",
			Underlying: err,
		}
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChannelsChannelParticipant) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "channels.channelParticipant#dfb80317",
		}
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "channels.channelParticipant#dfb80317",
				FieldName:  "participant",
				Underlying: err,
			}
		}
		c.Participant = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "channels.channelParticipant#dfb80317",
				FieldName:  "chats",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			c.Chats = make([]ChatClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "channels.channelParticipant#dfb80317",
					FieldName:  "chats",
					Underlying: err,
				}
			}
			c.Chats = append(c.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "channels.channelParticipant#dfb80317",
				FieldName:  "users",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			c.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "channels.channelParticipant#dfb80317",
					FieldName:  "users",
					Underlying: err,
				}
			}
			c.Users = append(c.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsChannelParticipant.
var (
	_ bin.Encoder     = &ChannelsChannelParticipant{}
	_ bin.Decoder     = &ChannelsChannelParticipant{}
	_ bin.BareEncoder = &ChannelsChannelParticipant{}
	_ bin.BareDecoder = &ChannelsChannelParticipant{}
)
