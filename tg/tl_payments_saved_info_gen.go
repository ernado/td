// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// PaymentsSavedInfo represents TL type `payments.savedInfo#fb8fe43c`.
// Saved server-side order information
//
// See https://core.telegram.org/constructor/payments.savedInfo for reference.
type PaymentsSavedInfo struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Whether the user has some saved payment credentials
	HasSavedCredentials bool
	// Saved server-side order information
	//
	// Use SetSavedInfo and GetSavedInfo helpers.
	SavedInfo PaymentRequestedInfo
}

// PaymentsSavedInfoTypeID is TL type id of PaymentsSavedInfo.
const PaymentsSavedInfoTypeID = 0xfb8fe43c

func (s *PaymentsSavedInfo) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.HasSavedCredentials == false) {
		return false
	}
	if !(s.SavedInfo.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *PaymentsSavedInfo) String() string {
	if s == nil {
		return "PaymentsSavedInfo(nil)"
	}
	type Alias PaymentsSavedInfo
	return fmt.Sprintf("PaymentsSavedInfo%+v", Alias(*s))
}

// FillFrom fills PaymentsSavedInfo from given interface.
func (s *PaymentsSavedInfo) FillFrom(from interface {
	GetHasSavedCredentials() (value bool)
	GetSavedInfo() (value PaymentRequestedInfo, ok bool)
}) {
	s.HasSavedCredentials = from.GetHasSavedCredentials()
	if val, ok := from.GetSavedInfo(); ok {
		s.SavedInfo = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsSavedInfo) TypeID() uint32 {
	return PaymentsSavedInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsSavedInfo) TypeName() string {
	return "payments.savedInfo"
}

// TypeInfo returns info about TL type.
func (s *PaymentsSavedInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.savedInfo",
		ID:   PaymentsSavedInfoTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "HasSavedCredentials",
			SchemaName: "has_saved_credentials",
			Null:       !s.Flags.Has(1),
		},
		{
			Name:       "SavedInfo",
			SchemaName: "saved_info",
			Null:       !s.Flags.Has(0),
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *PaymentsSavedInfo) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "payments.savedInfo#fb8fe43c",
		}
	}
	b.PutID(PaymentsSavedInfoTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *PaymentsSavedInfo) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "payments.savedInfo#fb8fe43c",
		}
	}
	if !(s.HasSavedCredentials == false) {
		s.Flags.Set(1)
	}
	if !(s.SavedInfo.Zero()) {
		s.Flags.Set(0)
	}
	if err := s.Flags.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "payments.savedInfo#fb8fe43c",
			FieldName:  "flags",
			Underlying: err,
		}
	}
	if s.Flags.Has(0) {
		if err := s.SavedInfo.Encode(b); err != nil {
			return &bin.FieldError{
				Action:     "encode",
				TypeName:   "payments.savedInfo#fb8fe43c",
				FieldName:  "saved_info",
				Underlying: err,
			}
		}
	}
	return nil
}

// SetHasSavedCredentials sets value of HasSavedCredentials conditional field.
func (s *PaymentsSavedInfo) SetHasSavedCredentials(value bool) {
	if value {
		s.Flags.Set(1)
		s.HasSavedCredentials = true
	} else {
		s.Flags.Unset(1)
		s.HasSavedCredentials = false
	}
}

// GetHasSavedCredentials returns value of HasSavedCredentials conditional field.
func (s *PaymentsSavedInfo) GetHasSavedCredentials() (value bool) {
	return s.Flags.Has(1)
}

// SetSavedInfo sets value of SavedInfo conditional field.
func (s *PaymentsSavedInfo) SetSavedInfo(value PaymentRequestedInfo) {
	s.Flags.Set(0)
	s.SavedInfo = value
}

// GetSavedInfo returns value of SavedInfo conditional field and
// boolean which is true if field was set.
func (s *PaymentsSavedInfo) GetSavedInfo() (value PaymentRequestedInfo, ok bool) {
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.SavedInfo, true
}

// Decode implements bin.Decoder.
func (s *PaymentsSavedInfo) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "payments.savedInfo#fb8fe43c",
		}
	}
	if err := b.ConsumeID(PaymentsSavedInfoTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "payments.savedInfo#fb8fe43c",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *PaymentsSavedInfo) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "payments.savedInfo#fb8fe43c",
		}
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "payments.savedInfo#fb8fe43c",
				FieldName:  "flags",
				Underlying: err,
			}
		}
	}
	s.HasSavedCredentials = s.Flags.Has(1)
	if s.Flags.Has(0) {
		if err := s.SavedInfo.Decode(b); err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "payments.savedInfo#fb8fe43c",
				FieldName:  "saved_info",
				Underlying: err,
			}
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PaymentsSavedInfo.
var (
	_ bin.Encoder     = &PaymentsSavedInfo{}
	_ bin.Decoder     = &PaymentsSavedInfo{}
	_ bin.BareEncoder = &PaymentsSavedInfo{}
	_ bin.BareDecoder = &PaymentsSavedInfo{}
)
