// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// KeyboardButtonRow represents TL type `keyboardButtonRow#77608b83`.
// Inline keyboard row
//
// See https://core.telegram.org/constructor/keyboardButtonRow for reference.
type KeyboardButtonRow struct {
	// Bot or inline keyboard buttons
	Buttons []KeyboardButtonClass
}

// KeyboardButtonRowTypeID is TL type id of KeyboardButtonRow.
const KeyboardButtonRowTypeID = 0x77608b83

func (k *KeyboardButtonRow) Zero() bool {
	if k == nil {
		return true
	}
	if !(k.Buttons == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (k *KeyboardButtonRow) String() string {
	if k == nil {
		return "KeyboardButtonRow(nil)"
	}
	type Alias KeyboardButtonRow
	return fmt.Sprintf("KeyboardButtonRow%+v", Alias(*k))
}

// FillFrom fills KeyboardButtonRow from given interface.
func (k *KeyboardButtonRow) FillFrom(from interface {
	GetButtons() (value []KeyboardButtonClass)
}) {
	k.Buttons = from.GetButtons()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*KeyboardButtonRow) TypeID() uint32 {
	return KeyboardButtonRowTypeID
}

// TypeName returns name of type in TL schema.
func (*KeyboardButtonRow) TypeName() string {
	return "keyboardButtonRow"
}

// TypeInfo returns info about TL type.
func (k *KeyboardButtonRow) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "keyboardButtonRow",
		ID:   KeyboardButtonRowTypeID,
	}
	if k == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Buttons",
			SchemaName: "buttons",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (k *KeyboardButtonRow) Encode(b *bin.Buffer) error {
	if k == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "keyboardButtonRow#77608b83",
		}
	}
	b.PutID(KeyboardButtonRowTypeID)
	return k.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (k *KeyboardButtonRow) EncodeBare(b *bin.Buffer) error {
	if k == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "keyboardButtonRow#77608b83",
		}
	}
	b.PutVectorHeader(len(k.Buttons))
	for idx, v := range k.Buttons {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "keyboardButtonRow#77608b83",
				FieldName: "buttons",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<KeyboardButton>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "keyboardButtonRow#77608b83",
				FieldName: "buttons",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetButtons returns value of Buttons field.
func (k *KeyboardButtonRow) GetButtons() (value []KeyboardButtonClass) {
	return k.Buttons
}

// MapButtons returns field Buttons wrapped in KeyboardButtonClassArray helper.
func (k *KeyboardButtonRow) MapButtons() (value KeyboardButtonClassArray) {
	return KeyboardButtonClassArray(k.Buttons)
}

// Decode implements bin.Decoder.
func (k *KeyboardButtonRow) Decode(b *bin.Buffer) error {
	if k == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "keyboardButtonRow#77608b83",
		}
	}
	if err := b.ConsumeID(KeyboardButtonRowTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "keyboardButtonRow#77608b83",
			Underlying: err,
		}
	}
	return k.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (k *KeyboardButtonRow) DecodeBare(b *bin.Buffer) error {
	if k == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "keyboardButtonRow#77608b83",
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "keyboardButtonRow#77608b83",
				FieldName:  "buttons",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			k.Buttons = make([]KeyboardButtonClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeKeyboardButton(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "keyboardButtonRow#77608b83",
					FieldName:  "buttons",
					Underlying: err,
				}
			}
			k.Buttons = append(k.Buttons, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for KeyboardButtonRow.
var (
	_ bin.Encoder     = &KeyboardButtonRow{}
	_ bin.Decoder     = &KeyboardButtonRow{}
	_ bin.BareEncoder = &KeyboardButtonRow{}
	_ bin.BareDecoder = &KeyboardButtonRow{}
)
