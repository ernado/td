// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// PhoneGroupCall represents TL type `phone.groupCall#9e727aad`.
//
// See https://core.telegram.org/constructor/phone.groupCall for reference.
type PhoneGroupCall struct {
	// Call field of PhoneGroupCall.
	Call GroupCallClass
	// Participants field of PhoneGroupCall.
	Participants []GroupCallParticipant
	// ParticipantsNextOffset field of PhoneGroupCall.
	ParticipantsNextOffset string
	// Chats field of PhoneGroupCall.
	Chats []ChatClass
	// Users field of PhoneGroupCall.
	Users []UserClass
}

// PhoneGroupCallTypeID is TL type id of PhoneGroupCall.
const PhoneGroupCallTypeID = 0x9e727aad

func (g *PhoneGroupCall) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Call == nil) {
		return false
	}
	if !(g.Participants == nil) {
		return false
	}
	if !(g.ParticipantsNextOffset == "") {
		return false
	}
	if !(g.Chats == nil) {
		return false
	}
	if !(g.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *PhoneGroupCall) String() string {
	if g == nil {
		return "PhoneGroupCall(nil)"
	}
	type Alias PhoneGroupCall
	return fmt.Sprintf("PhoneGroupCall%+v", Alias(*g))
}

// FillFrom fills PhoneGroupCall from given interface.
func (g *PhoneGroupCall) FillFrom(from interface {
	GetCall() (value GroupCallClass)
	GetParticipants() (value []GroupCallParticipant)
	GetParticipantsNextOffset() (value string)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	g.Call = from.GetCall()
	g.Participants = from.GetParticipants()
	g.ParticipantsNextOffset = from.GetParticipantsNextOffset()
	g.Chats = from.GetChats()
	g.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PhoneGroupCall) TypeID() uint32 {
	return PhoneGroupCallTypeID
}

// TypeName returns name of type in TL schema.
func (*PhoneGroupCall) TypeName() string {
	return "phone.groupCall"
}

// TypeInfo returns info about TL type.
func (g *PhoneGroupCall) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "phone.groupCall",
		ID:   PhoneGroupCallTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Call",
			SchemaName: "call",
		},
		{
			Name:       "Participants",
			SchemaName: "participants",
		},
		{
			Name:       "ParticipantsNextOffset",
			SchemaName: "participants_next_offset",
		},
		{
			Name:       "Chats",
			SchemaName: "chats",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *PhoneGroupCall) Encode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "phone.groupCall#9e727aad",
		}
	}
	b.PutID(PhoneGroupCallTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *PhoneGroupCall) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "phone.groupCall#9e727aad",
		}
	}
	if g.Call == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "phone.groupCall#9e727aad",
			FieldName: "call",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "GroupCall",
			},
		}
	}
	if err := g.Call.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "phone.groupCall#9e727aad",
			FieldName:  "call",
			Underlying: err,
		}
	}
	b.PutVectorHeader(len(g.Participants))
	for idx, v := range g.Participants {
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "phone.groupCall#9e727aad",
				FieldName: "participants",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutString(g.ParticipantsNextOffset)
	b.PutVectorHeader(len(g.Chats))
	for idx, v := range g.Chats {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "phone.groupCall#9e727aad",
				FieldName: "chats",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<Chat>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "phone.groupCall#9e727aad",
				FieldName: "chats",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(g.Users))
	for idx, v := range g.Users {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "phone.groupCall#9e727aad",
				FieldName: "users",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<User>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "phone.groupCall#9e727aad",
				FieldName: "users",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetCall returns value of Call field.
func (g *PhoneGroupCall) GetCall() (value GroupCallClass) {
	return g.Call
}

// GetParticipants returns value of Participants field.
func (g *PhoneGroupCall) GetParticipants() (value []GroupCallParticipant) {
	return g.Participants
}

// GetParticipantsNextOffset returns value of ParticipantsNextOffset field.
func (g *PhoneGroupCall) GetParticipantsNextOffset() (value string) {
	return g.ParticipantsNextOffset
}

// GetChats returns value of Chats field.
func (g *PhoneGroupCall) GetChats() (value []ChatClass) {
	return g.Chats
}

// MapChats returns field Chats wrapped in ChatClassArray helper.
func (g *PhoneGroupCall) MapChats() (value ChatClassArray) {
	return ChatClassArray(g.Chats)
}

// GetUsers returns value of Users field.
func (g *PhoneGroupCall) GetUsers() (value []UserClass) {
	return g.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (g *PhoneGroupCall) MapUsers() (value UserClassArray) {
	return UserClassArray(g.Users)
}

// Decode implements bin.Decoder.
func (g *PhoneGroupCall) Decode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "phone.groupCall#9e727aad",
		}
	}
	if err := b.ConsumeID(PhoneGroupCallTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "phone.groupCall#9e727aad",
			Underlying: err,
		}
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *PhoneGroupCall) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "phone.groupCall#9e727aad",
		}
	}
	{
		value, err := DecodeGroupCall(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "phone.groupCall#9e727aad",
				FieldName:  "call",
				Underlying: err,
			}
		}
		g.Call = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "phone.groupCall#9e727aad",
				FieldName:  "participants",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			g.Participants = make([]GroupCallParticipant, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value GroupCallParticipant
			if err := value.Decode(b); err != nil {
				return &bin.FieldError{
					Action:     "decode",
					BareField:  false,
					TypeName:   "phone.groupCall#9e727aad",
					FieldName:  "participants",
					Underlying: err,
				}
			}
			g.Participants = append(g.Participants, value)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "phone.groupCall#9e727aad",
				FieldName:  "participants_next_offset",
				Underlying: err,
			}
		}
		g.ParticipantsNextOffset = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "phone.groupCall#9e727aad",
				FieldName:  "chats",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			g.Chats = make([]ChatClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "phone.groupCall#9e727aad",
					FieldName:  "chats",
					Underlying: err,
				}
			}
			g.Chats = append(g.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "phone.groupCall#9e727aad",
				FieldName:  "users",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			g.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "phone.groupCall#9e727aad",
					FieldName:  "users",
					Underlying: err,
				}
			}
			g.Users = append(g.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PhoneGroupCall.
var (
	_ bin.Encoder     = &PhoneGroupCall{}
	_ bin.Decoder     = &PhoneGroupCall{}
	_ bin.BareEncoder = &PhoneGroupCall{}
	_ bin.BareDecoder = &PhoneGroupCall{}
)
