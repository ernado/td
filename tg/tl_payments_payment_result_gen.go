// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// PaymentsPaymentResult represents TL type `payments.paymentResult#4e5f810d`.
// Payment result
//
// See https://core.telegram.org/constructor/payments.paymentResult for reference.
type PaymentsPaymentResult struct {
	// Info about the payment
	Updates UpdatesClass
}

// PaymentsPaymentResultTypeID is TL type id of PaymentsPaymentResult.
const PaymentsPaymentResultTypeID = 0x4e5f810d

func (p *PaymentsPaymentResult) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.Updates == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PaymentsPaymentResult) String() string {
	if p == nil {
		return "PaymentsPaymentResult(nil)"
	}
	type Alias PaymentsPaymentResult
	return fmt.Sprintf("PaymentsPaymentResult%+v", Alias(*p))
}

// FillFrom fills PaymentsPaymentResult from given interface.
func (p *PaymentsPaymentResult) FillFrom(from interface {
	GetUpdates() (value UpdatesClass)
}) {
	p.Updates = from.GetUpdates()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsPaymentResult) TypeID() uint32 {
	return PaymentsPaymentResultTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsPaymentResult) TypeName() string {
	return "payments.paymentResult"
}

// TypeInfo returns info about TL type.
func (p *PaymentsPaymentResult) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.paymentResult",
		ID:   PaymentsPaymentResultTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Updates",
			SchemaName: "updates",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PaymentsPaymentResult) Encode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "payments.paymentResult#4e5f810d",
		}
	}
	b.PutID(PaymentsPaymentResultTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PaymentsPaymentResult) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "payments.paymentResult#4e5f810d",
		}
	}
	if p.Updates == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "payments.paymentResult#4e5f810d",
			FieldName: "updates",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "Updates",
			},
		}
	}
	if err := p.Updates.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "payments.paymentResult#4e5f810d",
			FieldName:  "updates",
			Underlying: err,
		}
	}
	return nil
}

// GetUpdates returns value of Updates field.
func (p *PaymentsPaymentResult) GetUpdates() (value UpdatesClass) {
	return p.Updates
}

// Decode implements bin.Decoder.
func (p *PaymentsPaymentResult) Decode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "payments.paymentResult#4e5f810d",
		}
	}
	if err := b.ConsumeID(PaymentsPaymentResultTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "payments.paymentResult#4e5f810d",
			Underlying: err,
		}
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PaymentsPaymentResult) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "payments.paymentResult#4e5f810d",
		}
	}
	{
		value, err := DecodeUpdates(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "payments.paymentResult#4e5f810d",
				FieldName:  "updates",
				Underlying: err,
			}
		}
		p.Updates = value
	}
	return nil
}

// construct implements constructor of PaymentsPaymentResultClass.
func (p PaymentsPaymentResult) construct() PaymentsPaymentResultClass { return &p }

// Ensuring interfaces in compile-time for PaymentsPaymentResult.
var (
	_ bin.Encoder     = &PaymentsPaymentResult{}
	_ bin.Decoder     = &PaymentsPaymentResult{}
	_ bin.BareEncoder = &PaymentsPaymentResult{}
	_ bin.BareDecoder = &PaymentsPaymentResult{}

	_ PaymentsPaymentResultClass = &PaymentsPaymentResult{}
)

// PaymentsPaymentVerificationNeeded represents TL type `payments.paymentVerificationNeeded#d8411139`.
// Payment was not successful, additional verification is needed
//
// See https://core.telegram.org/constructor/payments.paymentVerificationNeeded for reference.
type PaymentsPaymentVerificationNeeded struct {
	// URL for additional payment credentials verification
	URL string
}

// PaymentsPaymentVerificationNeededTypeID is TL type id of PaymentsPaymentVerificationNeeded.
const PaymentsPaymentVerificationNeededTypeID = 0xd8411139

func (p *PaymentsPaymentVerificationNeeded) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.URL == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PaymentsPaymentVerificationNeeded) String() string {
	if p == nil {
		return "PaymentsPaymentVerificationNeeded(nil)"
	}
	type Alias PaymentsPaymentVerificationNeeded
	return fmt.Sprintf("PaymentsPaymentVerificationNeeded%+v", Alias(*p))
}

// FillFrom fills PaymentsPaymentVerificationNeeded from given interface.
func (p *PaymentsPaymentVerificationNeeded) FillFrom(from interface {
	GetURL() (value string)
}) {
	p.URL = from.GetURL()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsPaymentVerificationNeeded) TypeID() uint32 {
	return PaymentsPaymentVerificationNeededTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsPaymentVerificationNeeded) TypeName() string {
	return "payments.paymentVerificationNeeded"
}

// TypeInfo returns info about TL type.
func (p *PaymentsPaymentVerificationNeeded) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.paymentVerificationNeeded",
		ID:   PaymentsPaymentVerificationNeededTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "URL",
			SchemaName: "url",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PaymentsPaymentVerificationNeeded) Encode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "payments.paymentVerificationNeeded#d8411139",
		}
	}
	b.PutID(PaymentsPaymentVerificationNeededTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PaymentsPaymentVerificationNeeded) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "payments.paymentVerificationNeeded#d8411139",
		}
	}
	b.PutString(p.URL)
	return nil
}

// GetURL returns value of URL field.
func (p *PaymentsPaymentVerificationNeeded) GetURL() (value string) {
	return p.URL
}

// Decode implements bin.Decoder.
func (p *PaymentsPaymentVerificationNeeded) Decode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "payments.paymentVerificationNeeded#d8411139",
		}
	}
	if err := b.ConsumeID(PaymentsPaymentVerificationNeededTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "payments.paymentVerificationNeeded#d8411139",
			Underlying: err,
		}
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PaymentsPaymentVerificationNeeded) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "payments.paymentVerificationNeeded#d8411139",
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "payments.paymentVerificationNeeded#d8411139",
				FieldName:  "url",
				Underlying: err,
			}
		}
		p.URL = value
	}
	return nil
}

// construct implements constructor of PaymentsPaymentResultClass.
func (p PaymentsPaymentVerificationNeeded) construct() PaymentsPaymentResultClass { return &p }

// Ensuring interfaces in compile-time for PaymentsPaymentVerificationNeeded.
var (
	_ bin.Encoder     = &PaymentsPaymentVerificationNeeded{}
	_ bin.Decoder     = &PaymentsPaymentVerificationNeeded{}
	_ bin.BareEncoder = &PaymentsPaymentVerificationNeeded{}
	_ bin.BareDecoder = &PaymentsPaymentVerificationNeeded{}

	_ PaymentsPaymentResultClass = &PaymentsPaymentVerificationNeeded{}
)

// PaymentsPaymentResultClass represents payments.PaymentResult generic type.
//
// See https://core.telegram.org/type/payments.PaymentResult for reference.
//
// Example:
//  g, err := tg.DecodePaymentsPaymentResult(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.PaymentsPaymentResult: // payments.paymentResult#4e5f810d
//  case *tg.PaymentsPaymentVerificationNeeded: // payments.paymentVerificationNeeded#d8411139
//  default: panic(v)
//  }
type PaymentsPaymentResultClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() PaymentsPaymentResultClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodePaymentsPaymentResult implements binary de-serialization for PaymentsPaymentResultClass.
func DecodePaymentsPaymentResult(buf *bin.Buffer) (PaymentsPaymentResultClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case PaymentsPaymentResultTypeID:
		// Decoding payments.paymentResult#4e5f810d.
		v := PaymentsPaymentResult{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "PaymentsPaymentResultClass",
				Underlying: err,
			}
		}
		return &v, nil
	case PaymentsPaymentVerificationNeededTypeID:
		// Decoding payments.paymentVerificationNeeded#d8411139.
		v := PaymentsPaymentVerificationNeeded{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "PaymentsPaymentResultClass",
				Underlying: err,
			}
		}
		return &v, nil
	default:
		return nil, &bin.DecodeError{
			TypeName:   "PaymentsPaymentResultClass",
			Underlying: bin.NewUnexpectedID(id),
		}
	}
}

// PaymentsPaymentResult boxes the PaymentsPaymentResultClass providing a helper.
type PaymentsPaymentResultBox struct {
	PaymentResult PaymentsPaymentResultClass
}

// Decode implements bin.Decoder for PaymentsPaymentResultBox.
func (b *PaymentsPaymentResultBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "PaymentsPaymentResultBox",
		}
	}
	v, err := DecodePaymentsPaymentResult(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.PaymentResult = v
	return nil
}

// Encode implements bin.Encode for PaymentsPaymentResultBox.
func (b *PaymentsPaymentResultBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.PaymentResult == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "PaymentsPaymentResultBox",
		}
	}
	return b.PaymentResult.Encode(buf)
}

// PaymentsPaymentResultClassArray is adapter for slice of PaymentsPaymentResultClass.
type PaymentsPaymentResultClassArray []PaymentsPaymentResultClass

// Sort sorts slice of PaymentsPaymentResultClass.
func (s PaymentsPaymentResultClassArray) Sort(less func(a, b PaymentsPaymentResultClass) bool) PaymentsPaymentResultClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsPaymentResultClass.
func (s PaymentsPaymentResultClassArray) SortStable(less func(a, b PaymentsPaymentResultClass) bool) PaymentsPaymentResultClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsPaymentResultClass.
func (s PaymentsPaymentResultClassArray) Retain(keep func(x PaymentsPaymentResultClass) bool) PaymentsPaymentResultClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsPaymentResultClassArray) First() (v PaymentsPaymentResultClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsPaymentResultClassArray) Last() (v PaymentsPaymentResultClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsPaymentResultClassArray) PopFirst() (v PaymentsPaymentResultClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsPaymentResultClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsPaymentResultClassArray) Pop() (v PaymentsPaymentResultClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsPaymentsPaymentResult returns copy with only PaymentsPaymentResult constructors.
func (s PaymentsPaymentResultClassArray) AsPaymentsPaymentResult() (to PaymentsPaymentResultArray) {
	for _, elem := range s {
		value, ok := elem.(*PaymentsPaymentResult)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsPaymentsPaymentVerificationNeeded returns copy with only PaymentsPaymentVerificationNeeded constructors.
func (s PaymentsPaymentResultClassArray) AsPaymentsPaymentVerificationNeeded() (to PaymentsPaymentVerificationNeededArray) {
	for _, elem := range s {
		value, ok := elem.(*PaymentsPaymentVerificationNeeded)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// PaymentsPaymentResultArray is adapter for slice of PaymentsPaymentResult.
type PaymentsPaymentResultArray []PaymentsPaymentResult

// Sort sorts slice of PaymentsPaymentResult.
func (s PaymentsPaymentResultArray) Sort(less func(a, b PaymentsPaymentResult) bool) PaymentsPaymentResultArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsPaymentResult.
func (s PaymentsPaymentResultArray) SortStable(less func(a, b PaymentsPaymentResult) bool) PaymentsPaymentResultArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsPaymentResult.
func (s PaymentsPaymentResultArray) Retain(keep func(x PaymentsPaymentResult) bool) PaymentsPaymentResultArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsPaymentResultArray) First() (v PaymentsPaymentResult, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsPaymentResultArray) Last() (v PaymentsPaymentResult, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsPaymentResultArray) PopFirst() (v PaymentsPaymentResult, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsPaymentResult
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsPaymentResultArray) Pop() (v PaymentsPaymentResult, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// PaymentsPaymentVerificationNeededArray is adapter for slice of PaymentsPaymentVerificationNeeded.
type PaymentsPaymentVerificationNeededArray []PaymentsPaymentVerificationNeeded

// Sort sorts slice of PaymentsPaymentVerificationNeeded.
func (s PaymentsPaymentVerificationNeededArray) Sort(less func(a, b PaymentsPaymentVerificationNeeded) bool) PaymentsPaymentVerificationNeededArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PaymentsPaymentVerificationNeeded.
func (s PaymentsPaymentVerificationNeededArray) SortStable(less func(a, b PaymentsPaymentVerificationNeeded) bool) PaymentsPaymentVerificationNeededArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PaymentsPaymentVerificationNeeded.
func (s PaymentsPaymentVerificationNeededArray) Retain(keep func(x PaymentsPaymentVerificationNeeded) bool) PaymentsPaymentVerificationNeededArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PaymentsPaymentVerificationNeededArray) First() (v PaymentsPaymentVerificationNeeded, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PaymentsPaymentVerificationNeededArray) Last() (v PaymentsPaymentVerificationNeeded, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PaymentsPaymentVerificationNeededArray) PopFirst() (v PaymentsPaymentVerificationNeeded, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PaymentsPaymentVerificationNeeded
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PaymentsPaymentVerificationNeededArray) Pop() (v PaymentsPaymentVerificationNeeded, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
