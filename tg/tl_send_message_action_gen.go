// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// SendMessageTypingAction represents TL type `sendMessageTypingAction#16bf744e`.
// User is typing.
//
// See https://core.telegram.org/constructor/sendMessageTypingAction for reference.
type SendMessageTypingAction struct {
}

// SendMessageTypingActionTypeID is TL type id of SendMessageTypingAction.
const SendMessageTypingActionTypeID = 0x16bf744e

func (s *SendMessageTypingAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageTypingAction) String() string {
	if s == nil {
		return "SendMessageTypingAction(nil)"
	}
	type Alias SendMessageTypingAction
	return fmt.Sprintf("SendMessageTypingAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageTypingAction) TypeID() uint32 {
	return SendMessageTypingActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageTypingAction) TypeName() string {
	return "sendMessageTypingAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageTypingAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageTypingAction",
		ID:   SendMessageTypingActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageTypingAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageTypingAction#16bf744e",
		}
	}
	b.PutID(SendMessageTypingActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageTypingAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageTypingAction#16bf744e",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageTypingAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageTypingAction#16bf744e",
		}
	}
	if err := b.ConsumeID(SendMessageTypingActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageTypingAction#16bf744e",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageTypingAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageTypingAction#16bf744e",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageTypingAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageTypingAction.
var (
	_ bin.Encoder     = &SendMessageTypingAction{}
	_ bin.Decoder     = &SendMessageTypingAction{}
	_ bin.BareEncoder = &SendMessageTypingAction{}
	_ bin.BareDecoder = &SendMessageTypingAction{}

	_ SendMessageActionClass = &SendMessageTypingAction{}
)

// SendMessageCancelAction represents TL type `sendMessageCancelAction#fd5ec8f5`.
// Invalidate all previous action updates. E.g. when user deletes entered text or aborts
// a video upload.
//
// See https://core.telegram.org/constructor/sendMessageCancelAction for reference.
type SendMessageCancelAction struct {
}

// SendMessageCancelActionTypeID is TL type id of SendMessageCancelAction.
const SendMessageCancelActionTypeID = 0xfd5ec8f5

func (s *SendMessageCancelAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageCancelAction) String() string {
	if s == nil {
		return "SendMessageCancelAction(nil)"
	}
	type Alias SendMessageCancelAction
	return fmt.Sprintf("SendMessageCancelAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageCancelAction) TypeID() uint32 {
	return SendMessageCancelActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageCancelAction) TypeName() string {
	return "sendMessageCancelAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageCancelAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageCancelAction",
		ID:   SendMessageCancelActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageCancelAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageCancelAction#fd5ec8f5",
		}
	}
	b.PutID(SendMessageCancelActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageCancelAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageCancelAction#fd5ec8f5",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageCancelAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageCancelAction#fd5ec8f5",
		}
	}
	if err := b.ConsumeID(SendMessageCancelActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageCancelAction#fd5ec8f5",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageCancelAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageCancelAction#fd5ec8f5",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageCancelAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageCancelAction.
var (
	_ bin.Encoder     = &SendMessageCancelAction{}
	_ bin.Decoder     = &SendMessageCancelAction{}
	_ bin.BareEncoder = &SendMessageCancelAction{}
	_ bin.BareDecoder = &SendMessageCancelAction{}

	_ SendMessageActionClass = &SendMessageCancelAction{}
)

// SendMessageRecordVideoAction represents TL type `sendMessageRecordVideoAction#a187d66f`.
// User is recording a video.
//
// See https://core.telegram.org/constructor/sendMessageRecordVideoAction for reference.
type SendMessageRecordVideoAction struct {
}

// SendMessageRecordVideoActionTypeID is TL type id of SendMessageRecordVideoAction.
const SendMessageRecordVideoActionTypeID = 0xa187d66f

func (s *SendMessageRecordVideoAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageRecordVideoAction) String() string {
	if s == nil {
		return "SendMessageRecordVideoAction(nil)"
	}
	type Alias SendMessageRecordVideoAction
	return fmt.Sprintf("SendMessageRecordVideoAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageRecordVideoAction) TypeID() uint32 {
	return SendMessageRecordVideoActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageRecordVideoAction) TypeName() string {
	return "sendMessageRecordVideoAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageRecordVideoAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageRecordVideoAction",
		ID:   SendMessageRecordVideoActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageRecordVideoAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageRecordVideoAction#a187d66f",
		}
	}
	b.PutID(SendMessageRecordVideoActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageRecordVideoAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageRecordVideoAction#a187d66f",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageRecordVideoAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageRecordVideoAction#a187d66f",
		}
	}
	if err := b.ConsumeID(SendMessageRecordVideoActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageRecordVideoAction#a187d66f",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageRecordVideoAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageRecordVideoAction#a187d66f",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageRecordVideoAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageRecordVideoAction.
var (
	_ bin.Encoder     = &SendMessageRecordVideoAction{}
	_ bin.Decoder     = &SendMessageRecordVideoAction{}
	_ bin.BareEncoder = &SendMessageRecordVideoAction{}
	_ bin.BareDecoder = &SendMessageRecordVideoAction{}

	_ SendMessageActionClass = &SendMessageRecordVideoAction{}
)

// SendMessageUploadVideoAction represents TL type `sendMessageUploadVideoAction#e9763aec`.
// User is uploading a video.
//
// See https://core.telegram.org/constructor/sendMessageUploadVideoAction for reference.
type SendMessageUploadVideoAction struct {
	// Progress percentage
	Progress int
}

// SendMessageUploadVideoActionTypeID is TL type id of SendMessageUploadVideoAction.
const SendMessageUploadVideoActionTypeID = 0xe9763aec

func (s *SendMessageUploadVideoAction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Progress == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageUploadVideoAction) String() string {
	if s == nil {
		return "SendMessageUploadVideoAction(nil)"
	}
	type Alias SendMessageUploadVideoAction
	return fmt.Sprintf("SendMessageUploadVideoAction%+v", Alias(*s))
}

// FillFrom fills SendMessageUploadVideoAction from given interface.
func (s *SendMessageUploadVideoAction) FillFrom(from interface {
	GetProgress() (value int)
}) {
	s.Progress = from.GetProgress()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageUploadVideoAction) TypeID() uint32 {
	return SendMessageUploadVideoActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageUploadVideoAction) TypeName() string {
	return "sendMessageUploadVideoAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageUploadVideoAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageUploadVideoAction",
		ID:   SendMessageUploadVideoActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Progress",
			SchemaName: "progress",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageUploadVideoAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadVideoAction#e9763aec",
		}
	}
	b.PutID(SendMessageUploadVideoActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageUploadVideoAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadVideoAction#e9763aec",
		}
	}
	b.PutInt(s.Progress)
	return nil
}

// GetProgress returns value of Progress field.
func (s *SendMessageUploadVideoAction) GetProgress() (value int) {
	return s.Progress
}

// Decode implements bin.Decoder.
func (s *SendMessageUploadVideoAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadVideoAction#e9763aec",
		}
	}
	if err := b.ConsumeID(SendMessageUploadVideoActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageUploadVideoAction#e9763aec",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageUploadVideoAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadVideoAction#e9763aec",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "sendMessageUploadVideoAction#e9763aec",
				FieldName:  "progress",
				Underlying: err,
			}
		}
		s.Progress = value
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageUploadVideoAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageUploadVideoAction.
var (
	_ bin.Encoder     = &SendMessageUploadVideoAction{}
	_ bin.Decoder     = &SendMessageUploadVideoAction{}
	_ bin.BareEncoder = &SendMessageUploadVideoAction{}
	_ bin.BareDecoder = &SendMessageUploadVideoAction{}

	_ SendMessageActionClass = &SendMessageUploadVideoAction{}
)

// SendMessageRecordAudioAction represents TL type `sendMessageRecordAudioAction#d52f73f7`.
// User is recording a voice message.
//
// See https://core.telegram.org/constructor/sendMessageRecordAudioAction for reference.
type SendMessageRecordAudioAction struct {
}

// SendMessageRecordAudioActionTypeID is TL type id of SendMessageRecordAudioAction.
const SendMessageRecordAudioActionTypeID = 0xd52f73f7

func (s *SendMessageRecordAudioAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageRecordAudioAction) String() string {
	if s == nil {
		return "SendMessageRecordAudioAction(nil)"
	}
	type Alias SendMessageRecordAudioAction
	return fmt.Sprintf("SendMessageRecordAudioAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageRecordAudioAction) TypeID() uint32 {
	return SendMessageRecordAudioActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageRecordAudioAction) TypeName() string {
	return "sendMessageRecordAudioAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageRecordAudioAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageRecordAudioAction",
		ID:   SendMessageRecordAudioActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageRecordAudioAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageRecordAudioAction#d52f73f7",
		}
	}
	b.PutID(SendMessageRecordAudioActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageRecordAudioAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageRecordAudioAction#d52f73f7",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageRecordAudioAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageRecordAudioAction#d52f73f7",
		}
	}
	if err := b.ConsumeID(SendMessageRecordAudioActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageRecordAudioAction#d52f73f7",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageRecordAudioAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageRecordAudioAction#d52f73f7",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageRecordAudioAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageRecordAudioAction.
var (
	_ bin.Encoder     = &SendMessageRecordAudioAction{}
	_ bin.Decoder     = &SendMessageRecordAudioAction{}
	_ bin.BareEncoder = &SendMessageRecordAudioAction{}
	_ bin.BareDecoder = &SendMessageRecordAudioAction{}

	_ SendMessageActionClass = &SendMessageRecordAudioAction{}
)

// SendMessageUploadAudioAction represents TL type `sendMessageUploadAudioAction#f351d7ab`.
// User is uploading a voice message.
//
// See https://core.telegram.org/constructor/sendMessageUploadAudioAction for reference.
type SendMessageUploadAudioAction struct {
	// Progress percentage
	Progress int
}

// SendMessageUploadAudioActionTypeID is TL type id of SendMessageUploadAudioAction.
const SendMessageUploadAudioActionTypeID = 0xf351d7ab

func (s *SendMessageUploadAudioAction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Progress == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageUploadAudioAction) String() string {
	if s == nil {
		return "SendMessageUploadAudioAction(nil)"
	}
	type Alias SendMessageUploadAudioAction
	return fmt.Sprintf("SendMessageUploadAudioAction%+v", Alias(*s))
}

// FillFrom fills SendMessageUploadAudioAction from given interface.
func (s *SendMessageUploadAudioAction) FillFrom(from interface {
	GetProgress() (value int)
}) {
	s.Progress = from.GetProgress()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageUploadAudioAction) TypeID() uint32 {
	return SendMessageUploadAudioActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageUploadAudioAction) TypeName() string {
	return "sendMessageUploadAudioAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageUploadAudioAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageUploadAudioAction",
		ID:   SendMessageUploadAudioActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Progress",
			SchemaName: "progress",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageUploadAudioAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadAudioAction#f351d7ab",
		}
	}
	b.PutID(SendMessageUploadAudioActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageUploadAudioAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadAudioAction#f351d7ab",
		}
	}
	b.PutInt(s.Progress)
	return nil
}

// GetProgress returns value of Progress field.
func (s *SendMessageUploadAudioAction) GetProgress() (value int) {
	return s.Progress
}

// Decode implements bin.Decoder.
func (s *SendMessageUploadAudioAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadAudioAction#f351d7ab",
		}
	}
	if err := b.ConsumeID(SendMessageUploadAudioActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageUploadAudioAction#f351d7ab",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageUploadAudioAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadAudioAction#f351d7ab",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "sendMessageUploadAudioAction#f351d7ab",
				FieldName:  "progress",
				Underlying: err,
			}
		}
		s.Progress = value
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageUploadAudioAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageUploadAudioAction.
var (
	_ bin.Encoder     = &SendMessageUploadAudioAction{}
	_ bin.Decoder     = &SendMessageUploadAudioAction{}
	_ bin.BareEncoder = &SendMessageUploadAudioAction{}
	_ bin.BareDecoder = &SendMessageUploadAudioAction{}

	_ SendMessageActionClass = &SendMessageUploadAudioAction{}
)

// SendMessageUploadPhotoAction represents TL type `sendMessageUploadPhotoAction#d1d34a26`.
// User is uploading a photo.
//
// See https://core.telegram.org/constructor/sendMessageUploadPhotoAction for reference.
type SendMessageUploadPhotoAction struct {
	// Progress percentage
	Progress int
}

// SendMessageUploadPhotoActionTypeID is TL type id of SendMessageUploadPhotoAction.
const SendMessageUploadPhotoActionTypeID = 0xd1d34a26

func (s *SendMessageUploadPhotoAction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Progress == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageUploadPhotoAction) String() string {
	if s == nil {
		return "SendMessageUploadPhotoAction(nil)"
	}
	type Alias SendMessageUploadPhotoAction
	return fmt.Sprintf("SendMessageUploadPhotoAction%+v", Alias(*s))
}

// FillFrom fills SendMessageUploadPhotoAction from given interface.
func (s *SendMessageUploadPhotoAction) FillFrom(from interface {
	GetProgress() (value int)
}) {
	s.Progress = from.GetProgress()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageUploadPhotoAction) TypeID() uint32 {
	return SendMessageUploadPhotoActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageUploadPhotoAction) TypeName() string {
	return "sendMessageUploadPhotoAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageUploadPhotoAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageUploadPhotoAction",
		ID:   SendMessageUploadPhotoActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Progress",
			SchemaName: "progress",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageUploadPhotoAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadPhotoAction#d1d34a26",
		}
	}
	b.PutID(SendMessageUploadPhotoActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageUploadPhotoAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadPhotoAction#d1d34a26",
		}
	}
	b.PutInt(s.Progress)
	return nil
}

// GetProgress returns value of Progress field.
func (s *SendMessageUploadPhotoAction) GetProgress() (value int) {
	return s.Progress
}

// Decode implements bin.Decoder.
func (s *SendMessageUploadPhotoAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadPhotoAction#d1d34a26",
		}
	}
	if err := b.ConsumeID(SendMessageUploadPhotoActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageUploadPhotoAction#d1d34a26",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageUploadPhotoAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadPhotoAction#d1d34a26",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "sendMessageUploadPhotoAction#d1d34a26",
				FieldName:  "progress",
				Underlying: err,
			}
		}
		s.Progress = value
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageUploadPhotoAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageUploadPhotoAction.
var (
	_ bin.Encoder     = &SendMessageUploadPhotoAction{}
	_ bin.Decoder     = &SendMessageUploadPhotoAction{}
	_ bin.BareEncoder = &SendMessageUploadPhotoAction{}
	_ bin.BareDecoder = &SendMessageUploadPhotoAction{}

	_ SendMessageActionClass = &SendMessageUploadPhotoAction{}
)

// SendMessageUploadDocumentAction represents TL type `sendMessageUploadDocumentAction#aa0cd9e4`.
// User is uploading a file.
//
// See https://core.telegram.org/constructor/sendMessageUploadDocumentAction for reference.
type SendMessageUploadDocumentAction struct {
	// Progress percentage
	Progress int
}

// SendMessageUploadDocumentActionTypeID is TL type id of SendMessageUploadDocumentAction.
const SendMessageUploadDocumentActionTypeID = 0xaa0cd9e4

func (s *SendMessageUploadDocumentAction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Progress == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageUploadDocumentAction) String() string {
	if s == nil {
		return "SendMessageUploadDocumentAction(nil)"
	}
	type Alias SendMessageUploadDocumentAction
	return fmt.Sprintf("SendMessageUploadDocumentAction%+v", Alias(*s))
}

// FillFrom fills SendMessageUploadDocumentAction from given interface.
func (s *SendMessageUploadDocumentAction) FillFrom(from interface {
	GetProgress() (value int)
}) {
	s.Progress = from.GetProgress()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageUploadDocumentAction) TypeID() uint32 {
	return SendMessageUploadDocumentActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageUploadDocumentAction) TypeName() string {
	return "sendMessageUploadDocumentAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageUploadDocumentAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageUploadDocumentAction",
		ID:   SendMessageUploadDocumentActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Progress",
			SchemaName: "progress",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageUploadDocumentAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadDocumentAction#aa0cd9e4",
		}
	}
	b.PutID(SendMessageUploadDocumentActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageUploadDocumentAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadDocumentAction#aa0cd9e4",
		}
	}
	b.PutInt(s.Progress)
	return nil
}

// GetProgress returns value of Progress field.
func (s *SendMessageUploadDocumentAction) GetProgress() (value int) {
	return s.Progress
}

// Decode implements bin.Decoder.
func (s *SendMessageUploadDocumentAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadDocumentAction#aa0cd9e4",
		}
	}
	if err := b.ConsumeID(SendMessageUploadDocumentActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageUploadDocumentAction#aa0cd9e4",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageUploadDocumentAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadDocumentAction#aa0cd9e4",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "sendMessageUploadDocumentAction#aa0cd9e4",
				FieldName:  "progress",
				Underlying: err,
			}
		}
		s.Progress = value
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageUploadDocumentAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageUploadDocumentAction.
var (
	_ bin.Encoder     = &SendMessageUploadDocumentAction{}
	_ bin.Decoder     = &SendMessageUploadDocumentAction{}
	_ bin.BareEncoder = &SendMessageUploadDocumentAction{}
	_ bin.BareDecoder = &SendMessageUploadDocumentAction{}

	_ SendMessageActionClass = &SendMessageUploadDocumentAction{}
)

// SendMessageGeoLocationAction represents TL type `sendMessageGeoLocationAction#176f8ba1`.
// User is selecting a location to share.
//
// See https://core.telegram.org/constructor/sendMessageGeoLocationAction for reference.
type SendMessageGeoLocationAction struct {
}

// SendMessageGeoLocationActionTypeID is TL type id of SendMessageGeoLocationAction.
const SendMessageGeoLocationActionTypeID = 0x176f8ba1

func (s *SendMessageGeoLocationAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageGeoLocationAction) String() string {
	if s == nil {
		return "SendMessageGeoLocationAction(nil)"
	}
	type Alias SendMessageGeoLocationAction
	return fmt.Sprintf("SendMessageGeoLocationAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageGeoLocationAction) TypeID() uint32 {
	return SendMessageGeoLocationActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageGeoLocationAction) TypeName() string {
	return "sendMessageGeoLocationAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageGeoLocationAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageGeoLocationAction",
		ID:   SendMessageGeoLocationActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageGeoLocationAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageGeoLocationAction#176f8ba1",
		}
	}
	b.PutID(SendMessageGeoLocationActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageGeoLocationAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageGeoLocationAction#176f8ba1",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageGeoLocationAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageGeoLocationAction#176f8ba1",
		}
	}
	if err := b.ConsumeID(SendMessageGeoLocationActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageGeoLocationAction#176f8ba1",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageGeoLocationAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageGeoLocationAction#176f8ba1",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageGeoLocationAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageGeoLocationAction.
var (
	_ bin.Encoder     = &SendMessageGeoLocationAction{}
	_ bin.Decoder     = &SendMessageGeoLocationAction{}
	_ bin.BareEncoder = &SendMessageGeoLocationAction{}
	_ bin.BareDecoder = &SendMessageGeoLocationAction{}

	_ SendMessageActionClass = &SendMessageGeoLocationAction{}
)

// SendMessageChooseContactAction represents TL type `sendMessageChooseContactAction#628cbc6f`.
// User is selecting a contact to share.
//
// See https://core.telegram.org/constructor/sendMessageChooseContactAction for reference.
type SendMessageChooseContactAction struct {
}

// SendMessageChooseContactActionTypeID is TL type id of SendMessageChooseContactAction.
const SendMessageChooseContactActionTypeID = 0x628cbc6f

func (s *SendMessageChooseContactAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageChooseContactAction) String() string {
	if s == nil {
		return "SendMessageChooseContactAction(nil)"
	}
	type Alias SendMessageChooseContactAction
	return fmt.Sprintf("SendMessageChooseContactAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageChooseContactAction) TypeID() uint32 {
	return SendMessageChooseContactActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageChooseContactAction) TypeName() string {
	return "sendMessageChooseContactAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageChooseContactAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageChooseContactAction",
		ID:   SendMessageChooseContactActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageChooseContactAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageChooseContactAction#628cbc6f",
		}
	}
	b.PutID(SendMessageChooseContactActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageChooseContactAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageChooseContactAction#628cbc6f",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageChooseContactAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageChooseContactAction#628cbc6f",
		}
	}
	if err := b.ConsumeID(SendMessageChooseContactActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageChooseContactAction#628cbc6f",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageChooseContactAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageChooseContactAction#628cbc6f",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageChooseContactAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageChooseContactAction.
var (
	_ bin.Encoder     = &SendMessageChooseContactAction{}
	_ bin.Decoder     = &SendMessageChooseContactAction{}
	_ bin.BareEncoder = &SendMessageChooseContactAction{}
	_ bin.BareDecoder = &SendMessageChooseContactAction{}

	_ SendMessageActionClass = &SendMessageChooseContactAction{}
)

// SendMessageGamePlayAction represents TL type `sendMessageGamePlayAction#dd6a8f48`.
// User is playing a game
//
// See https://core.telegram.org/constructor/sendMessageGamePlayAction for reference.
type SendMessageGamePlayAction struct {
}

// SendMessageGamePlayActionTypeID is TL type id of SendMessageGamePlayAction.
const SendMessageGamePlayActionTypeID = 0xdd6a8f48

func (s *SendMessageGamePlayAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageGamePlayAction) String() string {
	if s == nil {
		return "SendMessageGamePlayAction(nil)"
	}
	type Alias SendMessageGamePlayAction
	return fmt.Sprintf("SendMessageGamePlayAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageGamePlayAction) TypeID() uint32 {
	return SendMessageGamePlayActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageGamePlayAction) TypeName() string {
	return "sendMessageGamePlayAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageGamePlayAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageGamePlayAction",
		ID:   SendMessageGamePlayActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageGamePlayAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageGamePlayAction#dd6a8f48",
		}
	}
	b.PutID(SendMessageGamePlayActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageGamePlayAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageGamePlayAction#dd6a8f48",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageGamePlayAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageGamePlayAction#dd6a8f48",
		}
	}
	if err := b.ConsumeID(SendMessageGamePlayActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageGamePlayAction#dd6a8f48",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageGamePlayAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageGamePlayAction#dd6a8f48",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageGamePlayAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageGamePlayAction.
var (
	_ bin.Encoder     = &SendMessageGamePlayAction{}
	_ bin.Decoder     = &SendMessageGamePlayAction{}
	_ bin.BareEncoder = &SendMessageGamePlayAction{}
	_ bin.BareDecoder = &SendMessageGamePlayAction{}

	_ SendMessageActionClass = &SendMessageGamePlayAction{}
)

// SendMessageRecordRoundAction represents TL type `sendMessageRecordRoundAction#88f27fbc`.
// User is recording a round video to share
//
// See https://core.telegram.org/constructor/sendMessageRecordRoundAction for reference.
type SendMessageRecordRoundAction struct {
}

// SendMessageRecordRoundActionTypeID is TL type id of SendMessageRecordRoundAction.
const SendMessageRecordRoundActionTypeID = 0x88f27fbc

func (s *SendMessageRecordRoundAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageRecordRoundAction) String() string {
	if s == nil {
		return "SendMessageRecordRoundAction(nil)"
	}
	type Alias SendMessageRecordRoundAction
	return fmt.Sprintf("SendMessageRecordRoundAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageRecordRoundAction) TypeID() uint32 {
	return SendMessageRecordRoundActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageRecordRoundAction) TypeName() string {
	return "sendMessageRecordRoundAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageRecordRoundAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageRecordRoundAction",
		ID:   SendMessageRecordRoundActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageRecordRoundAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageRecordRoundAction#88f27fbc",
		}
	}
	b.PutID(SendMessageRecordRoundActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageRecordRoundAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageRecordRoundAction#88f27fbc",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SendMessageRecordRoundAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageRecordRoundAction#88f27fbc",
		}
	}
	if err := b.ConsumeID(SendMessageRecordRoundActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageRecordRoundAction#88f27fbc",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageRecordRoundAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageRecordRoundAction#88f27fbc",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageRecordRoundAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageRecordRoundAction.
var (
	_ bin.Encoder     = &SendMessageRecordRoundAction{}
	_ bin.Decoder     = &SendMessageRecordRoundAction{}
	_ bin.BareEncoder = &SendMessageRecordRoundAction{}
	_ bin.BareDecoder = &SendMessageRecordRoundAction{}

	_ SendMessageActionClass = &SendMessageRecordRoundAction{}
)

// SendMessageUploadRoundAction represents TL type `sendMessageUploadRoundAction#243e1c66`.
// User is uploading a round video
//
// See https://core.telegram.org/constructor/sendMessageUploadRoundAction for reference.
type SendMessageUploadRoundAction struct {
	// Progress percentage
	Progress int
}

// SendMessageUploadRoundActionTypeID is TL type id of SendMessageUploadRoundAction.
const SendMessageUploadRoundActionTypeID = 0x243e1c66

func (s *SendMessageUploadRoundAction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Progress == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageUploadRoundAction) String() string {
	if s == nil {
		return "SendMessageUploadRoundAction(nil)"
	}
	type Alias SendMessageUploadRoundAction
	return fmt.Sprintf("SendMessageUploadRoundAction%+v", Alias(*s))
}

// FillFrom fills SendMessageUploadRoundAction from given interface.
func (s *SendMessageUploadRoundAction) FillFrom(from interface {
	GetProgress() (value int)
}) {
	s.Progress = from.GetProgress()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageUploadRoundAction) TypeID() uint32 {
	return SendMessageUploadRoundActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageUploadRoundAction) TypeName() string {
	return "sendMessageUploadRoundAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageUploadRoundAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageUploadRoundAction",
		ID:   SendMessageUploadRoundActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Progress",
			SchemaName: "progress",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageUploadRoundAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadRoundAction#243e1c66",
		}
	}
	b.PutID(SendMessageUploadRoundActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageUploadRoundAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageUploadRoundAction#243e1c66",
		}
	}
	b.PutInt(s.Progress)
	return nil
}

// GetProgress returns value of Progress field.
func (s *SendMessageUploadRoundAction) GetProgress() (value int) {
	return s.Progress
}

// Decode implements bin.Decoder.
func (s *SendMessageUploadRoundAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadRoundAction#243e1c66",
		}
	}
	if err := b.ConsumeID(SendMessageUploadRoundActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageUploadRoundAction#243e1c66",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageUploadRoundAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageUploadRoundAction#243e1c66",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "sendMessageUploadRoundAction#243e1c66",
				FieldName:  "progress",
				Underlying: err,
			}
		}
		s.Progress = value
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageUploadRoundAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageUploadRoundAction.
var (
	_ bin.Encoder     = &SendMessageUploadRoundAction{}
	_ bin.Decoder     = &SendMessageUploadRoundAction{}
	_ bin.BareEncoder = &SendMessageUploadRoundAction{}
	_ bin.BareDecoder = &SendMessageUploadRoundAction{}

	_ SendMessageActionClass = &SendMessageUploadRoundAction{}
)

// SpeakingInGroupCallAction represents TL type `speakingInGroupCallAction#d92c2285`.
//
// See https://core.telegram.org/constructor/speakingInGroupCallAction for reference.
type SpeakingInGroupCallAction struct {
}

// SpeakingInGroupCallActionTypeID is TL type id of SpeakingInGroupCallAction.
const SpeakingInGroupCallActionTypeID = 0xd92c2285

func (s *SpeakingInGroupCallAction) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *SpeakingInGroupCallAction) String() string {
	if s == nil {
		return "SpeakingInGroupCallAction(nil)"
	}
	type Alias SpeakingInGroupCallAction
	return fmt.Sprintf("SpeakingInGroupCallAction%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SpeakingInGroupCallAction) TypeID() uint32 {
	return SpeakingInGroupCallActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SpeakingInGroupCallAction) TypeName() string {
	return "speakingInGroupCallAction"
}

// TypeInfo returns info about TL type.
func (s *SpeakingInGroupCallAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "speakingInGroupCallAction",
		ID:   SpeakingInGroupCallActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *SpeakingInGroupCallAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "speakingInGroupCallAction#d92c2285",
		}
	}
	b.PutID(SpeakingInGroupCallActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SpeakingInGroupCallAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "speakingInGroupCallAction#d92c2285",
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SpeakingInGroupCallAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "speakingInGroupCallAction#d92c2285",
		}
	}
	if err := b.ConsumeID(SpeakingInGroupCallActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "speakingInGroupCallAction#d92c2285",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SpeakingInGroupCallAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "speakingInGroupCallAction#d92c2285",
		}
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SpeakingInGroupCallAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SpeakingInGroupCallAction.
var (
	_ bin.Encoder     = &SpeakingInGroupCallAction{}
	_ bin.Decoder     = &SpeakingInGroupCallAction{}
	_ bin.BareEncoder = &SpeakingInGroupCallAction{}
	_ bin.BareDecoder = &SpeakingInGroupCallAction{}

	_ SendMessageActionClass = &SpeakingInGroupCallAction{}
)

// SendMessageHistoryImportAction represents TL type `sendMessageHistoryImportAction#dbda9246`.
//
// See https://core.telegram.org/constructor/sendMessageHistoryImportAction for reference.
type SendMessageHistoryImportAction struct {
	// Progress field of SendMessageHistoryImportAction.
	Progress int
}

// SendMessageHistoryImportActionTypeID is TL type id of SendMessageHistoryImportAction.
const SendMessageHistoryImportActionTypeID = 0xdbda9246

func (s *SendMessageHistoryImportAction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Progress == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SendMessageHistoryImportAction) String() string {
	if s == nil {
		return "SendMessageHistoryImportAction(nil)"
	}
	type Alias SendMessageHistoryImportAction
	return fmt.Sprintf("SendMessageHistoryImportAction%+v", Alias(*s))
}

// FillFrom fills SendMessageHistoryImportAction from given interface.
func (s *SendMessageHistoryImportAction) FillFrom(from interface {
	GetProgress() (value int)
}) {
	s.Progress = from.GetProgress()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SendMessageHistoryImportAction) TypeID() uint32 {
	return SendMessageHistoryImportActionTypeID
}

// TypeName returns name of type in TL schema.
func (*SendMessageHistoryImportAction) TypeName() string {
	return "sendMessageHistoryImportAction"
}

// TypeInfo returns info about TL type.
func (s *SendMessageHistoryImportAction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "sendMessageHistoryImportAction",
		ID:   SendMessageHistoryImportActionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Progress",
			SchemaName: "progress",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SendMessageHistoryImportAction) Encode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageHistoryImportAction#dbda9246",
		}
	}
	b.PutID(SendMessageHistoryImportActionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SendMessageHistoryImportAction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "sendMessageHistoryImportAction#dbda9246",
		}
	}
	b.PutInt(s.Progress)
	return nil
}

// GetProgress returns value of Progress field.
func (s *SendMessageHistoryImportAction) GetProgress() (value int) {
	return s.Progress
}

// Decode implements bin.Decoder.
func (s *SendMessageHistoryImportAction) Decode(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageHistoryImportAction#dbda9246",
		}
	}
	if err := b.ConsumeID(SendMessageHistoryImportActionTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "sendMessageHistoryImportAction#dbda9246",
			Underlying: err,
		}
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SendMessageHistoryImportAction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "sendMessageHistoryImportAction#dbda9246",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "sendMessageHistoryImportAction#dbda9246",
				FieldName:  "progress",
				Underlying: err,
			}
		}
		s.Progress = value
	}
	return nil
}

// construct implements constructor of SendMessageActionClass.
func (s SendMessageHistoryImportAction) construct() SendMessageActionClass { return &s }

// Ensuring interfaces in compile-time for SendMessageHistoryImportAction.
var (
	_ bin.Encoder     = &SendMessageHistoryImportAction{}
	_ bin.Decoder     = &SendMessageHistoryImportAction{}
	_ bin.BareEncoder = &SendMessageHistoryImportAction{}
	_ bin.BareDecoder = &SendMessageHistoryImportAction{}

	_ SendMessageActionClass = &SendMessageHistoryImportAction{}
)

// SendMessageActionClass represents SendMessageAction generic type.
//
// See https://core.telegram.org/type/SendMessageAction for reference.
//
// Example:
//  g, err := tg.DecodeSendMessageAction(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.SendMessageTypingAction: // sendMessageTypingAction#16bf744e
//  case *tg.SendMessageCancelAction: // sendMessageCancelAction#fd5ec8f5
//  case *tg.SendMessageRecordVideoAction: // sendMessageRecordVideoAction#a187d66f
//  case *tg.SendMessageUploadVideoAction: // sendMessageUploadVideoAction#e9763aec
//  case *tg.SendMessageRecordAudioAction: // sendMessageRecordAudioAction#d52f73f7
//  case *tg.SendMessageUploadAudioAction: // sendMessageUploadAudioAction#f351d7ab
//  case *tg.SendMessageUploadPhotoAction: // sendMessageUploadPhotoAction#d1d34a26
//  case *tg.SendMessageUploadDocumentAction: // sendMessageUploadDocumentAction#aa0cd9e4
//  case *tg.SendMessageGeoLocationAction: // sendMessageGeoLocationAction#176f8ba1
//  case *tg.SendMessageChooseContactAction: // sendMessageChooseContactAction#628cbc6f
//  case *tg.SendMessageGamePlayAction: // sendMessageGamePlayAction#dd6a8f48
//  case *tg.SendMessageRecordRoundAction: // sendMessageRecordRoundAction#88f27fbc
//  case *tg.SendMessageUploadRoundAction: // sendMessageUploadRoundAction#243e1c66
//  case *tg.SpeakingInGroupCallAction: // speakingInGroupCallAction#d92c2285
//  case *tg.SendMessageHistoryImportAction: // sendMessageHistoryImportAction#dbda9246
//  default: panic(v)
//  }
type SendMessageActionClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() SendMessageActionClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeSendMessageAction implements binary de-serialization for SendMessageActionClass.
func DecodeSendMessageAction(buf *bin.Buffer) (SendMessageActionClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case SendMessageTypingActionTypeID:
		// Decoding sendMessageTypingAction#16bf744e.
		v := SendMessageTypingAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageCancelActionTypeID:
		// Decoding sendMessageCancelAction#fd5ec8f5.
		v := SendMessageCancelAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageRecordVideoActionTypeID:
		// Decoding sendMessageRecordVideoAction#a187d66f.
		v := SendMessageRecordVideoAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageUploadVideoActionTypeID:
		// Decoding sendMessageUploadVideoAction#e9763aec.
		v := SendMessageUploadVideoAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageRecordAudioActionTypeID:
		// Decoding sendMessageRecordAudioAction#d52f73f7.
		v := SendMessageRecordAudioAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageUploadAudioActionTypeID:
		// Decoding sendMessageUploadAudioAction#f351d7ab.
		v := SendMessageUploadAudioAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageUploadPhotoActionTypeID:
		// Decoding sendMessageUploadPhotoAction#d1d34a26.
		v := SendMessageUploadPhotoAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageUploadDocumentActionTypeID:
		// Decoding sendMessageUploadDocumentAction#aa0cd9e4.
		v := SendMessageUploadDocumentAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageGeoLocationActionTypeID:
		// Decoding sendMessageGeoLocationAction#176f8ba1.
		v := SendMessageGeoLocationAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageChooseContactActionTypeID:
		// Decoding sendMessageChooseContactAction#628cbc6f.
		v := SendMessageChooseContactAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageGamePlayActionTypeID:
		// Decoding sendMessageGamePlayAction#dd6a8f48.
		v := SendMessageGamePlayAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageRecordRoundActionTypeID:
		// Decoding sendMessageRecordRoundAction#88f27fbc.
		v := SendMessageRecordRoundAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageUploadRoundActionTypeID:
		// Decoding sendMessageUploadRoundAction#243e1c66.
		v := SendMessageUploadRoundAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SpeakingInGroupCallActionTypeID:
		// Decoding speakingInGroupCallAction#d92c2285.
		v := SpeakingInGroupCallAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	case SendMessageHistoryImportActionTypeID:
		// Decoding sendMessageHistoryImportAction#dbda9246.
		v := SendMessageHistoryImportAction{}
		if err := v.Decode(buf); err != nil {
			return nil, &bin.DecodeError{
				TypeName:   "SendMessageActionClass",
				Underlying: err,
			}
		}
		return &v, nil
	default:
		return nil, &bin.DecodeError{
			TypeName:   "SendMessageActionClass",
			Underlying: bin.NewUnexpectedID(id),
		}
	}
}

// SendMessageAction boxes the SendMessageActionClass providing a helper.
type SendMessageActionBox struct {
	SendMessageAction SendMessageActionClass
}

// Decode implements bin.Decoder for SendMessageActionBox.
func (b *SendMessageActionBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "SendMessageActionBox",
		}
	}
	v, err := DecodeSendMessageAction(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.SendMessageAction = v
	return nil
}

// Encode implements bin.Encode for SendMessageActionBox.
func (b *SendMessageActionBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.SendMessageAction == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "SendMessageActionBox",
		}
	}
	return b.SendMessageAction.Encode(buf)
}

// SendMessageActionClassArray is adapter for slice of SendMessageActionClass.
type SendMessageActionClassArray []SendMessageActionClass

// Sort sorts slice of SendMessageActionClass.
func (s SendMessageActionClassArray) Sort(less func(a, b SendMessageActionClass) bool) SendMessageActionClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageActionClass.
func (s SendMessageActionClassArray) SortStable(less func(a, b SendMessageActionClass) bool) SendMessageActionClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageActionClass.
func (s SendMessageActionClassArray) Retain(keep func(x SendMessageActionClass) bool) SendMessageActionClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageActionClassArray) First() (v SendMessageActionClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageActionClassArray) Last() (v SendMessageActionClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageActionClassArray) PopFirst() (v SendMessageActionClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageActionClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageActionClassArray) Pop() (v SendMessageActionClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsSendMessageUploadVideoAction returns copy with only SendMessageUploadVideoAction constructors.
func (s SendMessageActionClassArray) AsSendMessageUploadVideoAction() (to SendMessageUploadVideoActionArray) {
	for _, elem := range s {
		value, ok := elem.(*SendMessageUploadVideoAction)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsSendMessageUploadAudioAction returns copy with only SendMessageUploadAudioAction constructors.
func (s SendMessageActionClassArray) AsSendMessageUploadAudioAction() (to SendMessageUploadAudioActionArray) {
	for _, elem := range s {
		value, ok := elem.(*SendMessageUploadAudioAction)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsSendMessageUploadPhotoAction returns copy with only SendMessageUploadPhotoAction constructors.
func (s SendMessageActionClassArray) AsSendMessageUploadPhotoAction() (to SendMessageUploadPhotoActionArray) {
	for _, elem := range s {
		value, ok := elem.(*SendMessageUploadPhotoAction)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsSendMessageUploadDocumentAction returns copy with only SendMessageUploadDocumentAction constructors.
func (s SendMessageActionClassArray) AsSendMessageUploadDocumentAction() (to SendMessageUploadDocumentActionArray) {
	for _, elem := range s {
		value, ok := elem.(*SendMessageUploadDocumentAction)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsSendMessageUploadRoundAction returns copy with only SendMessageUploadRoundAction constructors.
func (s SendMessageActionClassArray) AsSendMessageUploadRoundAction() (to SendMessageUploadRoundActionArray) {
	for _, elem := range s {
		value, ok := elem.(*SendMessageUploadRoundAction)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsSendMessageHistoryImportAction returns copy with only SendMessageHistoryImportAction constructors.
func (s SendMessageActionClassArray) AsSendMessageHistoryImportAction() (to SendMessageHistoryImportActionArray) {
	for _, elem := range s {
		value, ok := elem.(*SendMessageHistoryImportAction)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// SendMessageUploadVideoActionArray is adapter for slice of SendMessageUploadVideoAction.
type SendMessageUploadVideoActionArray []SendMessageUploadVideoAction

// Sort sorts slice of SendMessageUploadVideoAction.
func (s SendMessageUploadVideoActionArray) Sort(less func(a, b SendMessageUploadVideoAction) bool) SendMessageUploadVideoActionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageUploadVideoAction.
func (s SendMessageUploadVideoActionArray) SortStable(less func(a, b SendMessageUploadVideoAction) bool) SendMessageUploadVideoActionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageUploadVideoAction.
func (s SendMessageUploadVideoActionArray) Retain(keep func(x SendMessageUploadVideoAction) bool) SendMessageUploadVideoActionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageUploadVideoActionArray) First() (v SendMessageUploadVideoAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageUploadVideoActionArray) Last() (v SendMessageUploadVideoAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageUploadVideoActionArray) PopFirst() (v SendMessageUploadVideoAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageUploadVideoAction
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageUploadVideoActionArray) Pop() (v SendMessageUploadVideoAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SendMessageUploadAudioActionArray is adapter for slice of SendMessageUploadAudioAction.
type SendMessageUploadAudioActionArray []SendMessageUploadAudioAction

// Sort sorts slice of SendMessageUploadAudioAction.
func (s SendMessageUploadAudioActionArray) Sort(less func(a, b SendMessageUploadAudioAction) bool) SendMessageUploadAudioActionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageUploadAudioAction.
func (s SendMessageUploadAudioActionArray) SortStable(less func(a, b SendMessageUploadAudioAction) bool) SendMessageUploadAudioActionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageUploadAudioAction.
func (s SendMessageUploadAudioActionArray) Retain(keep func(x SendMessageUploadAudioAction) bool) SendMessageUploadAudioActionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageUploadAudioActionArray) First() (v SendMessageUploadAudioAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageUploadAudioActionArray) Last() (v SendMessageUploadAudioAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageUploadAudioActionArray) PopFirst() (v SendMessageUploadAudioAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageUploadAudioAction
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageUploadAudioActionArray) Pop() (v SendMessageUploadAudioAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SendMessageUploadPhotoActionArray is adapter for slice of SendMessageUploadPhotoAction.
type SendMessageUploadPhotoActionArray []SendMessageUploadPhotoAction

// Sort sorts slice of SendMessageUploadPhotoAction.
func (s SendMessageUploadPhotoActionArray) Sort(less func(a, b SendMessageUploadPhotoAction) bool) SendMessageUploadPhotoActionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageUploadPhotoAction.
func (s SendMessageUploadPhotoActionArray) SortStable(less func(a, b SendMessageUploadPhotoAction) bool) SendMessageUploadPhotoActionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageUploadPhotoAction.
func (s SendMessageUploadPhotoActionArray) Retain(keep func(x SendMessageUploadPhotoAction) bool) SendMessageUploadPhotoActionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageUploadPhotoActionArray) First() (v SendMessageUploadPhotoAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageUploadPhotoActionArray) Last() (v SendMessageUploadPhotoAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageUploadPhotoActionArray) PopFirst() (v SendMessageUploadPhotoAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageUploadPhotoAction
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageUploadPhotoActionArray) Pop() (v SendMessageUploadPhotoAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SendMessageUploadDocumentActionArray is adapter for slice of SendMessageUploadDocumentAction.
type SendMessageUploadDocumentActionArray []SendMessageUploadDocumentAction

// Sort sorts slice of SendMessageUploadDocumentAction.
func (s SendMessageUploadDocumentActionArray) Sort(less func(a, b SendMessageUploadDocumentAction) bool) SendMessageUploadDocumentActionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageUploadDocumentAction.
func (s SendMessageUploadDocumentActionArray) SortStable(less func(a, b SendMessageUploadDocumentAction) bool) SendMessageUploadDocumentActionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageUploadDocumentAction.
func (s SendMessageUploadDocumentActionArray) Retain(keep func(x SendMessageUploadDocumentAction) bool) SendMessageUploadDocumentActionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageUploadDocumentActionArray) First() (v SendMessageUploadDocumentAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageUploadDocumentActionArray) Last() (v SendMessageUploadDocumentAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageUploadDocumentActionArray) PopFirst() (v SendMessageUploadDocumentAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageUploadDocumentAction
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageUploadDocumentActionArray) Pop() (v SendMessageUploadDocumentAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SendMessageUploadRoundActionArray is adapter for slice of SendMessageUploadRoundAction.
type SendMessageUploadRoundActionArray []SendMessageUploadRoundAction

// Sort sorts slice of SendMessageUploadRoundAction.
func (s SendMessageUploadRoundActionArray) Sort(less func(a, b SendMessageUploadRoundAction) bool) SendMessageUploadRoundActionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageUploadRoundAction.
func (s SendMessageUploadRoundActionArray) SortStable(less func(a, b SendMessageUploadRoundAction) bool) SendMessageUploadRoundActionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageUploadRoundAction.
func (s SendMessageUploadRoundActionArray) Retain(keep func(x SendMessageUploadRoundAction) bool) SendMessageUploadRoundActionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageUploadRoundActionArray) First() (v SendMessageUploadRoundAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageUploadRoundActionArray) Last() (v SendMessageUploadRoundAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageUploadRoundActionArray) PopFirst() (v SendMessageUploadRoundAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageUploadRoundAction
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageUploadRoundActionArray) Pop() (v SendMessageUploadRoundAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// SendMessageHistoryImportActionArray is adapter for slice of SendMessageHistoryImportAction.
type SendMessageHistoryImportActionArray []SendMessageHistoryImportAction

// Sort sorts slice of SendMessageHistoryImportAction.
func (s SendMessageHistoryImportActionArray) Sort(less func(a, b SendMessageHistoryImportAction) bool) SendMessageHistoryImportActionArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of SendMessageHistoryImportAction.
func (s SendMessageHistoryImportActionArray) SortStable(less func(a, b SendMessageHistoryImportAction) bool) SendMessageHistoryImportActionArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of SendMessageHistoryImportAction.
func (s SendMessageHistoryImportActionArray) Retain(keep func(x SendMessageHistoryImportAction) bool) SendMessageHistoryImportActionArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s SendMessageHistoryImportActionArray) First() (v SendMessageHistoryImportAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s SendMessageHistoryImportActionArray) Last() (v SendMessageHistoryImportAction, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *SendMessageHistoryImportActionArray) PopFirst() (v SendMessageHistoryImportAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero SendMessageHistoryImportAction
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *SendMessageHistoryImportActionArray) Pop() (v SendMessageHistoryImportAction, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
