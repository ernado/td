// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ChannelsEditPhotoRequest represents TL type `channels.editPhoto#f12e57c9`.
// Change the photo of a channel/supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// See https://core.telegram.org/method/channels.editPhoto for reference.
type ChannelsEditPhotoRequest struct {
	// Channel/supergroup whose photo should be edited
	Channel InputChannelClass
	// New photo
	Photo InputChatPhotoClass
}

// ChannelsEditPhotoRequestTypeID is TL type id of ChannelsEditPhotoRequest.
const ChannelsEditPhotoRequestTypeID = 0xf12e57c9

func (e *ChannelsEditPhotoRequest) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.Channel == nil) {
		return false
	}
	if !(e.Photo == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *ChannelsEditPhotoRequest) String() string {
	if e == nil {
		return "ChannelsEditPhotoRequest(nil)"
	}
	type Alias ChannelsEditPhotoRequest
	return fmt.Sprintf("ChannelsEditPhotoRequest%+v", Alias(*e))
}

// FillFrom fills ChannelsEditPhotoRequest from given interface.
func (e *ChannelsEditPhotoRequest) FillFrom(from interface {
	GetChannel() (value InputChannelClass)
	GetPhoto() (value InputChatPhotoClass)
}) {
	e.Channel = from.GetChannel()
	e.Photo = from.GetPhoto()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsEditPhotoRequest) TypeID() uint32 {
	return ChannelsEditPhotoRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsEditPhotoRequest) TypeName() string {
	return "channels.editPhoto"
}

// TypeInfo returns info about TL type.
func (e *ChannelsEditPhotoRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.editPhoto",
		ID:   ChannelsEditPhotoRequestTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Channel",
			SchemaName: "channel",
		},
		{
			Name:       "Photo",
			SchemaName: "photo",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *ChannelsEditPhotoRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode %s as nil", "channels.editPhoto#f12e57c9")
	}
	b.PutID(ChannelsEditPhotoRequestTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *ChannelsEditPhotoRequest) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode %s as nil", "channels.editPhoto#f12e57c9")
	}
	if e.Channel == nil {
		return fmt.Errorf("unable to encode %s: field %s is nil", "channels.editPhoto#f12e57c9", "channel")
	}
	if err := e.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode %s: field %s: %w", "channels.editPhoto#f12e57c9", "channel", err)
	}
	if e.Photo == nil {
		return fmt.Errorf("unable to encode %s: field %s is nil", "channels.editPhoto#f12e57c9", "photo")
	}
	if err := e.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode %s: field %s: %w", "channels.editPhoto#f12e57c9", "photo", err)
	}
	return nil
}

// GetChannel returns value of Channel field.
func (e *ChannelsEditPhotoRequest) GetChannel() (value InputChannelClass) {
	return e.Channel
}

// GetChannelAsNotEmpty returns mapped value of Channel field.
func (e *ChannelsEditPhotoRequest) GetChannelAsNotEmpty() (NotEmptyInputChannel, bool) {
	return e.Channel.AsNotEmpty()
}

// GetPhoto returns value of Photo field.
func (e *ChannelsEditPhotoRequest) GetPhoto() (value InputChatPhotoClass) {
	return e.Photo
}

// Decode implements bin.Decoder.
func (e *ChannelsEditPhotoRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode %s to nil", "channels.editPhoto#f12e57c9")
	}
	if err := b.ConsumeID(ChannelsEditPhotoRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode %s: %w", "channels.editPhoto#f12e57c9", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *ChannelsEditPhotoRequest) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode %s to nil", "channels.editPhoto#f12e57c9")
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "channels.editPhoto#f12e57c9", "channel", err)
		}
		e.Channel = value
	}
	{
		value, err := DecodeInputChatPhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "channels.editPhoto#f12e57c9", "photo", err)
		}
		e.Photo = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsEditPhotoRequest.
var (
	_ bin.Encoder     = &ChannelsEditPhotoRequest{}
	_ bin.Decoder     = &ChannelsEditPhotoRequest{}
	_ bin.BareEncoder = &ChannelsEditPhotoRequest{}
	_ bin.BareDecoder = &ChannelsEditPhotoRequest{}
)

// ChannelsEditPhoto invokes method channels.editPhoto#f12e57c9 returning error if any.
// Change the photo of a channel/supergroup¹
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  403 CHAT_WRITE_FORBIDDEN: You can't write in this chat
//  400 PHOTO_CROP_SIZE_SMALL: Photo is too small
//  400 PHOTO_EXT_INVALID: The extension of the photo is invalid
//  400 PHOTO_INVALID: Photo invalid
//
// See https://core.telegram.org/method/channels.editPhoto for reference.
// Can be used by bots.
func (c *Client) ChannelsEditPhoto(ctx context.Context, request *ChannelsEditPhotoRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
