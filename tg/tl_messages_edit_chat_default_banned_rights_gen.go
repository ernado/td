// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessagesEditChatDefaultBannedRightsRequest represents TL type `messages.editChatDefaultBannedRights#a5866b41`.
// Edit the default banned rights of a channel/supergroup/group¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// See https://core.telegram.org/method/messages.editChatDefaultBannedRights for reference.
type MessagesEditChatDefaultBannedRightsRequest struct {
	// The peer
	Peer InputPeerClass
	// The new global rights
	BannedRights ChatBannedRights
}

// MessagesEditChatDefaultBannedRightsRequestTypeID is TL type id of MessagesEditChatDefaultBannedRightsRequest.
const MessagesEditChatDefaultBannedRightsRequestTypeID = 0xa5866b41

func (e *MessagesEditChatDefaultBannedRightsRequest) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.Peer == nil) {
		return false
	}
	if !(e.BannedRights.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *MessagesEditChatDefaultBannedRightsRequest) String() string {
	if e == nil {
		return "MessagesEditChatDefaultBannedRightsRequest(nil)"
	}
	type Alias MessagesEditChatDefaultBannedRightsRequest
	return fmt.Sprintf("MessagesEditChatDefaultBannedRightsRequest%+v", Alias(*e))
}

// FillFrom fills MessagesEditChatDefaultBannedRightsRequest from given interface.
func (e *MessagesEditChatDefaultBannedRightsRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetBannedRights() (value ChatBannedRights)
}) {
	e.Peer = from.GetPeer()
	e.BannedRights = from.GetBannedRights()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesEditChatDefaultBannedRightsRequest) TypeID() uint32 {
	return MessagesEditChatDefaultBannedRightsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesEditChatDefaultBannedRightsRequest) TypeName() string {
	return "messages.editChatDefaultBannedRights"
}

// TypeInfo returns info about TL type.
func (e *MessagesEditChatDefaultBannedRightsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.editChatDefaultBannedRights",
		ID:   MessagesEditChatDefaultBannedRightsRequestTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "BannedRights",
			SchemaName: "banned_rights",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *MessagesEditChatDefaultBannedRightsRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "messages.editChatDefaultBannedRights#a5866b41",
		}
	}
	b.PutID(MessagesEditChatDefaultBannedRightsRequestTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *MessagesEditChatDefaultBannedRightsRequest) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "messages.editChatDefaultBannedRights#a5866b41",
		}
	}
	if e.Peer == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "messages.editChatDefaultBannedRights#a5866b41",
			FieldName: "peer",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "InputPeer",
			},
		}
	}
	if err := e.Peer.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "messages.editChatDefaultBannedRights#a5866b41",
			FieldName:  "peer",
			Underlying: err,
		}
	}
	if err := e.BannedRights.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "messages.editChatDefaultBannedRights#a5866b41",
			FieldName:  "banned_rights",
			Underlying: err,
		}
	}
	return nil
}

// GetPeer returns value of Peer field.
func (e *MessagesEditChatDefaultBannedRightsRequest) GetPeer() (value InputPeerClass) {
	return e.Peer
}

// GetBannedRights returns value of BannedRights field.
func (e *MessagesEditChatDefaultBannedRightsRequest) GetBannedRights() (value ChatBannedRights) {
	return e.BannedRights
}

// Decode implements bin.Decoder.
func (e *MessagesEditChatDefaultBannedRightsRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "messages.editChatDefaultBannedRights#a5866b41",
		}
	}
	if err := b.ConsumeID(MessagesEditChatDefaultBannedRightsRequestTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "messages.editChatDefaultBannedRights#a5866b41",
			Underlying: err,
		}
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *MessagesEditChatDefaultBannedRightsRequest) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "messages.editChatDefaultBannedRights#a5866b41",
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.editChatDefaultBannedRights#a5866b41",
				FieldName:  "peer",
				Underlying: err,
			}
		}
		e.Peer = value
	}
	{
		if err := e.BannedRights.Decode(b); err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.editChatDefaultBannedRights#a5866b41",
				FieldName:  "banned_rights",
				Underlying: err,
			}
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesEditChatDefaultBannedRightsRequest.
var (
	_ bin.Encoder     = &MessagesEditChatDefaultBannedRightsRequest{}
	_ bin.Decoder     = &MessagesEditChatDefaultBannedRightsRequest{}
	_ bin.BareEncoder = &MessagesEditChatDefaultBannedRightsRequest{}
	_ bin.BareDecoder = &MessagesEditChatDefaultBannedRightsRequest{}
)

// MessagesEditChatDefaultBannedRights invokes method messages.editChatDefaultBannedRights#a5866b41 returning error if any.
// Edit the default banned rights of a channel/supergroup/group¹.
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 BANNED_RIGHTS_INVALID: You provided some invalid flags in the banned rights
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 UNTIL_DATE_INVALID: Invalid until date provided
//
// See https://core.telegram.org/method/messages.editChatDefaultBannedRights for reference.
// Can be used by bots.
func (c *Client) MessagesEditChatDefaultBannedRights(ctx context.Context, request *MessagesEditChatDefaultBannedRightsRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
