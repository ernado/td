// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// InvokeAfterMsgsRequest represents TL type `invokeAfterMsgs#3dc4b4f0`.
// Invokes a query after a successfull completion of previous queries
//
// See https://core.telegram.org/constructor/invokeAfterMsgs for reference.
type InvokeAfterMsgsRequest struct {
	// List of messages on which a current query depends
	MsgIDs []int64
	// The query itself
	Query bin.Object
}

// InvokeAfterMsgsRequestTypeID is TL type id of InvokeAfterMsgsRequest.
const InvokeAfterMsgsRequestTypeID = 0x3dc4b4f0

func (i *InvokeAfterMsgsRequest) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.MsgIDs == nil) {
		return false
	}
	if !(i.Query == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InvokeAfterMsgsRequest) String() string {
	if i == nil {
		return "InvokeAfterMsgsRequest(nil)"
	}
	type Alias InvokeAfterMsgsRequest
	return fmt.Sprintf("InvokeAfterMsgsRequest%+v", Alias(*i))
}

// FillFrom fills InvokeAfterMsgsRequest from given interface.
func (i *InvokeAfterMsgsRequest) FillFrom(from interface {
	GetMsgIDs() (value []int64)
	GetQuery() (value bin.Object)
}) {
	i.MsgIDs = from.GetMsgIDs()
	i.Query = from.GetQuery()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*InvokeAfterMsgsRequest) TypeID() uint32 {
	return InvokeAfterMsgsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*InvokeAfterMsgsRequest) TypeName() string {
	return "invokeAfterMsgs"
}

// TypeInfo returns info about TL type.
func (i *InvokeAfterMsgsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "invokeAfterMsgs",
		ID:   InvokeAfterMsgsRequestTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MsgIDs",
			SchemaName: "msg_ids",
		},
		{
			Name:       "Query",
			SchemaName: "query",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *InvokeAfterMsgsRequest) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode %s as nil", "invokeAfterMsgs#3dc4b4f0")
	}
	b.PutID(InvokeAfterMsgsRequestTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *InvokeAfterMsgsRequest) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode %s as nil", "invokeAfterMsgs#3dc4b4f0")
	}
	b.PutVectorHeader(len(i.MsgIDs))
	for _, v := range i.MsgIDs {
		b.PutLong(v)
	}
	if err := i.Query.Encode(b); err != nil {
		return fmt.Errorf("unable to encode %s: field %s: %w", "invokeAfterMsgs#3dc4b4f0", "query", err)
	}
	return nil
}

// GetMsgIDs returns value of MsgIDs field.
func (i *InvokeAfterMsgsRequest) GetMsgIDs() (value []int64) {
	return i.MsgIDs
}

// GetQuery returns value of Query field.
func (i *InvokeAfterMsgsRequest) GetQuery() (value bin.Object) {
	return i.Query
}

// Decode implements bin.Decoder.
func (i *InvokeAfterMsgsRequest) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode %s to nil", "invokeAfterMsgs#3dc4b4f0")
	}
	if err := b.ConsumeID(InvokeAfterMsgsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode %s: %w", "invokeAfterMsgs#3dc4b4f0", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *InvokeAfterMsgsRequest) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode %s to nil", "invokeAfterMsgs#3dc4b4f0")
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "invokeAfterMsgs#3dc4b4f0", "msg_ids", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode %s: field %s: %w", "invokeAfterMsgs#3dc4b4f0", "msg_ids", err)
			}
			i.MsgIDs = append(i.MsgIDs, value)
		}
	}
	{
		if err := i.Query.Decode(b); err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "invokeAfterMsgs#3dc4b4f0", "query", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for InvokeAfterMsgsRequest.
var (
	_ bin.Encoder     = &InvokeAfterMsgsRequest{}
	_ bin.Decoder     = &InvokeAfterMsgsRequest{}
	_ bin.BareEncoder = &InvokeAfterMsgsRequest{}
	_ bin.BareDecoder = &InvokeAfterMsgsRequest{}
)
