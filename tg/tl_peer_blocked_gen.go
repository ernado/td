// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// PeerBlocked represents TL type `peerBlocked#e8fd8014`.
// Information about a blocked peer
//
// See https://core.telegram.org/constructor/peerBlocked for reference.
type PeerBlocked struct {
	// Peer ID
	PeerID PeerClass
	// When was the peer blocked
	Date int
}

// PeerBlockedTypeID is TL type id of PeerBlocked.
const PeerBlockedTypeID = 0xe8fd8014

func (p *PeerBlocked) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.PeerID == nil) {
		return false
	}
	if !(p.Date == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PeerBlocked) String() string {
	if p == nil {
		return "PeerBlocked(nil)"
	}
	type Alias PeerBlocked
	return fmt.Sprintf("PeerBlocked%+v", Alias(*p))
}

// FillFrom fills PeerBlocked from given interface.
func (p *PeerBlocked) FillFrom(from interface {
	GetPeerID() (value PeerClass)
	GetDate() (value int)
}) {
	p.PeerID = from.GetPeerID()
	p.Date = from.GetDate()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PeerBlocked) TypeID() uint32 {
	return PeerBlockedTypeID
}

// TypeName returns name of type in TL schema.
func (*PeerBlocked) TypeName() string {
	return "peerBlocked"
}

// TypeInfo returns info about TL type.
func (p *PeerBlocked) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "peerBlocked",
		ID:   PeerBlockedTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "PeerID",
			SchemaName: "peer_id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PeerBlocked) Encode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "peerBlocked#e8fd8014",
		}
	}
	b.PutID(PeerBlockedTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PeerBlocked) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "peerBlocked#e8fd8014",
		}
	}
	if p.PeerID == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "peerBlocked#e8fd8014",
			FieldName: "peer_id",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "Peer",
			},
		}
	}
	if err := p.PeerID.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "peerBlocked#e8fd8014",
			FieldName:  "peer_id",
			Underlying: err,
		}
	}
	b.PutInt(p.Date)
	return nil
}

// GetPeerID returns value of PeerID field.
func (p *PeerBlocked) GetPeerID() (value PeerClass) {
	return p.PeerID
}

// GetDate returns value of Date field.
func (p *PeerBlocked) GetDate() (value int) {
	return p.Date
}

// Decode implements bin.Decoder.
func (p *PeerBlocked) Decode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "peerBlocked#e8fd8014",
		}
	}
	if err := b.ConsumeID(PeerBlockedTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "peerBlocked#e8fd8014",
			Underlying: err,
		}
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PeerBlocked) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "peerBlocked#e8fd8014",
		}
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "peerBlocked#e8fd8014",
				FieldName:  "peer_id",
				Underlying: err,
			}
		}
		p.PeerID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "peerBlocked#e8fd8014",
				FieldName:  "date",
				Underlying: err,
			}
		}
		p.Date = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PeerBlocked.
var (
	_ bin.Encoder     = &PeerBlocked{}
	_ bin.Decoder     = &PeerBlocked{}
	_ bin.BareEncoder = &PeerBlocked{}
	_ bin.BareDecoder = &PeerBlocked{}
)
