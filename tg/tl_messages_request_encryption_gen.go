// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessagesRequestEncryptionRequest represents TL type `messages.requestEncryption#f64daf43`.
// Sends a request to start a secret chat to the user.
//
// See https://core.telegram.org/method/messages.requestEncryption for reference.
type MessagesRequestEncryptionRequest struct {
	// User ID
	UserID InputUserClass
	// Unique client request ID required to prevent resending. This also doubles as the chat
	// ID.
	RandomID int
	// A = g ^ a mod p, see WikipediaÂ¹
	//
	// Links:
	//  1) https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
	GA []byte
}

// MessagesRequestEncryptionRequestTypeID is TL type id of MessagesRequestEncryptionRequest.
const MessagesRequestEncryptionRequestTypeID = 0xf64daf43

func (r *MessagesRequestEncryptionRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.UserID == nil) {
		return false
	}
	if !(r.RandomID == 0) {
		return false
	}
	if !(r.GA == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *MessagesRequestEncryptionRequest) String() string {
	if r == nil {
		return "MessagesRequestEncryptionRequest(nil)"
	}
	type Alias MessagesRequestEncryptionRequest
	return fmt.Sprintf("MessagesRequestEncryptionRequest%+v", Alias(*r))
}

// FillFrom fills MessagesRequestEncryptionRequest from given interface.
func (r *MessagesRequestEncryptionRequest) FillFrom(from interface {
	GetUserID() (value InputUserClass)
	GetRandomID() (value int)
	GetGA() (value []byte)
}) {
	r.UserID = from.GetUserID()
	r.RandomID = from.GetRandomID()
	r.GA = from.GetGA()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesRequestEncryptionRequest) TypeID() uint32 {
	return MessagesRequestEncryptionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesRequestEncryptionRequest) TypeName() string {
	return "messages.requestEncryption"
}

// TypeInfo returns info about TL type.
func (r *MessagesRequestEncryptionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.requestEncryption",
		ID:   MessagesRequestEncryptionRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "RandomID",
			SchemaName: "random_id",
		},
		{
			Name:       "GA",
			SchemaName: "g_a",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *MessagesRequestEncryptionRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode %s as nil", "messages.requestEncryption#f64daf43")
	}
	b.PutID(MessagesRequestEncryptionRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *MessagesRequestEncryptionRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode %s as nil", "messages.requestEncryption#f64daf43")
	}
	if r.UserID == nil {
		return fmt.Errorf("unable to encode %s: field %s is nil", "messages.requestEncryption#f64daf43", "user_id")
	}
	if err := r.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode %s: field %s: %w", "messages.requestEncryption#f64daf43", "user_id", err)
	}
	b.PutInt(r.RandomID)
	b.PutBytes(r.GA)
	return nil
}

// GetUserID returns value of UserID field.
func (r *MessagesRequestEncryptionRequest) GetUserID() (value InputUserClass) {
	return r.UserID
}

// GetRandomID returns value of RandomID field.
func (r *MessagesRequestEncryptionRequest) GetRandomID() (value int) {
	return r.RandomID
}

// GetGA returns value of GA field.
func (r *MessagesRequestEncryptionRequest) GetGA() (value []byte) {
	return r.GA
}

// Decode implements bin.Decoder.
func (r *MessagesRequestEncryptionRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode %s to nil", "messages.requestEncryption#f64daf43")
	}
	if err := b.ConsumeID(MessagesRequestEncryptionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode %s: %w", "messages.requestEncryption#f64daf43", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *MessagesRequestEncryptionRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode %s to nil", "messages.requestEncryption#f64daf43")
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "messages.requestEncryption#f64daf43", "user_id", err)
		}
		r.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "messages.requestEncryption#f64daf43", "random_id", err)
		}
		r.RandomID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode %s: field %s: %w", "messages.requestEncryption#f64daf43", "g_a", err)
		}
		r.GA = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesRequestEncryptionRequest.
var (
	_ bin.Encoder     = &MessagesRequestEncryptionRequest{}
	_ bin.Decoder     = &MessagesRequestEncryptionRequest{}
	_ bin.BareEncoder = &MessagesRequestEncryptionRequest{}
	_ bin.BareDecoder = &MessagesRequestEncryptionRequest{}
)

// MessagesRequestEncryption invokes method messages.requestEncryption#f64daf43 returning error if any.
// Sends a request to start a secret chat to the user.
//
// Possible errors:
//  400 DH_G_A_INVALID: g_a invalid
//  400 USER_ID_INVALID: The provided user ID is invalid
//
// See https://core.telegram.org/method/messages.requestEncryption for reference.
func (c *Client) MessagesRequestEncryption(ctx context.Context, request *MessagesRequestEncryptionRequest) (EncryptedChatClass, error) {
	var result EncryptedChatBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.EncryptedChat, nil
}
