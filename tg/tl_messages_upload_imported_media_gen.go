// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessagesUploadImportedMediaRequest represents TL type `messages.uploadImportedMedia#2a862092`.
//
// See https://core.telegram.org/method/messages.uploadImportedMedia for reference.
type MessagesUploadImportedMediaRequest struct {
	// Peer field of MessagesUploadImportedMediaRequest.
	Peer InputPeerClass
	// ImportID field of MessagesUploadImportedMediaRequest.
	ImportID int64
	// FileName field of MessagesUploadImportedMediaRequest.
	FileName string
	// Media field of MessagesUploadImportedMediaRequest.
	Media InputMediaClass
}

// MessagesUploadImportedMediaRequestTypeID is TL type id of MessagesUploadImportedMediaRequest.
const MessagesUploadImportedMediaRequestTypeID = 0x2a862092

func (u *MessagesUploadImportedMediaRequest) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Peer == nil) {
		return false
	}
	if !(u.ImportID == 0) {
		return false
	}
	if !(u.FileName == "") {
		return false
	}
	if !(u.Media == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *MessagesUploadImportedMediaRequest) String() string {
	if u == nil {
		return "MessagesUploadImportedMediaRequest(nil)"
	}
	type Alias MessagesUploadImportedMediaRequest
	return fmt.Sprintf("MessagesUploadImportedMediaRequest%+v", Alias(*u))
}

// FillFrom fills MessagesUploadImportedMediaRequest from given interface.
func (u *MessagesUploadImportedMediaRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetImportID() (value int64)
	GetFileName() (value string)
	GetMedia() (value InputMediaClass)
}) {
	u.Peer = from.GetPeer()
	u.ImportID = from.GetImportID()
	u.FileName = from.GetFileName()
	u.Media = from.GetMedia()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesUploadImportedMediaRequest) TypeID() uint32 {
	return MessagesUploadImportedMediaRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesUploadImportedMediaRequest) TypeName() string {
	return "messages.uploadImportedMedia"
}

// TypeInfo returns info about TL type.
func (u *MessagesUploadImportedMediaRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.uploadImportedMedia",
		ID:   MessagesUploadImportedMediaRequestTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "ImportID",
			SchemaName: "import_id",
		},
		{
			Name:       "FileName",
			SchemaName: "file_name",
		},
		{
			Name:       "Media",
			SchemaName: "media",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *MessagesUploadImportedMediaRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "messages.uploadImportedMedia#2a862092",
		}
	}
	b.PutID(MessagesUploadImportedMediaRequestTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *MessagesUploadImportedMediaRequest) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "messages.uploadImportedMedia#2a862092",
		}
	}
	if u.Peer == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "messages.uploadImportedMedia#2a862092",
			FieldName: "peer",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "InputPeer",
			},
		}
	}
	if err := u.Peer.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "messages.uploadImportedMedia#2a862092",
			FieldName:  "peer",
			Underlying: err,
		}
	}
	b.PutLong(u.ImportID)
	b.PutString(u.FileName)
	if u.Media == nil {
		return &bin.FieldError{
			Action:    "encode",
			TypeName:  "messages.uploadImportedMedia#2a862092",
			FieldName: "media",
			Underlying: &bin.NilError{
				Action:   "encode",
				TypeName: "InputMedia",
			},
		}
	}
	if err := u.Media.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "messages.uploadImportedMedia#2a862092",
			FieldName:  "media",
			Underlying: err,
		}
	}
	return nil
}

// GetPeer returns value of Peer field.
func (u *MessagesUploadImportedMediaRequest) GetPeer() (value InputPeerClass) {
	return u.Peer
}

// GetImportID returns value of ImportID field.
func (u *MessagesUploadImportedMediaRequest) GetImportID() (value int64) {
	return u.ImportID
}

// GetFileName returns value of FileName field.
func (u *MessagesUploadImportedMediaRequest) GetFileName() (value string) {
	return u.FileName
}

// GetMedia returns value of Media field.
func (u *MessagesUploadImportedMediaRequest) GetMedia() (value InputMediaClass) {
	return u.Media
}

// Decode implements bin.Decoder.
func (u *MessagesUploadImportedMediaRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "messages.uploadImportedMedia#2a862092",
		}
	}
	if err := b.ConsumeID(MessagesUploadImportedMediaRequestTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "messages.uploadImportedMedia#2a862092",
			Underlying: err,
		}
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *MessagesUploadImportedMediaRequest) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "messages.uploadImportedMedia#2a862092",
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.uploadImportedMedia#2a862092",
				FieldName:  "peer",
				Underlying: err,
			}
		}
		u.Peer = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.uploadImportedMedia#2a862092",
				FieldName:  "import_id",
				Underlying: err,
			}
		}
		u.ImportID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.uploadImportedMedia#2a862092",
				FieldName:  "file_name",
				Underlying: err,
			}
		}
		u.FileName = value
	}
	{
		value, err := DecodeInputMedia(b)
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "messages.uploadImportedMedia#2a862092",
				FieldName:  "media",
				Underlying: err,
			}
		}
		u.Media = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesUploadImportedMediaRequest.
var (
	_ bin.Encoder     = &MessagesUploadImportedMediaRequest{}
	_ bin.Decoder     = &MessagesUploadImportedMediaRequest{}
	_ bin.BareEncoder = &MessagesUploadImportedMediaRequest{}
	_ bin.BareDecoder = &MessagesUploadImportedMediaRequest{}
)

// MessagesUploadImportedMedia invokes method messages.uploadImportedMedia#2a862092 returning error if any.
//
// See https://core.telegram.org/method/messages.uploadImportedMedia for reference.
func (c *Client) MessagesUploadImportedMedia(ctx context.Context, request *MessagesUploadImportedMediaRequest) (MessageMediaClass, error) {
	var result MessageMediaBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.MessageMedia, nil
}
