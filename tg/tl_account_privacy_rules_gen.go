// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// AccountPrivacyRules represents TL type `account.privacyRules#50a04e45`.
// Privacy rules
//
// See https://core.telegram.org/constructor/account.privacyRules for reference.
type AccountPrivacyRules struct {
	// Privacy rules
	Rules []PrivacyRuleClass
	// Chats to which the rules apply
	Chats []ChatClass
	// Users to which the rules apply
	Users []UserClass
}

// AccountPrivacyRulesTypeID is TL type id of AccountPrivacyRules.
const AccountPrivacyRulesTypeID = 0x50a04e45

func (p *AccountPrivacyRules) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.Rules == nil) {
		return false
	}
	if !(p.Chats == nil) {
		return false
	}
	if !(p.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *AccountPrivacyRules) String() string {
	if p == nil {
		return "AccountPrivacyRules(nil)"
	}
	type Alias AccountPrivacyRules
	return fmt.Sprintf("AccountPrivacyRules%+v", Alias(*p))
}

// FillFrom fills AccountPrivacyRules from given interface.
func (p *AccountPrivacyRules) FillFrom(from interface {
	GetRules() (value []PrivacyRuleClass)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	p.Rules = from.GetRules()
	p.Chats = from.GetChats()
	p.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AccountPrivacyRules) TypeID() uint32 {
	return AccountPrivacyRulesTypeID
}

// TypeName returns name of type in TL schema.
func (*AccountPrivacyRules) TypeName() string {
	return "account.privacyRules"
}

// TypeInfo returns info about TL type.
func (p *AccountPrivacyRules) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "account.privacyRules",
		ID:   AccountPrivacyRulesTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Rules",
			SchemaName: "rules",
		},
		{
			Name:       "Chats",
			SchemaName: "chats",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *AccountPrivacyRules) Encode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "account.privacyRules#50a04e45",
		}
	}
	b.PutID(AccountPrivacyRulesTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *AccountPrivacyRules) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "account.privacyRules#50a04e45",
		}
	}
	b.PutVectorHeader(len(p.Rules))
	for idx, v := range p.Rules {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "account.privacyRules#50a04e45",
				FieldName: "rules",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<PrivacyRule>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "account.privacyRules#50a04e45",
				FieldName: "rules",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(p.Chats))
	for idx, v := range p.Chats {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "account.privacyRules#50a04e45",
				FieldName: "chats",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<Chat>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "account.privacyRules#50a04e45",
				FieldName: "chats",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	b.PutVectorHeader(len(p.Users))
	for idx, v := range p.Users {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "account.privacyRules#50a04e45",
				FieldName: "users",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<User>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "account.privacyRules#50a04e45",
				FieldName: "users",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetRules returns value of Rules field.
func (p *AccountPrivacyRules) GetRules() (value []PrivacyRuleClass) {
	return p.Rules
}

// MapRules returns field Rules wrapped in PrivacyRuleClassArray helper.
func (p *AccountPrivacyRules) MapRules() (value PrivacyRuleClassArray) {
	return PrivacyRuleClassArray(p.Rules)
}

// GetChats returns value of Chats field.
func (p *AccountPrivacyRules) GetChats() (value []ChatClass) {
	return p.Chats
}

// MapChats returns field Chats wrapped in ChatClassArray helper.
func (p *AccountPrivacyRules) MapChats() (value ChatClassArray) {
	return ChatClassArray(p.Chats)
}

// GetUsers returns value of Users field.
func (p *AccountPrivacyRules) GetUsers() (value []UserClass) {
	return p.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (p *AccountPrivacyRules) MapUsers() (value UserClassArray) {
	return UserClassArray(p.Users)
}

// Decode implements bin.Decoder.
func (p *AccountPrivacyRules) Decode(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "account.privacyRules#50a04e45",
		}
	}
	if err := b.ConsumeID(AccountPrivacyRulesTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "account.privacyRules#50a04e45",
			Underlying: err,
		}
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *AccountPrivacyRules) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "account.privacyRules#50a04e45",
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "account.privacyRules#50a04e45",
				FieldName:  "rules",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			p.Rules = make([]PrivacyRuleClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePrivacyRule(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "account.privacyRules#50a04e45",
					FieldName:  "rules",
					Underlying: err,
				}
			}
			p.Rules = append(p.Rules, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "account.privacyRules#50a04e45",
				FieldName:  "chats",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			p.Chats = make([]ChatClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "account.privacyRules#50a04e45",
					FieldName:  "chats",
					Underlying: err,
				}
			}
			p.Chats = append(p.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "account.privacyRules#50a04e45",
				FieldName:  "users",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			p.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "account.privacyRules#50a04e45",
					FieldName:  "users",
					Underlying: err,
				}
			}
			p.Users = append(p.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountPrivacyRules.
var (
	_ bin.Encoder     = &AccountPrivacyRules{}
	_ bin.Decoder     = &AccountPrivacyRules{}
	_ bin.BareEncoder = &AccountPrivacyRules{}
	_ bin.BareDecoder = &AccountPrivacyRules{}
)
