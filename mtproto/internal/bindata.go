// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _data/public_keys.pem
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __dataPublic_keysPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd3\xb7\x0e\x84\xe8\x01\x04\xe0\x9e\xa7\xb8\x1e\x59\xa4\x85\x85\x92\x1c\x97\xbc\xa4\x8e\x9c\xf3\xbf\xa4\xa7\xb7\x7c\xd5\x49\x3e\xc9\x95\x6f\xda\xe9\xe6\xd3\xfc\xeb\x3f\xe1\x44\x59\x35\xff\x70\x3d\xf6\x0f\xfb\xcb\x19\x2a\xff\x87\x2e\xc6\x7f\x16\xd0\x47\x55\x39\xbe\xd6\x79\xd6\x11\xd9\x33\x60\x79\xbb\x65\x4e\x9c\x18\x25\x02\x70\x7d\x91\x3c\xf0\x73\x6e\x8f\x6e\xa5\xa9\x53\x6c\x28\x76\xb0\xd9\xf7\x25\x62\xcb\xd1\x57\xdd\x6b\x5f\x85\x7d\xa4\xa0\xe1\x16\x2c\xd3\x7b\xd3\xcc\x1e\xcc\x02\x72\xf1\x1e\x13\xa3\x4d\xdf\xf3\x44\x0d\x0c\x0c\x78\x95\x3f\xd4\xfc\xc7\xb2\x7e\x03\x33\xe4\xed\x35\x88\xfa\x73\xea\xa2\xd9\x61\xf1\x83\xec\xef\x22\xf5\xa0\x74\x62\xc0\x7a\x12\x59\xf5\x0d\x90\x69\xad\xb3\x46\x8e\x68\xec\x40\xe0\xb7\x2b\xb1\x62\x01\xbb\xa7\x34\xe9\xef\x14\x8e\xe2\x81\xd9\x87\xdf\xa3\xb8\x77\x10\xa4\xbe\x7f\x94\x1c\x2e\xa7\x8f\x7f\x42\x62\xf5\xf4\xb8\x10\xd6\x3d\x37\xfc\xc6\x81\xb6\x5c\x71\x3c\xaa\x2d\x8d\x88\xac\x57\x12\xcd\xd7\xa3\x97\xe8\x78\x1d\x97\x65\x85\x86\x27\x91\xba\xbb\x5b\x6c\x45\x55\xca\xc2\x57\x7a\x8b\x32\x07\x43\x74\x53\x0c\xc6\xc8\x76\x19\x1f\x54\x69\x5b\x5f\x11\xca\x0b\x6b\x58\xba\xd8\x2d\x19\x4c\x7f\x16\x8c\x8d\x9a\x7b\xe2\xda\xfb\x38\xaf\xc1\xf9\xc9\x3e\xbf\xf7\xe8\x01\x29\x6d\xa9\x54\x6d\x72\x62\x82\xbc\xe1\xa0\xfb\x9a\x59\x0f\x6c\xa4\x22\x25\x70\x62\xc2\x9e\xc4\x13\x76\x1c\xb0\x7a\x6a\xd4\x0f\xca\xa9\x0a\xac\xc3\x72\xd0\x9f\x9b\x8b\xa6\xf0\xb7\x14\xd0\x5f\xa8\xfe\x8e\x49\xed\x58\x93\xab\xfb\xb5\xe9\x5b\x99\x39\x51\x8e\x75\x44\x89\x65\x2d\x9e\x75\x68\xf6\xaf\x8c\xdb\xef\xc4\x6f\x1b\xe1\xf8\x7c\xd7\x86\xd6\x9d\x43\xb2\xe4\xa0\x80\x0b\x86\x92\x29\x40\xa7\x9d\xb0\x15\x8b\x02\x46\xa1\xe1\x9d\xfd\x46\xc6\x8b\x00\xc7\x19\xd1\xd6\x9e\xe0\xb5\xb9\x56\xc1\xe4\xfb\x81\x02\xd4\x52\xf8\xd4\x1f\xdd\x95\xcb\x1d\x54\xa3\xab\x0b\x6a\x4c\x0a\xc9\x17\x17\x93\xc3\xda\x4a\xdc\x2f\xdb\x3a\xd7\xfc\x99\x06\x80\xba\x0c\x61\xf0\x11\xd2\x61\xc5\x14\xa4\x48\x1d\x64\x7c\x57\x78\xd7\x92\x6d\x55\x8c\xd7\xb8\xf1\xaa\xb6\xa7\xd3\x8e\x02\x1a\xe8\x97\x5e\x30\x96\x1b\x77\x82\xc8\xde\xd2\x24\xb2\xef\x42\x20\x49\xca\x5a\x40\x6d\x38\x0e\x5e\xe2\x6d\x60\xae\xb4\x99\x18\xb1\xff\x18\x0b\x19\x2f\x56\x61\x61\xc5\xac\xc3\x00\x6c\x03\xa8\xa1\xda\xe7\x6f\xd2\xdb\xf4\xd2\x98\x79\xdb\xce\xac\x5a\xde\x8b\x4b\xbb\xee\x87\xd4\xf5\x3c\x99\x3c\xa3\xc3\xa8\x5b\x24\x95\x43\x73\x26\x94\x37\x17\xb7\x10\xcd\xc3\xfd\x46\x25\x05\x38\xfb\x4d\x5b\x10\xc1\xcc\x1a\xcd\xf9\xca\xc2\xcc\x6a\x57\x50\x51\x18\xb1\xfb\x82\xf3\x87\xfe\x22\xad\x81\x3e\xa5\x48\x96\xde\x18\x7a\x32\xc3\xc9\xcb\x66\x36\x9a\x97\x19\x37\x40\xed\x8b\xb5\xda\xc5\xfc\x74\x49\x48\xfb\x2f\xc7\xff\x97\xe1\x51\x19\x4a\x15\x2b\xf8\xc6\xb8\x6f\xf4\xa4\x97\x4d\xc9\x06\x28\x04\xc8\x24\xf4\x0d\x1c\xf5\xf5\x52\x0d\xab\x13\xe4\x13\x5b\x79\x3f\x1f\x58\x28\x39\x98\xf6\xbe\x38\xa3\x41\xc7\x78\xd4\x05\xfe\x0b\xd0\xb9\x4f\x5d\x6c\x5f\xd4\xd5\x38\x1e\xd3\xe1\xda\x96\x05\xe9\x76\x8b\x5a\x95\x16\xcd\x6e\x70\x0f\xd2\xc3\x3a\x32\xd2\xd1\xc4\x8f\xd4\x89\xde\x35\xb2\xb4\x7c\x57\x46\x9e\x07\x8d\x9e\x34\xf1\x8b\x1a\x8e\xfd\x57\xaa\x58\xe3\x14\x46\x6d\x06\xcc\x84\xe5\x0e\x44\xf8\x82\x87\x2f\x8e\xc5\x83\xf9\x90\x5f\xa5\x30\x30\x67\x9a\x6f\x91\xa5\xf9\x32\xce\x30\x68\xd0\xd5\x93\xaa\x9b\x2c\xfa\xfd\xcc\x36\xac\x4b\x28\xb1\x3e\xdb\xbd\xaa\x80\x98\xfd\x23\x59\x51\x02\x12\xee\xb0\x90\x75\x98\x4d\xba\x9a\x33\x52\x41\xf7\x26\x9e\x5a\x05\x3c\x97\x62\x1a\xfb\x6e\xb7\x1b\x5a\x69\x46\x3f\x7a\x1f\xb2\x53\x73\xe2\xbd\xb4\xe4\x6b\xa3\xa2\x5d\x11\x90\x4e\xea\xf1\xe2\x05\x1d\xd3\xde\x05\x69\x84\xc6\x98\x89\xd2\x6f\x94\x21\x30\x84\xd4\x32\x46\xe5\xcb\xd7\x74\x96\x09\xd3\x7b\x82\x84\xd4\xed\x42\xf4\xa1\x21\xa3\x33\x1d\x39\x0b\xdf\x08\xd5\x7d\xec\x2b\xc7\x58\x46\x00\x21\xff\x98\xe1\x8e\x14\x2d\x78\x46\x78\xb4\x4d\x81\xba\xfa\xe6\x39\x25\x15\x7a\x28\x0d\x61\x28\x9a\x07\x7d\xee\x89\xc8\x3b\xc1\x57\x56\x6b\xa3\x6c\x4c\x88\xaf\xa0\xd9\xf2\xf6\xac\xbe\xa0\xf4\x16\x81\xba\x74\x50\xba\x1f\x44\x7f\xf0\xea\x35\xb9\x28\x29\xab\x52\xab\xfa\x03\xf4\xca\xc4\xee\x58\xee\xf7\xb5\xba\xc2\xbe\x68\x39\x2f\xa9\x56\x7e\x47\x23\x9d\x66\x81\xd0\x48\x30\x68\xa8\x7e\xf2\xbe\xe8\x6d\x00\x53\xff\x39\x81\x4d\x1d\xf3\x67\x9b\x00\xf3\x09\xb0\x88\xc1\x0d\x48\x4e\x1c\xa3\x2e\x94\x24\xb3\x9d\x07\x4d\xc8\x55\x5d\x52\xbd\x29\x6e\x96\x16\xc4\x23\x0c\x0f\xef\x7b\x9e\x39\x7c\xb7\x18\x52\xcb\xe9\x9d\x9d\xc3\x93\x9c\x6b\x14\xcf\xb6\xd5\x9c\x9f\x32\x7b\x74\xe8\xdb\xa3\x57\x88\xbd\x1a\x90\x6b\x9b\xbb\xad\xb0\x1d\x45\x4e\xe6\x3e\xfe\xe7\x9e\xf6\x92\x9f\x6d\x75\xee\x4b\xb4\x00\xfc\x5c\x64\x2c\xb1\x3a\x97\x33\x1f\x22\x46\xad\xcc\xf3\xbc\x2c\x70\xe0\x3d\xf4\xea\x28\x22\x7f\x48\x42\x83\xc7\xa6\x0f\x42\xb6\x0c\xaf\x40\x56\xd1\x61\x00\xda\x18\x02\x31\xd6\xa9\x72\xa3\x83\x75\x0d\x67\x40\x4c\xeb\x18\x7e\xa2\xb9\xde\x6a\xd7\xa8\xeb\x03\x31\xb3\x6c\x86\x66\xe7\x1f\xfb\xe1\xb8\x5c\x41\xfc\x1e\x0a\x84\x16\xd8\xee\xa1\x24\x6a\x45\x21\x72\x6f\xba\x9a\x46\x5e\x0b\x85\xbe\xde\xd9\x44\x21\x23\x7d\xdb\x37\xe6\x72\xfb\xa1\xde\xc7\x4f\xf8\xc9\x93\x8d\xb8\x8f\x2d\x36\x4f\xe4\x30\x5f\x8d\x8c\xa7\xb1\xc1\x23\x2d\xa9\x95\x59\x64\xae\x0c\x9a\xaa\xcb\x20\xb9\x48\x59\x06\xad\xf9\x00\x56\x88\xf4\x0f\x93\x85\x1c\x86\xd9\x5f\x4c\x6c\xe7\x9c\x80\xd9\x88\xe3\x68\xa7\x35\x25\x6e\xc2\x23\x95\xfc\xf6\x16\xd9\xd8\x4d\x96\x31\xa3\xb6\x74\x2c\xc4\x7c\x9b\x93\x16\x8b\x6a\xd5\x6c\xda\x29\x41\xb0\xab\xc8\xb5\xf1\x62\x76\x8a\x51\x89\x5e\x47\x5b\xb9\x86\x96\xc5\x28\x8d\xc8\x0b\x45\xe9\x8b\x73\xdc\xef\x9a\x3e\xdf\x01\x47\x9f\x43\x5d\xda\x25\x74\x85\xc4\xe2\x63\x04\xbb\x50\xc7\x8f\x87\x47\xe7\xa7\xd9\x77\xab\x1c\xde\xd5\x89\xba\x52\xaf\xa5\xdd\xb5\x8c\x69\x13\x40\xfb\x4a\x4e\x97\x8b\xfc\x9a\x8f\xe8\x1d\xbc\x11\xbc\x40\x01\xb2\x64\x3c\x34\xc2\x89\x82\xed\x69\x91\xec\x8b\xc3\x8b\xb6\xbd\x81\xac\x77\xb8\xe1\x50\xb2\x97\x65\xb4\x6a\x68\xcb\x8a\xee\x7d\x4a\x57\x3a\x16\x42\x0d\xf3\xb1\xd0\xd6\x28\x6d\x2e\x83\xff\x7a\x98\xd8\x50\x1f\x88\xfd\x5f\x86\xff\x0e\x00\x00\xff\xff\x4f\x61\x5a\xed\xb9\x08\x00\x00")

func _dataPublic_keysPemBytes() ([]byte, error) {
	return bindataRead(
		__dataPublic_keysPem,
		"_data/public_keys.pem",
	)
}

func _dataPublic_keysPem() (*asset, error) {
	bytes, err := _dataPublic_keysPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/public_keys.pem", size: 2233, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_data/public_keys.pem": _dataPublic_keysPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_data": &bintree{nil, map[string]*bintree{
		"public_keys.pem": &bintree{_dataPublic_keysPem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
