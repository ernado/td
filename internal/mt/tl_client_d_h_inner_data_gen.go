// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// ClientDHInnerData represents TL type `client_DH_inner_data#6643b654`.
type ClientDHInnerData struct {
	// Nonce field of ClientDHInnerData.
	Nonce bin.Int128
	// ServerNonce field of ClientDHInnerData.
	ServerNonce bin.Int128
	// RetryID field of ClientDHInnerData.
	RetryID int64
	// GB field of ClientDHInnerData.
	GB []byte
}

// ClientDHInnerDataTypeID is TL type id of ClientDHInnerData.
const ClientDHInnerDataTypeID = 0x6643b654

func (c *ClientDHInnerData) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Nonce == bin.Int128{}) {
		return false
	}
	if !(c.ServerNonce == bin.Int128{}) {
		return false
	}
	if !(c.RetryID == 0) {
		return false
	}
	if !(c.GB == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ClientDHInnerData) String() string {
	if c == nil {
		return "ClientDHInnerData(nil)"
	}
	type Alias ClientDHInnerData
	return fmt.Sprintf("ClientDHInnerData%+v", Alias(*c))
}

// FillFrom fills ClientDHInnerData from given interface.
func (c *ClientDHInnerData) FillFrom(from interface {
	GetNonce() (value bin.Int128)
	GetServerNonce() (value bin.Int128)
	GetRetryID() (value int64)
	GetGB() (value []byte)
}) {
	c.Nonce = from.GetNonce()
	c.ServerNonce = from.GetServerNonce()
	c.RetryID = from.GetRetryID()
	c.GB = from.GetGB()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ClientDHInnerData) TypeID() uint32 {
	return ClientDHInnerDataTypeID
}

// TypeName returns name of type in TL schema.
func (*ClientDHInnerData) TypeName() string {
	return "client_DH_inner_data"
}

// TypeInfo returns info about TL type.
func (c *ClientDHInnerData) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "client_DH_inner_data",
		ID:   ClientDHInnerDataTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Nonce",
			SchemaName: "nonce",
		},
		{
			Name:       "ServerNonce",
			SchemaName: "server_nonce",
		},
		{
			Name:       "RetryID",
			SchemaName: "retry_id",
		},
		{
			Name:       "GB",
			SchemaName: "g_b",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ClientDHInnerData) Encode(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "client_DH_inner_data#6643b654",
		}
	}
	b.PutID(ClientDHInnerDataTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ClientDHInnerData) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "client_DH_inner_data#6643b654",
		}
	}
	b.PutInt128(c.Nonce)
	b.PutInt128(c.ServerNonce)
	b.PutLong(c.RetryID)
	b.PutBytes(c.GB)
	return nil
}

// GetNonce returns value of Nonce field.
func (c *ClientDHInnerData) GetNonce() (value bin.Int128) {
	return c.Nonce
}

// GetServerNonce returns value of ServerNonce field.
func (c *ClientDHInnerData) GetServerNonce() (value bin.Int128) {
	return c.ServerNonce
}

// GetRetryID returns value of RetryID field.
func (c *ClientDHInnerData) GetRetryID() (value int64) {
	return c.RetryID
}

// GetGB returns value of GB field.
func (c *ClientDHInnerData) GetGB() (value []byte) {
	return c.GB
}

// Decode implements bin.Decoder.
func (c *ClientDHInnerData) Decode(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "client_DH_inner_data#6643b654",
		}
	}
	if err := b.ConsumeID(ClientDHInnerDataTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "client_DH_inner_data#6643b654",
			Underlying: err,
		}
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ClientDHInnerData) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "client_DH_inner_data#6643b654",
		}
	}
	{
		value, err := b.Int128()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "client_DH_inner_data#6643b654",
				FieldName:  "nonce",
				Underlying: err,
			}
		}
		c.Nonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "client_DH_inner_data#6643b654",
				FieldName:  "server_nonce",
				Underlying: err,
			}
		}
		c.ServerNonce = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "client_DH_inner_data#6643b654",
				FieldName:  "retry_id",
				Underlying: err,
			}
		}
		c.RetryID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "client_DH_inner_data#6643b654",
				FieldName:  "g_b",
				Underlying: err,
			}
		}
		c.GB = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ClientDHInnerData.
var (
	_ bin.Encoder     = &ClientDHInnerData{}
	_ bin.Decoder     = &ClientDHInnerData{}
	_ bin.BareEncoder = &ClientDHInnerData{}
	_ bin.BareDecoder = &ClientDHInnerData{}
)
