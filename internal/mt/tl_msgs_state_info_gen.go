// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MsgsStateInfo represents TL type `msgs_state_info#4deb57d`.
type MsgsStateInfo struct {
	// ReqMsgID field of MsgsStateInfo.
	ReqMsgID int64
	// Info field of MsgsStateInfo.
	Info []byte
}

// MsgsStateInfoTypeID is TL type id of MsgsStateInfo.
const MsgsStateInfoTypeID = 0x4deb57d

func (m *MsgsStateInfo) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.ReqMsgID == 0) {
		return false
	}
	if !(m.Info == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MsgsStateInfo) String() string {
	if m == nil {
		return "MsgsStateInfo(nil)"
	}
	type Alias MsgsStateInfo
	return fmt.Sprintf("MsgsStateInfo%+v", Alias(*m))
}

// FillFrom fills MsgsStateInfo from given interface.
func (m *MsgsStateInfo) FillFrom(from interface {
	GetReqMsgID() (value int64)
	GetInfo() (value []byte)
}) {
	m.ReqMsgID = from.GetReqMsgID()
	m.Info = from.GetInfo()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MsgsStateInfo) TypeID() uint32 {
	return MsgsStateInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*MsgsStateInfo) TypeName() string {
	return "msgs_state_info"
}

// TypeInfo returns info about TL type.
func (m *MsgsStateInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "msgs_state_info",
		ID:   MsgsStateInfoTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ReqMsgID",
			SchemaName: "req_msg_id",
		},
		{
			Name:       "Info",
			SchemaName: "info",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MsgsStateInfo) Encode(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "msgs_state_info#4deb57d",
		}
	}
	b.PutID(MsgsStateInfoTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MsgsStateInfo) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "msgs_state_info#4deb57d",
		}
	}
	b.PutLong(m.ReqMsgID)
	b.PutBytes(m.Info)
	return nil
}

// GetReqMsgID returns value of ReqMsgID field.
func (m *MsgsStateInfo) GetReqMsgID() (value int64) {
	return m.ReqMsgID
}

// GetInfo returns value of Info field.
func (m *MsgsStateInfo) GetInfo() (value []byte) {
	return m.Info
}

// Decode implements bin.Decoder.
func (m *MsgsStateInfo) Decode(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "msgs_state_info#4deb57d",
		}
	}
	if err := b.ConsumeID(MsgsStateInfoTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "msgs_state_info#4deb57d",
			Underlying: err,
		}
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MsgsStateInfo) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "msgs_state_info#4deb57d",
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "msgs_state_info#4deb57d",
				FieldName:  "req_msg_id",
				Underlying: err,
			}
		}
		m.ReqMsgID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "msgs_state_info#4deb57d",
				FieldName:  "info",
				Underlying: err,
			}
		}
		m.Info = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MsgsStateInfo.
var (
	_ bin.Encoder     = &MsgsStateInfo{}
	_ bin.Decoder     = &MsgsStateInfo{}
	_ bin.BareEncoder = &MsgsStateInfo{}
	_ bin.BareDecoder = &MsgsStateInfo{}
)
