// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// GetFutureSaltsRequest represents TL type `get_future_salts#b921bd04`.
type GetFutureSaltsRequest struct {
	// Num field of GetFutureSaltsRequest.
	Num int
}

// GetFutureSaltsRequestTypeID is TL type id of GetFutureSaltsRequest.
const GetFutureSaltsRequestTypeID = 0xb921bd04

func (g *GetFutureSaltsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Num == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetFutureSaltsRequest) String() string {
	if g == nil {
		return "GetFutureSaltsRequest(nil)"
	}
	type Alias GetFutureSaltsRequest
	return fmt.Sprintf("GetFutureSaltsRequest%+v", Alias(*g))
}

// FillFrom fills GetFutureSaltsRequest from given interface.
func (g *GetFutureSaltsRequest) FillFrom(from interface {
	GetNum() (value int)
}) {
	g.Num = from.GetNum()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetFutureSaltsRequest) TypeID() uint32 {
	return GetFutureSaltsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetFutureSaltsRequest) TypeName() string {
	return "get_future_salts"
}

// TypeInfo returns info about TL type.
func (g *GetFutureSaltsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "get_future_salts",
		ID:   GetFutureSaltsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Num",
			SchemaName: "num",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetFutureSaltsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "get_future_salts#b921bd04",
		}
	}
	b.PutID(GetFutureSaltsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetFutureSaltsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "get_future_salts#b921bd04",
		}
	}
	b.PutInt(g.Num)
	return nil
}

// GetNum returns value of Num field.
func (g *GetFutureSaltsRequest) GetNum() (value int) {
	return g.Num
}

// Decode implements bin.Decoder.
func (g *GetFutureSaltsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "get_future_salts#b921bd04",
		}
	}
	if err := b.ConsumeID(GetFutureSaltsRequestTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "get_future_salts#b921bd04",
			Underlying: err,
		}
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetFutureSaltsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "get_future_salts#b921bd04",
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "get_future_salts#b921bd04",
				FieldName:  "num",
				Underlying: err,
			}
		}
		g.Num = value
	}
	return nil
}

// Ensuring interfaces in compile-time for GetFutureSaltsRequest.
var (
	_ bin.Encoder     = &GetFutureSaltsRequest{}
	_ bin.Decoder     = &GetFutureSaltsRequest{}
	_ bin.BareEncoder = &GetFutureSaltsRequest{}
	_ bin.BareDecoder = &GetFutureSaltsRequest{}
)
