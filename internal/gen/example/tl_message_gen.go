// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// Message represents TL type `message#ec200d96`.
//
// See https://localhost:80/doc/constructor/message for reference.
type Message struct {
	// Err field of Message.
	Err Error
}

// MessageTypeID is TL type id of Message.
const MessageTypeID = 0xec200d96

func (m *Message) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Err.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *Message) String() string {
	if m == nil {
		return "Message(nil)"
	}
	type Alias Message
	return fmt.Sprintf("Message%+v", Alias(*m))
}

// FillFrom fills Message from given interface.
func (m *Message) FillFrom(from interface {
	GetErr() (value Error)
}) {
	m.Err = from.GetErr()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*Message) TypeID() uint32 {
	return MessageTypeID
}

// TypeName returns name of type in TL schema.
func (*Message) TypeName() string {
	return "message"
}

// TypeInfo returns info about TL type.
func (m *Message) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "message",
		ID:   MessageTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Err",
			SchemaName: "err",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *Message) Encode(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "message#ec200d96",
		}
	}
	b.PutID(MessageTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *Message) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "message#ec200d96",
		}
	}
	if err := m.Err.Encode(b); err != nil {
		return &bin.FieldError{
			Action:     "encode",
			TypeName:   "message#ec200d96",
			FieldName:  "err",
			Underlying: err,
		}
	}
	return nil
}

// GetErr returns value of Err field.
func (m *Message) GetErr() (value Error) {
	return m.Err
}

// Decode implements bin.Decoder.
func (m *Message) Decode(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "message#ec200d96",
		}
	}
	if err := b.ConsumeID(MessageTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "message#ec200d96",
			Underlying: err,
		}
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *Message) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "message#ec200d96",
		}
	}
	{
		if err := m.Err.Decode(b); err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "message#ec200d96",
				FieldName:  "err",
				Underlying: err,
			}
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for Message.
var (
	_ bin.Encoder     = &Message{}
	_ bin.Decoder     = &Message{}
	_ bin.BareEncoder = &Message{}
	_ bin.BareDecoder = &Message{}
)
