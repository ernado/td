// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// GetUpdatesResp represents TL type `getUpdatesResp#300bb5e1`.
//
// See https://localhost:80/doc/constructor/getUpdatesResp for reference.
type GetUpdatesResp struct {
	// Updates field of GetUpdatesResp.
	Updates []AbstractMessageClass
}

// GetUpdatesRespTypeID is TL type id of GetUpdatesResp.
const GetUpdatesRespTypeID = 0x300bb5e1

func (g *GetUpdatesResp) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Updates == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetUpdatesResp) String() string {
	if g == nil {
		return "GetUpdatesResp(nil)"
	}
	type Alias GetUpdatesResp
	return fmt.Sprintf("GetUpdatesResp%+v", Alias(*g))
}

// FillFrom fills GetUpdatesResp from given interface.
func (g *GetUpdatesResp) FillFrom(from interface {
	GetUpdates() (value []AbstractMessageClass)
}) {
	g.Updates = from.GetUpdates()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetUpdatesResp) TypeID() uint32 {
	return GetUpdatesRespTypeID
}

// TypeName returns name of type in TL schema.
func (*GetUpdatesResp) TypeName() string {
	return "getUpdatesResp"
}

// TypeInfo returns info about TL type.
func (g *GetUpdatesResp) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getUpdatesResp",
		ID:   GetUpdatesRespTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Updates",
			SchemaName: "updates",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetUpdatesResp) Encode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "getUpdatesResp#300bb5e1",
		}
	}
	b.PutID(GetUpdatesRespTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetUpdatesResp) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "encode",
			TypeName: "getUpdatesResp#300bb5e1",
		}
	}
	b.PutVectorHeader(len(g.Updates))
	for idx, v := range g.Updates {
		if v == nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "getUpdatesResp#300bb5e1",
				FieldName: "updates",
				Underlying: &bin.IndexError{
					Index: idx,
					Underlying: &bin.NilError{
						Action:   "encode",
						TypeName: "Vector<AbstractMessage>",
					},
				},
			}
		}
		if err := v.Encode(b); err != nil {
			return &bin.FieldError{
				Action:    "encode",
				TypeName:  "getUpdatesResp#300bb5e1",
				FieldName: "updates",
				BareField: false,
				Underlying: &bin.IndexError{
					Index:      idx,
					Underlying: err,
				},
			}
		}
	}
	return nil
}

// GetUpdates returns value of Updates field.
func (g *GetUpdatesResp) GetUpdates() (value []AbstractMessageClass) {
	return g.Updates
}

// MapUpdates returns field Updates wrapped in AbstractMessageClassArray helper.
func (g *GetUpdatesResp) MapUpdates() (value AbstractMessageClassArray) {
	return AbstractMessageClassArray(g.Updates)
}

// Decode implements bin.Decoder.
func (g *GetUpdatesResp) Decode(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "getUpdatesResp#300bb5e1",
		}
	}
	if err := b.ConsumeID(GetUpdatesRespTypeID); err != nil {
		return &bin.DecodeError{
			TypeName:   "getUpdatesResp#300bb5e1",
			Underlying: err,
		}
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetUpdatesResp) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return &bin.NilError{
			Action:   "decode",
			TypeName: "getUpdatesResp#300bb5e1",
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return &bin.FieldError{
				Action:     "decode",
				TypeName:   "getUpdatesResp#300bb5e1",
				FieldName:  "updates",
				Underlying: err,
			}
		}

		if headerLen > 0 {
			g.Updates = make([]AbstractMessageClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeAbstractMessage(b)
			if err != nil {
				return &bin.FieldError{
					Action:     "decode",
					TypeName:   "getUpdatesResp#300bb5e1",
					FieldName:  "updates",
					Underlying: err,
				}
			}
			g.Updates = append(g.Updates, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for GetUpdatesResp.
var (
	_ bin.Encoder     = &GetUpdatesResp{}
	_ bin.Decoder     = &GetUpdatesResp{}
	_ bin.BareEncoder = &GetUpdatesResp{}
	_ bin.BareDecoder = &GetUpdatesResp{}
)
