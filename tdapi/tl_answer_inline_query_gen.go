// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AnswerInlineQueryRequest represents TL type `answerInlineQuery#18ec5846`.
type AnswerInlineQueryRequest struct {
	// Identifier of the inline query
	InlineQueryID int64
	// True, if the result of the query can be cached for the specified user
	IsPersonal bool
	// The results of the query
	Results []InputInlineQueryResultClass
	// Allowed time to cache the results of the query, in seconds
	CacheTime int32
	// Offset for the next inline query; pass an empty string if there are no more results
	NextOffset string
	// If non-empty, this text must be shown on the button that opens a private chat with the
	// bot and sends a start message to the bot with the parameter switch_pm_parameter
	SwitchPmText string
	// The parameter for the bot start message
	SwitchPmParameter string
}

// AnswerInlineQueryRequestTypeID is TL type id of AnswerInlineQueryRequest.
const AnswerInlineQueryRequestTypeID = 0x18ec5846

// Ensuring interfaces in compile-time for AnswerInlineQueryRequest.
var (
	_ bin.Encoder     = &AnswerInlineQueryRequest{}
	_ bin.Decoder     = &AnswerInlineQueryRequest{}
	_ bin.BareEncoder = &AnswerInlineQueryRequest{}
	_ bin.BareDecoder = &AnswerInlineQueryRequest{}
)

func (a *AnswerInlineQueryRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.InlineQueryID == 0) {
		return false
	}
	if !(a.IsPersonal == false) {
		return false
	}
	if !(a.Results == nil) {
		return false
	}
	if !(a.CacheTime == 0) {
		return false
	}
	if !(a.NextOffset == "") {
		return false
	}
	if !(a.SwitchPmText == "") {
		return false
	}
	if !(a.SwitchPmParameter == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AnswerInlineQueryRequest) String() string {
	if a == nil {
		return "AnswerInlineQueryRequest(nil)"
	}
	type Alias AnswerInlineQueryRequest
	return fmt.Sprintf("AnswerInlineQueryRequest%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AnswerInlineQueryRequest) TypeID() uint32 {
	return AnswerInlineQueryRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AnswerInlineQueryRequest) TypeName() string {
	return "answerInlineQuery"
}

// TypeInfo returns info about TL type.
func (a *AnswerInlineQueryRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "answerInlineQuery",
		ID:   AnswerInlineQueryRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "InlineQueryID",
			SchemaName: "inline_query_id",
		},
		{
			Name:       "IsPersonal",
			SchemaName: "is_personal",
		},
		{
			Name:       "Results",
			SchemaName: "results",
		},
		{
			Name:       "CacheTime",
			SchemaName: "cache_time",
		},
		{
			Name:       "NextOffset",
			SchemaName: "next_offset",
		},
		{
			Name:       "SwitchPmText",
			SchemaName: "switch_pm_text",
		},
		{
			Name:       "SwitchPmParameter",
			SchemaName: "switch_pm_parameter",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AnswerInlineQueryRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode answerInlineQuery#18ec5846 as nil")
	}
	b.PutID(AnswerInlineQueryRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AnswerInlineQueryRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode answerInlineQuery#18ec5846 as nil")
	}
	b.PutLong(a.InlineQueryID)
	b.PutBool(a.IsPersonal)
	b.PutInt(len(a.Results))
	for idx, v := range a.Results {
		if v == nil {
			return fmt.Errorf("unable to encode answerInlineQuery#18ec5846: field results element with index %d is nil", idx)
		}
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare answerInlineQuery#18ec5846: field results element with index %d: %w", idx, err)
		}
	}
	b.PutInt32(a.CacheTime)
	b.PutString(a.NextOffset)
	b.PutString(a.SwitchPmText)
	b.PutString(a.SwitchPmParameter)
	return nil
}

// Decode implements bin.Decoder.
func (a *AnswerInlineQueryRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode answerInlineQuery#18ec5846 to nil")
	}
	if err := b.ConsumeID(AnswerInlineQueryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AnswerInlineQueryRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode answerInlineQuery#18ec5846 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field inline_query_id: %w", err)
		}
		a.InlineQueryID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field is_personal: %w", err)
		}
		a.IsPersonal = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field results: %w", err)
		}

		if headerLen > 0 {
			a.Results = make([]InputInlineQueryResultClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeInputInlineQueryResult(b)
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field results: %w", err)
			}
			a.Results = append(a.Results, value)
		}
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field cache_time: %w", err)
		}
		a.CacheTime = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field next_offset: %w", err)
		}
		a.NextOffset = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field switch_pm_text: %w", err)
		}
		a.SwitchPmText = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field switch_pm_parameter: %w", err)
		}
		a.SwitchPmParameter = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AnswerInlineQueryRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode answerInlineQuery#18ec5846 as nil")
	}
	b.ObjStart()
	b.PutID("answerInlineQuery")
	b.FieldStart("inline_query_id")
	b.PutLong(a.InlineQueryID)
	b.FieldStart("is_personal")
	b.PutBool(a.IsPersonal)
	b.FieldStart("results")
	b.ArrStart()
	for idx, v := range a.Results {
		if v == nil {
			return fmt.Errorf("unable to encode answerInlineQuery#18ec5846: field results element with index %d is nil", idx)
		}
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode answerInlineQuery#18ec5846: field results element with index %d: %w", idx, err)
		}
	}
	b.ArrEnd()
	b.FieldStart("cache_time")
	b.PutInt32(a.CacheTime)
	b.FieldStart("next_offset")
	b.PutString(a.NextOffset)
	b.FieldStart("switch_pm_text")
	b.PutString(a.SwitchPmText)
	b.FieldStart("switch_pm_parameter")
	b.PutString(a.SwitchPmParameter)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AnswerInlineQueryRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode answerInlineQuery#18ec5846 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("answerInlineQuery"); err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: %w", err)
			}
		case "inline_query_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field inline_query_id: %w", err)
			}
			a.InlineQueryID = value
		case "is_personal":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field is_personal: %w", err)
			}
			a.IsPersonal = value
		case "results":
			if err := b.Arr(func(b tdjson.Decoder) error {
				value, err := DecodeTDLibJSONInputInlineQueryResult(b)
				if err != nil {
					return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field results: %w", err)
				}
				a.Results = append(a.Results, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field results: %w", err)
			}
		case "cache_time":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field cache_time: %w", err)
			}
			a.CacheTime = value
		case "next_offset":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field next_offset: %w", err)
			}
			a.NextOffset = value
		case "switch_pm_text":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field switch_pm_text: %w", err)
			}
			a.SwitchPmText = value
		case "switch_pm_parameter":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode answerInlineQuery#18ec5846: field switch_pm_parameter: %w", err)
			}
			a.SwitchPmParameter = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetInlineQueryID returns value of InlineQueryID field.
func (a *AnswerInlineQueryRequest) GetInlineQueryID() (value int64) {
	return a.InlineQueryID
}

// GetIsPersonal returns value of IsPersonal field.
func (a *AnswerInlineQueryRequest) GetIsPersonal() (value bool) {
	return a.IsPersonal
}

// GetResults returns value of Results field.
func (a *AnswerInlineQueryRequest) GetResults() (value []InputInlineQueryResultClass) {
	return a.Results
}

// GetCacheTime returns value of CacheTime field.
func (a *AnswerInlineQueryRequest) GetCacheTime() (value int32) {
	return a.CacheTime
}

// GetNextOffset returns value of NextOffset field.
func (a *AnswerInlineQueryRequest) GetNextOffset() (value string) {
	return a.NextOffset
}

// GetSwitchPmText returns value of SwitchPmText field.
func (a *AnswerInlineQueryRequest) GetSwitchPmText() (value string) {
	return a.SwitchPmText
}

// GetSwitchPmParameter returns value of SwitchPmParameter field.
func (a *AnswerInlineQueryRequest) GetSwitchPmParameter() (value string) {
	return a.SwitchPmParameter
}

// AnswerInlineQuery invokes method answerInlineQuery#18ec5846 returning error if any.
func (c *Client) AnswerInlineQuery(ctx context.Context, request *AnswerInlineQueryRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
