// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AddPendingPaidMessageReactionRequest represents TL type `addPendingPaidMessageReaction#66548919`.
type AddPendingPaidMessageReactionRequest struct {
	// Identifier of the chat to which the message belongs
	ChatID int64
	// Identifier of the message
	MessageID int64
	// Number of Telegram Stars to be used for the reaction. The total number of pending paid
	// reactions must not exceed getOption("paid_reaction_star_count_max")
	StarCount int64
	// Pass true if the user didn't choose anonymity explicitly, for example, the reaction is
	// set from the message bubble
	UseDefaultIsAnonymous bool
	// Pass true to make paid reaction of the user on the message anonymous; pass false to
	// make the user's profile visible among top reactors. Ignored if
	// use_default_is_anonymous == true
	IsAnonymous bool
}

// AddPendingPaidMessageReactionRequestTypeID is TL type id of AddPendingPaidMessageReactionRequest.
const AddPendingPaidMessageReactionRequestTypeID = 0x66548919

// Ensuring interfaces in compile-time for AddPendingPaidMessageReactionRequest.
var (
	_ bin.Encoder     = &AddPendingPaidMessageReactionRequest{}
	_ bin.Decoder     = &AddPendingPaidMessageReactionRequest{}
	_ bin.BareEncoder = &AddPendingPaidMessageReactionRequest{}
	_ bin.BareDecoder = &AddPendingPaidMessageReactionRequest{}
)

func (a *AddPendingPaidMessageReactionRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.ChatID == 0) {
		return false
	}
	if !(a.MessageID == 0) {
		return false
	}
	if !(a.StarCount == 0) {
		return false
	}
	if !(a.UseDefaultIsAnonymous == false) {
		return false
	}
	if !(a.IsAnonymous == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AddPendingPaidMessageReactionRequest) String() string {
	if a == nil {
		return "AddPendingPaidMessageReactionRequest(nil)"
	}
	type Alias AddPendingPaidMessageReactionRequest
	return fmt.Sprintf("AddPendingPaidMessageReactionRequest%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AddPendingPaidMessageReactionRequest) TypeID() uint32 {
	return AddPendingPaidMessageReactionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AddPendingPaidMessageReactionRequest) TypeName() string {
	return "addPendingPaidMessageReaction"
}

// TypeInfo returns info about TL type.
func (a *AddPendingPaidMessageReactionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "addPendingPaidMessageReaction",
		ID:   AddPendingPaidMessageReactionRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "StarCount",
			SchemaName: "star_count",
		},
		{
			Name:       "UseDefaultIsAnonymous",
			SchemaName: "use_default_is_anonymous",
		},
		{
			Name:       "IsAnonymous",
			SchemaName: "is_anonymous",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AddPendingPaidMessageReactionRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addPendingPaidMessageReaction#66548919 as nil")
	}
	b.PutID(AddPendingPaidMessageReactionRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AddPendingPaidMessageReactionRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addPendingPaidMessageReaction#66548919 as nil")
	}
	b.PutInt53(a.ChatID)
	b.PutInt53(a.MessageID)
	b.PutInt53(a.StarCount)
	b.PutBool(a.UseDefaultIsAnonymous)
	b.PutBool(a.IsAnonymous)
	return nil
}

// Decode implements bin.Decoder.
func (a *AddPendingPaidMessageReactionRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addPendingPaidMessageReaction#66548919 to nil")
	}
	if err := b.ConsumeID(AddPendingPaidMessageReactionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AddPendingPaidMessageReactionRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addPendingPaidMessageReaction#66548919 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field chat_id: %w", err)
		}
		a.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field message_id: %w", err)
		}
		a.MessageID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field star_count: %w", err)
		}
		a.StarCount = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field use_default_is_anonymous: %w", err)
		}
		a.UseDefaultIsAnonymous = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field is_anonymous: %w", err)
		}
		a.IsAnonymous = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AddPendingPaidMessageReactionRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode addPendingPaidMessageReaction#66548919 as nil")
	}
	b.ObjStart()
	b.PutID("addPendingPaidMessageReaction")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(a.ChatID)
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(a.MessageID)
	b.Comma()
	b.FieldStart("star_count")
	b.PutInt53(a.StarCount)
	b.Comma()
	b.FieldStart("use_default_is_anonymous")
	b.PutBool(a.UseDefaultIsAnonymous)
	b.Comma()
	b.FieldStart("is_anonymous")
	b.PutBool(a.IsAnonymous)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AddPendingPaidMessageReactionRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode addPendingPaidMessageReaction#66548919 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("addPendingPaidMessageReaction"); err != nil {
				return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field chat_id: %w", err)
			}
			a.ChatID = value
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field message_id: %w", err)
			}
			a.MessageID = value
		case "star_count":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field star_count: %w", err)
			}
			a.StarCount = value
		case "use_default_is_anonymous":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field use_default_is_anonymous: %w", err)
			}
			a.UseDefaultIsAnonymous = value
		case "is_anonymous":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode addPendingPaidMessageReaction#66548919: field is_anonymous: %w", err)
			}
			a.IsAnonymous = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (a *AddPendingPaidMessageReactionRequest) GetChatID() (value int64) {
	if a == nil {
		return
	}
	return a.ChatID
}

// GetMessageID returns value of MessageID field.
func (a *AddPendingPaidMessageReactionRequest) GetMessageID() (value int64) {
	if a == nil {
		return
	}
	return a.MessageID
}

// GetStarCount returns value of StarCount field.
func (a *AddPendingPaidMessageReactionRequest) GetStarCount() (value int64) {
	if a == nil {
		return
	}
	return a.StarCount
}

// GetUseDefaultIsAnonymous returns value of UseDefaultIsAnonymous field.
func (a *AddPendingPaidMessageReactionRequest) GetUseDefaultIsAnonymous() (value bool) {
	if a == nil {
		return
	}
	return a.UseDefaultIsAnonymous
}

// GetIsAnonymous returns value of IsAnonymous field.
func (a *AddPendingPaidMessageReactionRequest) GetIsAnonymous() (value bool) {
	if a == nil {
		return
	}
	return a.IsAnonymous
}

// AddPendingPaidMessageReaction invokes method addPendingPaidMessageReaction#66548919 returning error if any.
func (c *Client) AddPendingPaidMessageReaction(ctx context.Context, request *AddPendingPaidMessageReactionRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
