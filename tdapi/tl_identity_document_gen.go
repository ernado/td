// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// IdentityDocument represents TL type `identityDocument#986321a6`.
type IdentityDocument struct {
	// Document number; 1-24 characters
	Number string
	// Document expiry date; may be null if not applicable
	ExpiryDate Date
	// Front side of the document
	FrontSide DatedFile
	// Reverse side of the document; only for driver license and identity card; may be null
	ReverseSide DatedFile
	// Selfie with the document; may be null
	Selfie DatedFile
	// List of files containing a certified English translation of the document
	Translation []DatedFile
}

// IdentityDocumentTypeID is TL type id of IdentityDocument.
const IdentityDocumentTypeID = 0x986321a6

// Ensuring interfaces in compile-time for IdentityDocument.
var (
	_ bin.Encoder     = &IdentityDocument{}
	_ bin.Decoder     = &IdentityDocument{}
	_ bin.BareEncoder = &IdentityDocument{}
	_ bin.BareDecoder = &IdentityDocument{}
)

func (i *IdentityDocument) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Number == "") {
		return false
	}
	if !(i.ExpiryDate.Zero()) {
		return false
	}
	if !(i.FrontSide.Zero()) {
		return false
	}
	if !(i.ReverseSide.Zero()) {
		return false
	}
	if !(i.Selfie.Zero()) {
		return false
	}
	if !(i.Translation == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *IdentityDocument) String() string {
	if i == nil {
		return "IdentityDocument(nil)"
	}
	type Alias IdentityDocument
	return fmt.Sprintf("IdentityDocument%+v", Alias(*i))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*IdentityDocument) TypeID() uint32 {
	return IdentityDocumentTypeID
}

// TypeName returns name of type in TL schema.
func (*IdentityDocument) TypeName() string {
	return "identityDocument"
}

// TypeInfo returns info about TL type.
func (i *IdentityDocument) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "identityDocument",
		ID:   IdentityDocumentTypeID,
	}
	if i == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Number",
			SchemaName: "number",
		},
		{
			Name:       "ExpiryDate",
			SchemaName: "expiry_date",
		},
		{
			Name:       "FrontSide",
			SchemaName: "front_side",
		},
		{
			Name:       "ReverseSide",
			SchemaName: "reverse_side",
		},
		{
			Name:       "Selfie",
			SchemaName: "selfie",
		},
		{
			Name:       "Translation",
			SchemaName: "translation",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (i *IdentityDocument) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode identityDocument#986321a6 as nil")
	}
	b.PutID(IdentityDocumentTypeID)
	return i.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (i *IdentityDocument) EncodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode identityDocument#986321a6 as nil")
	}
	b.PutString(i.Number)
	if err := i.ExpiryDate.Encode(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field expiry_date: %w", err)
	}
	if err := i.FrontSide.Encode(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field front_side: %w", err)
	}
	if err := i.ReverseSide.Encode(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field reverse_side: %w", err)
	}
	if err := i.Selfie.Encode(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field selfie: %w", err)
	}
	b.PutInt(len(i.Translation))
	for idx, v := range i.Translation {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare identityDocument#986321a6: field translation element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *IdentityDocument) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode identityDocument#986321a6 to nil")
	}
	if err := b.ConsumeID(IdentityDocumentTypeID); err != nil {
		return fmt.Errorf("unable to decode identityDocument#986321a6: %w", err)
	}
	return i.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (i *IdentityDocument) DecodeBare(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode identityDocument#986321a6 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode identityDocument#986321a6: field number: %w", err)
		}
		i.Number = value
	}
	{
		if err := i.ExpiryDate.Decode(b); err != nil {
			return fmt.Errorf("unable to decode identityDocument#986321a6: field expiry_date: %w", err)
		}
	}
	{
		if err := i.FrontSide.Decode(b); err != nil {
			return fmt.Errorf("unable to decode identityDocument#986321a6: field front_side: %w", err)
		}
	}
	{
		if err := i.ReverseSide.Decode(b); err != nil {
			return fmt.Errorf("unable to decode identityDocument#986321a6: field reverse_side: %w", err)
		}
	}
	{
		if err := i.Selfie.Decode(b); err != nil {
			return fmt.Errorf("unable to decode identityDocument#986321a6: field selfie: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode identityDocument#986321a6: field translation: %w", err)
		}

		if headerLen > 0 {
			i.Translation = make([]DatedFile, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value DatedFile
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare identityDocument#986321a6: field translation: %w", err)
			}
			i.Translation = append(i.Translation, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (i *IdentityDocument) EncodeTDLibJSON(b tdjson.Encoder) error {
	if i == nil {
		return fmt.Errorf("can't encode identityDocument#986321a6 as nil")
	}
	b.ObjStart()
	b.PutID("identityDocument")
	b.FieldStart("number")
	b.PutString(i.Number)
	b.FieldStart("expiry_date")
	if err := i.ExpiryDate.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field expiry_date: %w", err)
	}
	b.FieldStart("front_side")
	if err := i.FrontSide.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field front_side: %w", err)
	}
	b.FieldStart("reverse_side")
	if err := i.ReverseSide.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field reverse_side: %w", err)
	}
	b.FieldStart("selfie")
	if err := i.Selfie.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode identityDocument#986321a6: field selfie: %w", err)
	}
	b.FieldStart("translation")
	b.ArrStart()
	for idx, v := range i.Translation {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode identityDocument#986321a6: field translation element with index %d: %w", idx, err)
		}
	}
	b.ArrEnd()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (i *IdentityDocument) DecodeTDLibJSON(b tdjson.Decoder) error {
	if i == nil {
		return fmt.Errorf("can't decode identityDocument#986321a6 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("identityDocument"); err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: %w", err)
			}
		case "number":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: field number: %w", err)
			}
			i.Number = value
		case "expiry_date":
			if err := i.ExpiryDate.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: field expiry_date: %w", err)
			}
		case "front_side":
			if err := i.FrontSide.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: field front_side: %w", err)
			}
		case "reverse_side":
			if err := i.ReverseSide.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: field reverse_side: %w", err)
			}
		case "selfie":
			if err := i.Selfie.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: field selfie: %w", err)
			}
		case "translation":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value DatedFile
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode identityDocument#986321a6: field translation: %w", err)
				}
				i.Translation = append(i.Translation, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode identityDocument#986321a6: field translation: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetNumber returns value of Number field.
func (i *IdentityDocument) GetNumber() (value string) {
	return i.Number
}

// GetExpiryDate returns value of ExpiryDate field.
func (i *IdentityDocument) GetExpiryDate() (value Date) {
	return i.ExpiryDate
}

// GetFrontSide returns value of FrontSide field.
func (i *IdentityDocument) GetFrontSide() (value DatedFile) {
	return i.FrontSide
}

// GetReverseSide returns value of ReverseSide field.
func (i *IdentityDocument) GetReverseSide() (value DatedFile) {
	return i.ReverseSide
}

// GetSelfie returns value of Selfie field.
func (i *IdentityDocument) GetSelfie() (value DatedFile) {
	return i.Selfie
}

// GetTranslation returns value of Translation field.
func (i *IdentityDocument) GetTranslation() (value []DatedFile) {
	return i.Translation
}
