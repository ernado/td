// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AnimatedEmoji represents TL type `animatedEmoji#55ad5033`.
type AnimatedEmoji struct {
	// Animated sticker for the emoji
	Sticker Sticker
	// List of colors to be replaced while the sticker is rendered
	ColorReplacements []ColorReplacement
	// File containing the sound to be played when the animated emoji is clicked if any; may
	// be null. The sound is encoded with the Opus codec, and stored inside an OGG container
	Sound File
}

// AnimatedEmojiTypeID is TL type id of AnimatedEmoji.
const AnimatedEmojiTypeID = 0x55ad5033

// Ensuring interfaces in compile-time for AnimatedEmoji.
var (
	_ bin.Encoder     = &AnimatedEmoji{}
	_ bin.Decoder     = &AnimatedEmoji{}
	_ bin.BareEncoder = &AnimatedEmoji{}
	_ bin.BareDecoder = &AnimatedEmoji{}
)

func (a *AnimatedEmoji) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Sticker.Zero()) {
		return false
	}
	if !(a.ColorReplacements == nil) {
		return false
	}
	if !(a.Sound.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AnimatedEmoji) String() string {
	if a == nil {
		return "AnimatedEmoji(nil)"
	}
	type Alias AnimatedEmoji
	return fmt.Sprintf("AnimatedEmoji%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AnimatedEmoji) TypeID() uint32 {
	return AnimatedEmojiTypeID
}

// TypeName returns name of type in TL schema.
func (*AnimatedEmoji) TypeName() string {
	return "animatedEmoji"
}

// TypeInfo returns info about TL type.
func (a *AnimatedEmoji) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "animatedEmoji",
		ID:   AnimatedEmojiTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Sticker",
			SchemaName: "sticker",
		},
		{
			Name:       "ColorReplacements",
			SchemaName: "color_replacements",
		},
		{
			Name:       "Sound",
			SchemaName: "sound",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AnimatedEmoji) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode animatedEmoji#55ad5033 as nil")
	}
	b.PutID(AnimatedEmojiTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AnimatedEmoji) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode animatedEmoji#55ad5033 as nil")
	}
	if err := a.Sticker.Encode(b); err != nil {
		return fmt.Errorf("unable to encode animatedEmoji#55ad5033: field sticker: %w", err)
	}
	b.PutInt(len(a.ColorReplacements))
	for idx, v := range a.ColorReplacements {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare animatedEmoji#55ad5033: field color_replacements element with index %d: %w", idx, err)
		}
	}
	if err := a.Sound.Encode(b); err != nil {
		return fmt.Errorf("unable to encode animatedEmoji#55ad5033: field sound: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (a *AnimatedEmoji) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode animatedEmoji#55ad5033 to nil")
	}
	if err := b.ConsumeID(AnimatedEmojiTypeID); err != nil {
		return fmt.Errorf("unable to decode animatedEmoji#55ad5033: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AnimatedEmoji) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode animatedEmoji#55ad5033 to nil")
	}
	{
		if err := a.Sticker.Decode(b); err != nil {
			return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field sticker: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field color_replacements: %w", err)
		}

		if headerLen > 0 {
			a.ColorReplacements = make([]ColorReplacement, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value ColorReplacement
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare animatedEmoji#55ad5033: field color_replacements: %w", err)
			}
			a.ColorReplacements = append(a.ColorReplacements, value)
		}
	}
	{
		if err := a.Sound.Decode(b); err != nil {
			return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field sound: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AnimatedEmoji) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode animatedEmoji#55ad5033 as nil")
	}
	b.ObjStart()
	b.PutID("animatedEmoji")
	b.FieldStart("sticker")
	if err := a.Sticker.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode animatedEmoji#55ad5033: field sticker: %w", err)
	}
	b.FieldStart("color_replacements")
	b.ArrStart()
	for idx, v := range a.ColorReplacements {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode animatedEmoji#55ad5033: field color_replacements element with index %d: %w", idx, err)
		}
	}
	b.ArrEnd()
	b.FieldStart("sound")
	if err := a.Sound.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode animatedEmoji#55ad5033: field sound: %w", err)
	}
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AnimatedEmoji) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode animatedEmoji#55ad5033 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("animatedEmoji"); err != nil {
				return fmt.Errorf("unable to decode animatedEmoji#55ad5033: %w", err)
			}
		case "sticker":
			if err := a.Sticker.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field sticker: %w", err)
			}
		case "color_replacements":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value ColorReplacement
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field color_replacements: %w", err)
				}
				a.ColorReplacements = append(a.ColorReplacements, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field color_replacements: %w", err)
			}
		case "sound":
			if err := a.Sound.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode animatedEmoji#55ad5033: field sound: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSticker returns value of Sticker field.
func (a *AnimatedEmoji) GetSticker() (value Sticker) {
	return a.Sticker
}

// GetColorReplacements returns value of ColorReplacements field.
func (a *AnimatedEmoji) GetColorReplacements() (value []ColorReplacement) {
	return a.ColorReplacements
}

// GetSound returns value of Sound field.
func (a *AnimatedEmoji) GetSound() (value File) {
	return a.Sound
}
