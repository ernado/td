// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BotTransactionPurposePaidMedia represents TL type `botTransactionPurposePaidMedia#62952496`.
type BotTransactionPurposePaidMedia struct {
	// The bought media if the trancastion wasn't refunded
	Media []PaidMediaClass
	// Bot-provided payload; for bots only
	Payload string
}

// BotTransactionPurposePaidMediaTypeID is TL type id of BotTransactionPurposePaidMedia.
const BotTransactionPurposePaidMediaTypeID = 0x62952496

// construct implements constructor of BotTransactionPurposeClass.
func (b BotTransactionPurposePaidMedia) construct() BotTransactionPurposeClass { return &b }

// Ensuring interfaces in compile-time for BotTransactionPurposePaidMedia.
var (
	_ bin.Encoder     = &BotTransactionPurposePaidMedia{}
	_ bin.Decoder     = &BotTransactionPurposePaidMedia{}
	_ bin.BareEncoder = &BotTransactionPurposePaidMedia{}
	_ bin.BareDecoder = &BotTransactionPurposePaidMedia{}

	_ BotTransactionPurposeClass = &BotTransactionPurposePaidMedia{}
)

func (b *BotTransactionPurposePaidMedia) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.Media == nil) {
		return false
	}
	if !(b.Payload == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *BotTransactionPurposePaidMedia) String() string {
	if b == nil {
		return "BotTransactionPurposePaidMedia(nil)"
	}
	type Alias BotTransactionPurposePaidMedia
	return fmt.Sprintf("BotTransactionPurposePaidMedia%+v", Alias(*b))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotTransactionPurposePaidMedia) TypeID() uint32 {
	return BotTransactionPurposePaidMediaTypeID
}

// TypeName returns name of type in TL schema.
func (*BotTransactionPurposePaidMedia) TypeName() string {
	return "botTransactionPurposePaidMedia"
}

// TypeInfo returns info about TL type.
func (b *BotTransactionPurposePaidMedia) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "botTransactionPurposePaidMedia",
		ID:   BotTransactionPurposePaidMediaTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Media",
			SchemaName: "media",
		},
		{
			Name:       "Payload",
			SchemaName: "payload",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (b *BotTransactionPurposePaidMedia) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botTransactionPurposePaidMedia#62952496 as nil")
	}
	buf.PutID(BotTransactionPurposePaidMediaTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *BotTransactionPurposePaidMedia) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botTransactionPurposePaidMedia#62952496 as nil")
	}
	buf.PutInt(len(b.Media))
	for idx, v := range b.Media {
		if v == nil {
			return fmt.Errorf("unable to encode botTransactionPurposePaidMedia#62952496: field media element with index %d is nil", idx)
		}
		if err := v.EncodeBare(buf); err != nil {
			return fmt.Errorf("unable to encode bare botTransactionPurposePaidMedia#62952496: field media element with index %d: %w", idx, err)
		}
	}
	buf.PutString(b.Payload)
	return nil
}

// Decode implements bin.Decoder.
func (b *BotTransactionPurposePaidMedia) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botTransactionPurposePaidMedia#62952496 to nil")
	}
	if err := buf.ConsumeID(BotTransactionPurposePaidMediaTypeID); err != nil {
		return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *BotTransactionPurposePaidMedia) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botTransactionPurposePaidMedia#62952496 to nil")
	}
	{
		headerLen, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: field media: %w", err)
		}

		if headerLen > 0 {
			b.Media = make([]PaidMediaClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePaidMedia(buf)
			if err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: field media: %w", err)
			}
			b.Media = append(b.Media, value)
		}
	}
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: field payload: %w", err)
		}
		b.Payload = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (b *BotTransactionPurposePaidMedia) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil {
		return fmt.Errorf("can't encode botTransactionPurposePaidMedia#62952496 as nil")
	}
	buf.ObjStart()
	buf.PutID("botTransactionPurposePaidMedia")
	buf.Comma()
	buf.FieldStart("media")
	buf.ArrStart()
	for idx, v := range b.Media {
		if v == nil {
			return fmt.Errorf("unable to encode botTransactionPurposePaidMedia#62952496: field media element with index %d is nil", idx)
		}
		if err := v.EncodeTDLibJSON(buf); err != nil {
			return fmt.Errorf("unable to encode botTransactionPurposePaidMedia#62952496: field media element with index %d: %w", idx, err)
		}
		buf.Comma()
	}
	buf.StripComma()
	buf.ArrEnd()
	buf.Comma()
	buf.FieldStart("payload")
	buf.PutString(b.Payload)
	buf.Comma()
	buf.StripComma()
	buf.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (b *BotTransactionPurposePaidMedia) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("can't decode botTransactionPurposePaidMedia#62952496 to nil")
	}

	return buf.Obj(func(buf tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := buf.ConsumeID("botTransactionPurposePaidMedia"); err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: %w", err)
			}
		case "media":
			if err := buf.Arr(func(buf tdjson.Decoder) error {
				value, err := DecodeTDLibJSONPaidMedia(buf)
				if err != nil {
					return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: field media: %w", err)
				}
				b.Media = append(b.Media, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: field media: %w", err)
			}
		case "payload":
			value, err := buf.String()
			if err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposePaidMedia#62952496: field payload: %w", err)
			}
			b.Payload = value
		default:
			return buf.Skip()
		}
		return nil
	})
}

// GetMedia returns value of Media field.
func (b *BotTransactionPurposePaidMedia) GetMedia() (value []PaidMediaClass) {
	if b == nil {
		return
	}
	return b.Media
}

// GetPayload returns value of Payload field.
func (b *BotTransactionPurposePaidMedia) GetPayload() (value string) {
	if b == nil {
		return
	}
	return b.Payload
}

// BotTransactionPurposeInvoicePayment represents TL type `botTransactionPurposeInvoicePayment#699860ac`.
type BotTransactionPurposeInvoicePayment struct {
	// Information about the bought product; may be null if not applicable
	ProductInfo ProductInfo
	// Invoice payload; for bots only
	InvoicePayload []byte
}

// BotTransactionPurposeInvoicePaymentTypeID is TL type id of BotTransactionPurposeInvoicePayment.
const BotTransactionPurposeInvoicePaymentTypeID = 0x699860ac

// construct implements constructor of BotTransactionPurposeClass.
func (b BotTransactionPurposeInvoicePayment) construct() BotTransactionPurposeClass { return &b }

// Ensuring interfaces in compile-time for BotTransactionPurposeInvoicePayment.
var (
	_ bin.Encoder     = &BotTransactionPurposeInvoicePayment{}
	_ bin.Decoder     = &BotTransactionPurposeInvoicePayment{}
	_ bin.BareEncoder = &BotTransactionPurposeInvoicePayment{}
	_ bin.BareDecoder = &BotTransactionPurposeInvoicePayment{}

	_ BotTransactionPurposeClass = &BotTransactionPurposeInvoicePayment{}
)

func (b *BotTransactionPurposeInvoicePayment) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.ProductInfo.Zero()) {
		return false
	}
	if !(b.InvoicePayload == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *BotTransactionPurposeInvoicePayment) String() string {
	if b == nil {
		return "BotTransactionPurposeInvoicePayment(nil)"
	}
	type Alias BotTransactionPurposeInvoicePayment
	return fmt.Sprintf("BotTransactionPurposeInvoicePayment%+v", Alias(*b))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotTransactionPurposeInvoicePayment) TypeID() uint32 {
	return BotTransactionPurposeInvoicePaymentTypeID
}

// TypeName returns name of type in TL schema.
func (*BotTransactionPurposeInvoicePayment) TypeName() string {
	return "botTransactionPurposeInvoicePayment"
}

// TypeInfo returns info about TL type.
func (b *BotTransactionPurposeInvoicePayment) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "botTransactionPurposeInvoicePayment",
		ID:   BotTransactionPurposeInvoicePaymentTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ProductInfo",
			SchemaName: "product_info",
		},
		{
			Name:       "InvoicePayload",
			SchemaName: "invoice_payload",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (b *BotTransactionPurposeInvoicePayment) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botTransactionPurposeInvoicePayment#699860ac as nil")
	}
	buf.PutID(BotTransactionPurposeInvoicePaymentTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *BotTransactionPurposeInvoicePayment) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botTransactionPurposeInvoicePayment#699860ac as nil")
	}
	if err := b.ProductInfo.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode botTransactionPurposeInvoicePayment#699860ac: field product_info: %w", err)
	}
	buf.PutBytes(b.InvoicePayload)
	return nil
}

// Decode implements bin.Decoder.
func (b *BotTransactionPurposeInvoicePayment) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botTransactionPurposeInvoicePayment#699860ac to nil")
	}
	if err := buf.ConsumeID(BotTransactionPurposeInvoicePaymentTypeID); err != nil {
		return fmt.Errorf("unable to decode botTransactionPurposeInvoicePayment#699860ac: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *BotTransactionPurposeInvoicePayment) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botTransactionPurposeInvoicePayment#699860ac to nil")
	}
	{
		if err := b.ProductInfo.Decode(buf); err != nil {
			return fmt.Errorf("unable to decode botTransactionPurposeInvoicePayment#699860ac: field product_info: %w", err)
		}
	}
	{
		value, err := buf.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode botTransactionPurposeInvoicePayment#699860ac: field invoice_payload: %w", err)
		}
		b.InvoicePayload = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (b *BotTransactionPurposeInvoicePayment) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil {
		return fmt.Errorf("can't encode botTransactionPurposeInvoicePayment#699860ac as nil")
	}
	buf.ObjStart()
	buf.PutID("botTransactionPurposeInvoicePayment")
	buf.Comma()
	buf.FieldStart("product_info")
	if err := b.ProductInfo.EncodeTDLibJSON(buf); err != nil {
		return fmt.Errorf("unable to encode botTransactionPurposeInvoicePayment#699860ac: field product_info: %w", err)
	}
	buf.Comma()
	buf.FieldStart("invoice_payload")
	buf.PutBytes(b.InvoicePayload)
	buf.Comma()
	buf.StripComma()
	buf.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (b *BotTransactionPurposeInvoicePayment) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("can't decode botTransactionPurposeInvoicePayment#699860ac to nil")
	}

	return buf.Obj(func(buf tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := buf.ConsumeID("botTransactionPurposeInvoicePayment"); err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposeInvoicePayment#699860ac: %w", err)
			}
		case "product_info":
			if err := b.ProductInfo.DecodeTDLibJSON(buf); err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposeInvoicePayment#699860ac: field product_info: %w", err)
			}
		case "invoice_payload":
			value, err := buf.Bytes()
			if err != nil {
				return fmt.Errorf("unable to decode botTransactionPurposeInvoicePayment#699860ac: field invoice_payload: %w", err)
			}
			b.InvoicePayload = value
		default:
			return buf.Skip()
		}
		return nil
	})
}

// GetProductInfo returns value of ProductInfo field.
func (b *BotTransactionPurposeInvoicePayment) GetProductInfo() (value ProductInfo) {
	if b == nil {
		return
	}
	return b.ProductInfo
}

// GetInvoicePayload returns value of InvoicePayload field.
func (b *BotTransactionPurposeInvoicePayment) GetInvoicePayload() (value []byte) {
	if b == nil {
		return
	}
	return b.InvoicePayload
}

// BotTransactionPurposeClassName is schema name of BotTransactionPurposeClass.
const BotTransactionPurposeClassName = "BotTransactionPurpose"

// BotTransactionPurposeClass represents BotTransactionPurpose generic type.
//
// Example:
//
//	g, err := tdapi.DecodeBotTransactionPurpose(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.BotTransactionPurposePaidMedia: // botTransactionPurposePaidMedia#62952496
//	case *tdapi.BotTransactionPurposeInvoicePayment: // botTransactionPurposeInvoicePayment#699860ac
//	default: panic(v)
//	}
type BotTransactionPurposeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() BotTransactionPurposeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeBotTransactionPurpose implements binary de-serialization for BotTransactionPurposeClass.
func DecodeBotTransactionPurpose(buf *bin.Buffer) (BotTransactionPurposeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case BotTransactionPurposePaidMediaTypeID:
		// Decoding botTransactionPurposePaidMedia#62952496.
		v := BotTransactionPurposePaidMedia{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode BotTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case BotTransactionPurposeInvoicePaymentTypeID:
		// Decoding botTransactionPurposeInvoicePayment#699860ac.
		v := BotTransactionPurposeInvoicePayment{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode BotTransactionPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode BotTransactionPurposeClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONBotTransactionPurpose implements binary de-serialization for BotTransactionPurposeClass.
func DecodeTDLibJSONBotTransactionPurpose(buf tdjson.Decoder) (BotTransactionPurposeClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "botTransactionPurposePaidMedia":
		// Decoding botTransactionPurposePaidMedia#62952496.
		v := BotTransactionPurposePaidMedia{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode BotTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case "botTransactionPurposeInvoicePayment":
		// Decoding botTransactionPurposeInvoicePayment#699860ac.
		v := BotTransactionPurposeInvoicePayment{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode BotTransactionPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode BotTransactionPurposeClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// BotTransactionPurpose boxes the BotTransactionPurposeClass providing a helper.
type BotTransactionPurposeBox struct {
	BotTransactionPurpose BotTransactionPurposeClass
}

// Decode implements bin.Decoder for BotTransactionPurposeBox.
func (b *BotTransactionPurposeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode BotTransactionPurposeBox to nil")
	}
	v, err := DecodeBotTransactionPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.BotTransactionPurpose = v
	return nil
}

// Encode implements bin.Encode for BotTransactionPurposeBox.
func (b *BotTransactionPurposeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.BotTransactionPurpose == nil {
		return fmt.Errorf("unable to encode BotTransactionPurposeClass as nil")
	}
	return b.BotTransactionPurpose.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for BotTransactionPurposeBox.
func (b *BotTransactionPurposeBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode BotTransactionPurposeBox to nil")
	}
	v, err := DecodeTDLibJSONBotTransactionPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.BotTransactionPurpose = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for BotTransactionPurposeBox.
func (b *BotTransactionPurposeBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.BotTransactionPurpose == nil {
		return fmt.Errorf("unable to encode BotTransactionPurposeClass as nil")
	}
	return b.BotTransactionPurpose.EncodeTDLibJSON(buf)
}
