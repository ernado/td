// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StarTransactionPartnerTelegram represents TL type `starTransactionPartnerTelegram#7a899cc0`.
type StarTransactionPartnerTelegram struct {
}

// StarTransactionPartnerTelegramTypeID is TL type id of StarTransactionPartnerTelegram.
const StarTransactionPartnerTelegramTypeID = 0x7a899cc0

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerTelegram) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerTelegram.
var (
	_ bin.Encoder     = &StarTransactionPartnerTelegram{}
	_ bin.Decoder     = &StarTransactionPartnerTelegram{}
	_ bin.BareEncoder = &StarTransactionPartnerTelegram{}
	_ bin.BareDecoder = &StarTransactionPartnerTelegram{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerTelegram{}
)

func (s *StarTransactionPartnerTelegram) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerTelegram) String() string {
	if s == nil {
		return "StarTransactionPartnerTelegram(nil)"
	}
	type Alias StarTransactionPartnerTelegram
	return fmt.Sprintf("StarTransactionPartnerTelegram%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerTelegram) TypeID() uint32 {
	return StarTransactionPartnerTelegramTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerTelegram) TypeName() string {
	return "starTransactionPartnerTelegram"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerTelegram) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerTelegram",
		ID:   StarTransactionPartnerTelegramTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerTelegram) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegram#7a899cc0 as nil")
	}
	b.PutID(StarTransactionPartnerTelegramTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerTelegram) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegram#7a899cc0 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerTelegram) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegram#7a899cc0 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerTelegramTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerTelegram#7a899cc0: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerTelegram) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegram#7a899cc0 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerTelegram) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegram#7a899cc0 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerTelegram")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerTelegram) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegram#7a899cc0 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerTelegram"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerTelegram#7a899cc0: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerAppStore represents TL type `starTransactionPartnerAppStore#e34026dc`.
type StarTransactionPartnerAppStore struct {
}

// StarTransactionPartnerAppStoreTypeID is TL type id of StarTransactionPartnerAppStore.
const StarTransactionPartnerAppStoreTypeID = 0xe34026dc

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerAppStore) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerAppStore.
var (
	_ bin.Encoder     = &StarTransactionPartnerAppStore{}
	_ bin.Decoder     = &StarTransactionPartnerAppStore{}
	_ bin.BareEncoder = &StarTransactionPartnerAppStore{}
	_ bin.BareDecoder = &StarTransactionPartnerAppStore{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerAppStore{}
)

func (s *StarTransactionPartnerAppStore) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerAppStore) String() string {
	if s == nil {
		return "StarTransactionPartnerAppStore(nil)"
	}
	type Alias StarTransactionPartnerAppStore
	return fmt.Sprintf("StarTransactionPartnerAppStore%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerAppStore) TypeID() uint32 {
	return StarTransactionPartnerAppStoreTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerAppStore) TypeName() string {
	return "starTransactionPartnerAppStore"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerAppStore) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerAppStore",
		ID:   StarTransactionPartnerAppStoreTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerAppStore) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerAppStore#e34026dc as nil")
	}
	b.PutID(StarTransactionPartnerAppStoreTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerAppStore) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerAppStore#e34026dc as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerAppStore) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerAppStore#e34026dc to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerAppStoreTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerAppStore#e34026dc: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerAppStore) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerAppStore#e34026dc to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerAppStore) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerAppStore#e34026dc as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerAppStore")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerAppStore) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerAppStore#e34026dc to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerAppStore"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerAppStore#e34026dc: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerGooglePlay represents TL type `starTransactionPartnerGooglePlay#f229f2a0`.
type StarTransactionPartnerGooglePlay struct {
}

// StarTransactionPartnerGooglePlayTypeID is TL type id of StarTransactionPartnerGooglePlay.
const StarTransactionPartnerGooglePlayTypeID = 0xf229f2a0

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerGooglePlay) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerGooglePlay.
var (
	_ bin.Encoder     = &StarTransactionPartnerGooglePlay{}
	_ bin.Decoder     = &StarTransactionPartnerGooglePlay{}
	_ bin.BareEncoder = &StarTransactionPartnerGooglePlay{}
	_ bin.BareDecoder = &StarTransactionPartnerGooglePlay{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerGooglePlay{}
)

func (s *StarTransactionPartnerGooglePlay) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerGooglePlay) String() string {
	if s == nil {
		return "StarTransactionPartnerGooglePlay(nil)"
	}
	type Alias StarTransactionPartnerGooglePlay
	return fmt.Sprintf("StarTransactionPartnerGooglePlay%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerGooglePlay) TypeID() uint32 {
	return StarTransactionPartnerGooglePlayTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerGooglePlay) TypeName() string {
	return "starTransactionPartnerGooglePlay"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerGooglePlay) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerGooglePlay",
		ID:   StarTransactionPartnerGooglePlayTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerGooglePlay) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerGooglePlay#f229f2a0 as nil")
	}
	b.PutID(StarTransactionPartnerGooglePlayTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerGooglePlay) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerGooglePlay#f229f2a0 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerGooglePlay) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerGooglePlay#f229f2a0 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerGooglePlayTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerGooglePlay#f229f2a0: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerGooglePlay) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerGooglePlay#f229f2a0 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerGooglePlay) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerGooglePlay#f229f2a0 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerGooglePlay")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerGooglePlay) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerGooglePlay#f229f2a0 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerGooglePlay"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerGooglePlay#f229f2a0: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerFragment represents TL type `starTransactionPartnerFragment#da1849b5`.
type StarTransactionPartnerFragment struct {
	// State of the withdrawal; may be null for refunds from Fragment
	WithdrawalState RevenueWithdrawalStateClass
}

// StarTransactionPartnerFragmentTypeID is TL type id of StarTransactionPartnerFragment.
const StarTransactionPartnerFragmentTypeID = 0xda1849b5

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerFragment) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerFragment.
var (
	_ bin.Encoder     = &StarTransactionPartnerFragment{}
	_ bin.Decoder     = &StarTransactionPartnerFragment{}
	_ bin.BareEncoder = &StarTransactionPartnerFragment{}
	_ bin.BareDecoder = &StarTransactionPartnerFragment{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerFragment{}
)

func (s *StarTransactionPartnerFragment) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.WithdrawalState == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerFragment) String() string {
	if s == nil {
		return "StarTransactionPartnerFragment(nil)"
	}
	type Alias StarTransactionPartnerFragment
	return fmt.Sprintf("StarTransactionPartnerFragment%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerFragment) TypeID() uint32 {
	return StarTransactionPartnerFragmentTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerFragment) TypeName() string {
	return "starTransactionPartnerFragment"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerFragment) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerFragment",
		ID:   StarTransactionPartnerFragmentTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "WithdrawalState",
			SchemaName: "withdrawal_state",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerFragment) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerFragment#da1849b5 as nil")
	}
	b.PutID(StarTransactionPartnerFragmentTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerFragment) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerFragment#da1849b5 as nil")
	}
	if s.WithdrawalState == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state is nil")
	}
	if err := s.WithdrawalState.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerFragment) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerFragment#da1849b5 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerFragmentTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerFragment) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerFragment#da1849b5 to nil")
	}
	{
		value, err := DecodeRevenueWithdrawalState(b)
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
		}
		s.WithdrawalState = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerFragment) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerFragment#da1849b5 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerFragment")
	b.Comma()
	b.FieldStart("withdrawal_state")
	if s.WithdrawalState == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state is nil")
	}
	if err := s.WithdrawalState.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerFragment) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerFragment#da1849b5 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerFragment"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: %w", err)
			}
		case "withdrawal_state":
			value, err := DecodeTDLibJSONRevenueWithdrawalState(b)
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerFragment#da1849b5: field withdrawal_state: %w", err)
			}
			s.WithdrawalState = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetWithdrawalState returns value of WithdrawalState field.
func (s *StarTransactionPartnerFragment) GetWithdrawalState() (value RevenueWithdrawalStateClass) {
	if s == nil {
		return
	}
	return s.WithdrawalState
}

// StarTransactionPartnerTelegramAds represents TL type `starTransactionPartnerTelegramAds#91f9c6b`.
type StarTransactionPartnerTelegramAds struct {
}

// StarTransactionPartnerTelegramAdsTypeID is TL type id of StarTransactionPartnerTelegramAds.
const StarTransactionPartnerTelegramAdsTypeID = 0x91f9c6b

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerTelegramAds) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerTelegramAds.
var (
	_ bin.Encoder     = &StarTransactionPartnerTelegramAds{}
	_ bin.Decoder     = &StarTransactionPartnerTelegramAds{}
	_ bin.BareEncoder = &StarTransactionPartnerTelegramAds{}
	_ bin.BareDecoder = &StarTransactionPartnerTelegramAds{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerTelegramAds{}
)

func (s *StarTransactionPartnerTelegramAds) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerTelegramAds) String() string {
	if s == nil {
		return "StarTransactionPartnerTelegramAds(nil)"
	}
	type Alias StarTransactionPartnerTelegramAds
	return fmt.Sprintf("StarTransactionPartnerTelegramAds%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerTelegramAds) TypeID() uint32 {
	return StarTransactionPartnerTelegramAdsTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerTelegramAds) TypeName() string {
	return "starTransactionPartnerTelegramAds"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerTelegramAds) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerTelegramAds",
		ID:   StarTransactionPartnerTelegramAdsTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerTelegramAds) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegramAds#91f9c6b as nil")
	}
	b.PutID(StarTransactionPartnerTelegramAdsTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerTelegramAds) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegramAds#91f9c6b as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerTelegramAds) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegramAds#91f9c6b to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerTelegramAdsTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerTelegramAds#91f9c6b: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerTelegramAds) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegramAds#91f9c6b to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerTelegramAds) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerTelegramAds#91f9c6b as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerTelegramAds")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerTelegramAds) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerTelegramAds#91f9c6b to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerTelegramAds"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerTelegramAds#91f9c6b: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerBot represents TL type `starTransactionPartnerBot#4ece3a40`.
type StarTransactionPartnerBot struct {
	// Identifier of the bot
	UserID int64
	// Purpose of the transaction
	Purpose BotTransactionPurposeClass
}

// StarTransactionPartnerBotTypeID is TL type id of StarTransactionPartnerBot.
const StarTransactionPartnerBotTypeID = 0x4ece3a40

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerBot) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerBot.
var (
	_ bin.Encoder     = &StarTransactionPartnerBot{}
	_ bin.Decoder     = &StarTransactionPartnerBot{}
	_ bin.BareEncoder = &StarTransactionPartnerBot{}
	_ bin.BareDecoder = &StarTransactionPartnerBot{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerBot{}
)

func (s *StarTransactionPartnerBot) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.Purpose == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerBot) String() string {
	if s == nil {
		return "StarTransactionPartnerBot(nil)"
	}
	type Alias StarTransactionPartnerBot
	return fmt.Sprintf("StarTransactionPartnerBot%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerBot) TypeID() uint32 {
	return StarTransactionPartnerBotTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerBot) TypeName() string {
	return "starTransactionPartnerBot"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerBot) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerBot",
		ID:   StarTransactionPartnerBotTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Purpose",
			SchemaName: "purpose",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerBot) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBot#4ece3a40 as nil")
	}
	b.PutID(StarTransactionPartnerBotTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerBot) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBot#4ece3a40 as nil")
	}
	b.PutInt53(s.UserID)
	if s.Purpose == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerBot#4ece3a40: field purpose is nil")
	}
	if err := s.Purpose.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerBot#4ece3a40: field purpose: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerBot) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBot#4ece3a40 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerBotTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerBot#4ece3a40: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerBot) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBot#4ece3a40 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBot#4ece3a40: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := DecodeBotTransactionPurpose(b)
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBot#4ece3a40: field purpose: %w", err)
		}
		s.Purpose = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerBot) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBot#4ece3a40 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerBot")
	b.Comma()
	b.FieldStart("user_id")
	b.PutInt53(s.UserID)
	b.Comma()
	b.FieldStart("purpose")
	if s.Purpose == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerBot#4ece3a40: field purpose is nil")
	}
	if err := s.Purpose.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerBot#4ece3a40: field purpose: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerBot) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBot#4ece3a40 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerBot"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#4ece3a40: %w", err)
			}
		case "user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#4ece3a40: field user_id: %w", err)
			}
			s.UserID = value
		case "purpose":
			value, err := DecodeTDLibJSONBotTransactionPurpose(b)
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBot#4ece3a40: field purpose: %w", err)
			}
			s.Purpose = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetUserID returns value of UserID field.
func (s *StarTransactionPartnerBot) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetPurpose returns value of Purpose field.
func (s *StarTransactionPartnerBot) GetPurpose() (value BotTransactionPurposeClass) {
	if s == nil {
		return
	}
	return s.Purpose
}

// StarTransactionPartnerBusiness represents TL type `starTransactionPartnerBusiness#7af9fb52`.
type StarTransactionPartnerBusiness struct {
	// Identifier of the business account user
	UserID int64
	// The bought media if the trancastion wasn't refunded
	Media []PaidMediaClass
}

// StarTransactionPartnerBusinessTypeID is TL type id of StarTransactionPartnerBusiness.
const StarTransactionPartnerBusinessTypeID = 0x7af9fb52

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerBusiness) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerBusiness.
var (
	_ bin.Encoder     = &StarTransactionPartnerBusiness{}
	_ bin.Decoder     = &StarTransactionPartnerBusiness{}
	_ bin.BareEncoder = &StarTransactionPartnerBusiness{}
	_ bin.BareDecoder = &StarTransactionPartnerBusiness{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerBusiness{}
)

func (s *StarTransactionPartnerBusiness) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.Media == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerBusiness) String() string {
	if s == nil {
		return "StarTransactionPartnerBusiness(nil)"
	}
	type Alias StarTransactionPartnerBusiness
	return fmt.Sprintf("StarTransactionPartnerBusiness%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerBusiness) TypeID() uint32 {
	return StarTransactionPartnerBusinessTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerBusiness) TypeName() string {
	return "starTransactionPartnerBusiness"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerBusiness) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerBusiness",
		ID:   StarTransactionPartnerBusinessTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Media",
			SchemaName: "media",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerBusiness) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBusiness#7af9fb52 as nil")
	}
	b.PutID(StarTransactionPartnerBusinessTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerBusiness) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBusiness#7af9fb52 as nil")
	}
	b.PutInt53(s.UserID)
	b.PutInt(len(s.Media))
	for idx, v := range s.Media {
		if v == nil {
			return fmt.Errorf("unable to encode starTransactionPartnerBusiness#7af9fb52: field media element with index %d is nil", idx)
		}
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare starTransactionPartnerBusiness#7af9fb52: field media element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerBusiness) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBusiness#7af9fb52 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerBusinessTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerBusiness) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBusiness#7af9fb52 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: field media: %w", err)
		}

		if headerLen > 0 {
			s.Media = make([]PaidMediaClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePaidMedia(b)
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: field media: %w", err)
			}
			s.Media = append(s.Media, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerBusiness) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerBusiness#7af9fb52 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerBusiness")
	b.Comma()
	b.FieldStart("user_id")
	b.PutInt53(s.UserID)
	b.Comma()
	b.FieldStart("media")
	b.ArrStart()
	for idx, v := range s.Media {
		if v == nil {
			return fmt.Errorf("unable to encode starTransactionPartnerBusiness#7af9fb52: field media element with index %d is nil", idx)
		}
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode starTransactionPartnerBusiness#7af9fb52: field media element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerBusiness) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerBusiness#7af9fb52 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerBusiness"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: %w", err)
			}
		case "user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: field user_id: %w", err)
			}
			s.UserID = value
		case "media":
			if err := b.Arr(func(b tdjson.Decoder) error {
				value, err := DecodeTDLibJSONPaidMedia(b)
				if err != nil {
					return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: field media: %w", err)
				}
				s.Media = append(s.Media, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerBusiness#7af9fb52: field media: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetUserID returns value of UserID field.
func (s *StarTransactionPartnerBusiness) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetMedia returns value of Media field.
func (s *StarTransactionPartnerBusiness) GetMedia() (value []PaidMediaClass) {
	if s == nil {
		return
	}
	return s.Media
}

// StarTransactionPartnerChat represents TL type `starTransactionPartnerChat#71db4d40`.
type StarTransactionPartnerChat struct {
	// Identifier of the chat
	ChatID int64
	// Purpose of the transaction
	Purpose ChatTransactionPurposeClass
}

// StarTransactionPartnerChatTypeID is TL type id of StarTransactionPartnerChat.
const StarTransactionPartnerChatTypeID = 0x71db4d40

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerChat) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerChat.
var (
	_ bin.Encoder     = &StarTransactionPartnerChat{}
	_ bin.Decoder     = &StarTransactionPartnerChat{}
	_ bin.BareEncoder = &StarTransactionPartnerChat{}
	_ bin.BareDecoder = &StarTransactionPartnerChat{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerChat{}
)

func (s *StarTransactionPartnerChat) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.Purpose == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerChat) String() string {
	if s == nil {
		return "StarTransactionPartnerChat(nil)"
	}
	type Alias StarTransactionPartnerChat
	return fmt.Sprintf("StarTransactionPartnerChat%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerChat) TypeID() uint32 {
	return StarTransactionPartnerChatTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerChat) TypeName() string {
	return "starTransactionPartnerChat"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerChat",
		ID:   StarTransactionPartnerChatTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "Purpose",
			SchemaName: "purpose",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerChat) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerChat#71db4d40 as nil")
	}
	b.PutID(StarTransactionPartnerChatTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerChat) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerChat#71db4d40 as nil")
	}
	b.PutInt53(s.ChatID)
	if s.Purpose == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerChat#71db4d40: field purpose is nil")
	}
	if err := s.Purpose.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerChat#71db4d40: field purpose: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerChat) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerChat#71db4d40 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerChatTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerChat#71db4d40: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerChat) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerChat#71db4d40 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerChat#71db4d40: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := DecodeChatTransactionPurpose(b)
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerChat#71db4d40: field purpose: %w", err)
		}
		s.Purpose = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerChat) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerChat#71db4d40 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerChat")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.Comma()
	b.FieldStart("purpose")
	if s.Purpose == nil {
		return fmt.Errorf("unable to encode starTransactionPartnerChat#71db4d40: field purpose is nil")
	}
	if err := s.Purpose.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerChat#71db4d40: field purpose: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerChat) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerChat#71db4d40 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerChat"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChat#71db4d40: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChat#71db4d40: field chat_id: %w", err)
			}
			s.ChatID = value
		case "purpose":
			value, err := DecodeTDLibJSONChatTransactionPurpose(b)
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerChat#71db4d40: field purpose: %w", err)
			}
			s.Purpose = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *StarTransactionPartnerChat) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// GetPurpose returns value of Purpose field.
func (s *StarTransactionPartnerChat) GetPurpose() (value ChatTransactionPurposeClass) {
	if s == nil {
		return
	}
	return s.Purpose
}

// StarTransactionPartnerUser represents TL type `starTransactionPartnerUser#2cf89d66`.
type StarTransactionPartnerUser struct {
	// Identifier of the user; 0 if the gift was anonymous
	UserID int64
	// A sticker to be shown in the transaction information; may be null if unknown
	Sticker Sticker
}

// StarTransactionPartnerUserTypeID is TL type id of StarTransactionPartnerUser.
const StarTransactionPartnerUserTypeID = 0x2cf89d66

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerUser) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerUser.
var (
	_ bin.Encoder     = &StarTransactionPartnerUser{}
	_ bin.Decoder     = &StarTransactionPartnerUser{}
	_ bin.BareEncoder = &StarTransactionPartnerUser{}
	_ bin.BareDecoder = &StarTransactionPartnerUser{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerUser{}
)

func (s *StarTransactionPartnerUser) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.Sticker.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerUser) String() string {
	if s == nil {
		return "StarTransactionPartnerUser(nil)"
	}
	type Alias StarTransactionPartnerUser
	return fmt.Sprintf("StarTransactionPartnerUser%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerUser) TypeID() uint32 {
	return StarTransactionPartnerUserTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerUser) TypeName() string {
	return "starTransactionPartnerUser"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerUser) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerUser",
		ID:   StarTransactionPartnerUserTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Sticker",
			SchemaName: "sticker",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerUser) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUser#2cf89d66 as nil")
	}
	b.PutID(StarTransactionPartnerUserTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerUser) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUser#2cf89d66 as nil")
	}
	b.PutInt53(s.UserID)
	if err := s.Sticker.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerUser#2cf89d66: field sticker: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerUser) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUser#2cf89d66 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerUserTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerUser#2cf89d66: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerUser) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUser#2cf89d66 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerUser#2cf89d66: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		if err := s.Sticker.Decode(b); err != nil {
			return fmt.Errorf("unable to decode starTransactionPartnerUser#2cf89d66: field sticker: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerUser) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUser#2cf89d66 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerUser")
	b.Comma()
	b.FieldStart("user_id")
	b.PutInt53(s.UserID)
	b.Comma()
	b.FieldStart("sticker")
	if err := s.Sticker.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode starTransactionPartnerUser#2cf89d66: field sticker: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerUser) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUser#2cf89d66 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerUser"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerUser#2cf89d66: %w", err)
			}
		case "user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerUser#2cf89d66: field user_id: %w", err)
			}
			s.UserID = value
		case "sticker":
			if err := s.Sticker.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerUser#2cf89d66: field sticker: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetUserID returns value of UserID field.
func (s *StarTransactionPartnerUser) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetSticker returns value of Sticker field.
func (s *StarTransactionPartnerUser) GetSticker() (value Sticker) {
	if s == nil {
		return
	}
	return s.Sticker
}

// StarTransactionPartnerUnsupported represents TL type `starTransactionPartnerUnsupported#c4b20d73`.
type StarTransactionPartnerUnsupported struct {
}

// StarTransactionPartnerUnsupportedTypeID is TL type id of StarTransactionPartnerUnsupported.
const StarTransactionPartnerUnsupportedTypeID = 0xc4b20d73

// construct implements constructor of StarTransactionPartnerClass.
func (s StarTransactionPartnerUnsupported) construct() StarTransactionPartnerClass { return &s }

// Ensuring interfaces in compile-time for StarTransactionPartnerUnsupported.
var (
	_ bin.Encoder     = &StarTransactionPartnerUnsupported{}
	_ bin.Decoder     = &StarTransactionPartnerUnsupported{}
	_ bin.BareEncoder = &StarTransactionPartnerUnsupported{}
	_ bin.BareDecoder = &StarTransactionPartnerUnsupported{}

	_ StarTransactionPartnerClass = &StarTransactionPartnerUnsupported{}
)

func (s *StarTransactionPartnerUnsupported) Zero() bool {
	if s == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarTransactionPartnerUnsupported) String() string {
	if s == nil {
		return "StarTransactionPartnerUnsupported(nil)"
	}
	type Alias StarTransactionPartnerUnsupported
	return fmt.Sprintf("StarTransactionPartnerUnsupported%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarTransactionPartnerUnsupported) TypeID() uint32 {
	return StarTransactionPartnerUnsupportedTypeID
}

// TypeName returns name of type in TL schema.
func (*StarTransactionPartnerUnsupported) TypeName() string {
	return "starTransactionPartnerUnsupported"
}

// TypeInfo returns info about TL type.
func (s *StarTransactionPartnerUnsupported) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starTransactionPartnerUnsupported",
		ID:   StarTransactionPartnerUnsupportedTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (s *StarTransactionPartnerUnsupported) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUnsupported#c4b20d73 as nil")
	}
	b.PutID(StarTransactionPartnerUnsupportedTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarTransactionPartnerUnsupported) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUnsupported#c4b20d73 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarTransactionPartnerUnsupported) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUnsupported#c4b20d73 to nil")
	}
	if err := b.ConsumeID(StarTransactionPartnerUnsupportedTypeID); err != nil {
		return fmt.Errorf("unable to decode starTransactionPartnerUnsupported#c4b20d73: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarTransactionPartnerUnsupported) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUnsupported#c4b20d73 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StarTransactionPartnerUnsupported) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode starTransactionPartnerUnsupported#c4b20d73 as nil")
	}
	b.ObjStart()
	b.PutID("starTransactionPartnerUnsupported")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StarTransactionPartnerUnsupported) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode starTransactionPartnerUnsupported#c4b20d73 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("starTransactionPartnerUnsupported"); err != nil {
				return fmt.Errorf("unable to decode starTransactionPartnerUnsupported#c4b20d73: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// StarTransactionPartnerClassName is schema name of StarTransactionPartnerClass.
const StarTransactionPartnerClassName = "StarTransactionPartner"

// StarTransactionPartnerClass represents StarTransactionPartner generic type.
//
// Example:
//
//	g, err := tdapi.DecodeStarTransactionPartner(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.StarTransactionPartnerTelegram: // starTransactionPartnerTelegram#7a899cc0
//	case *tdapi.StarTransactionPartnerAppStore: // starTransactionPartnerAppStore#e34026dc
//	case *tdapi.StarTransactionPartnerGooglePlay: // starTransactionPartnerGooglePlay#f229f2a0
//	case *tdapi.StarTransactionPartnerFragment: // starTransactionPartnerFragment#da1849b5
//	case *tdapi.StarTransactionPartnerTelegramAds: // starTransactionPartnerTelegramAds#91f9c6b
//	case *tdapi.StarTransactionPartnerBot: // starTransactionPartnerBot#4ece3a40
//	case *tdapi.StarTransactionPartnerBusiness: // starTransactionPartnerBusiness#7af9fb52
//	case *tdapi.StarTransactionPartnerChat: // starTransactionPartnerChat#71db4d40
//	case *tdapi.StarTransactionPartnerUser: // starTransactionPartnerUser#2cf89d66
//	case *tdapi.StarTransactionPartnerUnsupported: // starTransactionPartnerUnsupported#c4b20d73
//	default: panic(v)
//	}
type StarTransactionPartnerClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() StarTransactionPartnerClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeStarTransactionPartner implements binary de-serialization for StarTransactionPartnerClass.
func DecodeStarTransactionPartner(buf *bin.Buffer) (StarTransactionPartnerClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case StarTransactionPartnerTelegramTypeID:
		// Decoding starTransactionPartnerTelegram#7a899cc0.
		v := StarTransactionPartnerTelegram{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerAppStoreTypeID:
		// Decoding starTransactionPartnerAppStore#e34026dc.
		v := StarTransactionPartnerAppStore{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerGooglePlayTypeID:
		// Decoding starTransactionPartnerGooglePlay#f229f2a0.
		v := StarTransactionPartnerGooglePlay{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerFragmentTypeID:
		// Decoding starTransactionPartnerFragment#da1849b5.
		v := StarTransactionPartnerFragment{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerTelegramAdsTypeID:
		// Decoding starTransactionPartnerTelegramAds#91f9c6b.
		v := StarTransactionPartnerTelegramAds{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerBotTypeID:
		// Decoding starTransactionPartnerBot#4ece3a40.
		v := StarTransactionPartnerBot{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerBusinessTypeID:
		// Decoding starTransactionPartnerBusiness#7af9fb52.
		v := StarTransactionPartnerBusiness{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerChatTypeID:
		// Decoding starTransactionPartnerChat#71db4d40.
		v := StarTransactionPartnerChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerUserTypeID:
		// Decoding starTransactionPartnerUser#2cf89d66.
		v := StarTransactionPartnerUser{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case StarTransactionPartnerUnsupportedTypeID:
		// Decoding starTransactionPartnerUnsupported#c4b20d73.
		v := StarTransactionPartnerUnsupported{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONStarTransactionPartner implements binary de-serialization for StarTransactionPartnerClass.
func DecodeTDLibJSONStarTransactionPartner(buf tdjson.Decoder) (StarTransactionPartnerClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "starTransactionPartnerTelegram":
		// Decoding starTransactionPartnerTelegram#7a899cc0.
		v := StarTransactionPartnerTelegram{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerAppStore":
		// Decoding starTransactionPartnerAppStore#e34026dc.
		v := StarTransactionPartnerAppStore{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerGooglePlay":
		// Decoding starTransactionPartnerGooglePlay#f229f2a0.
		v := StarTransactionPartnerGooglePlay{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerFragment":
		// Decoding starTransactionPartnerFragment#da1849b5.
		v := StarTransactionPartnerFragment{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerTelegramAds":
		// Decoding starTransactionPartnerTelegramAds#91f9c6b.
		v := StarTransactionPartnerTelegramAds{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerBot":
		// Decoding starTransactionPartnerBot#4ece3a40.
		v := StarTransactionPartnerBot{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerBusiness":
		// Decoding starTransactionPartnerBusiness#7af9fb52.
		v := StarTransactionPartnerBusiness{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerChat":
		// Decoding starTransactionPartnerChat#71db4d40.
		v := StarTransactionPartnerChat{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerUser":
		// Decoding starTransactionPartnerUser#2cf89d66.
		v := StarTransactionPartnerUser{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	case "starTransactionPartnerUnsupported":
		// Decoding starTransactionPartnerUnsupported#c4b20d73.
		v := StarTransactionPartnerUnsupported{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StarTransactionPartnerClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// StarTransactionPartner boxes the StarTransactionPartnerClass providing a helper.
type StarTransactionPartnerBox struct {
	StarTransactionPartner StarTransactionPartnerClass
}

// Decode implements bin.Decoder for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode StarTransactionPartnerBox to nil")
	}
	v, err := DecodeStarTransactionPartner(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StarTransactionPartner = v
	return nil
}

// Encode implements bin.Encode for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.StarTransactionPartner == nil {
		return fmt.Errorf("unable to encode StarTransactionPartnerClass as nil")
	}
	return b.StarTransactionPartner.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode StarTransactionPartnerBox to nil")
	}
	v, err := DecodeTDLibJSONStarTransactionPartner(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StarTransactionPartner = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for StarTransactionPartnerBox.
func (b *StarTransactionPartnerBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.StarTransactionPartner == nil {
		return fmt.Errorf("unable to encode StarTransactionPartnerClass as nil")
	}
	return b.StarTransactionPartner.EncodeTDLibJSON(buf)
}
