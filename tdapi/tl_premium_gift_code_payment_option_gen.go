// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PremiumGiftCodePaymentOption represents TL type `premiumGiftCodePaymentOption#e5fe2de`.
type PremiumGiftCodePaymentOption struct {
	// ISO 4217 currency code for Telegram Premium gift code payment
	Currency string
	// The amount to pay, in the smallest units of the currency
	Amount int64
	// Number of users which will be able to activate the gift codes
	WinnerCount int32
	// Number of months the Telegram Premium subscription will be active
	MonthCount int32
	// Identifier of the store product associated with the option; may be empty if none
	StoreProductID string
	// Number of times the store product must be paid
	StoreProductQuantity int32
}

// PremiumGiftCodePaymentOptionTypeID is TL type id of PremiumGiftCodePaymentOption.
const PremiumGiftCodePaymentOptionTypeID = 0xe5fe2de

// Ensuring interfaces in compile-time for PremiumGiftCodePaymentOption.
var (
	_ bin.Encoder     = &PremiumGiftCodePaymentOption{}
	_ bin.Decoder     = &PremiumGiftCodePaymentOption{}
	_ bin.BareEncoder = &PremiumGiftCodePaymentOption{}
	_ bin.BareDecoder = &PremiumGiftCodePaymentOption{}
)

func (p *PremiumGiftCodePaymentOption) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.Currency == "") {
		return false
	}
	if !(p.Amount == 0) {
		return false
	}
	if !(p.WinnerCount == 0) {
		return false
	}
	if !(p.MonthCount == 0) {
		return false
	}
	if !(p.StoreProductID == "") {
		return false
	}
	if !(p.StoreProductQuantity == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PremiumGiftCodePaymentOption) String() string {
	if p == nil {
		return "PremiumGiftCodePaymentOption(nil)"
	}
	type Alias PremiumGiftCodePaymentOption
	return fmt.Sprintf("PremiumGiftCodePaymentOption%+v", Alias(*p))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PremiumGiftCodePaymentOption) TypeID() uint32 {
	return PremiumGiftCodePaymentOptionTypeID
}

// TypeName returns name of type in TL schema.
func (*PremiumGiftCodePaymentOption) TypeName() string {
	return "premiumGiftCodePaymentOption"
}

// TypeInfo returns info about TL type.
func (p *PremiumGiftCodePaymentOption) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "premiumGiftCodePaymentOption",
		ID:   PremiumGiftCodePaymentOptionTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Currency",
			SchemaName: "currency",
		},
		{
			Name:       "Amount",
			SchemaName: "amount",
		},
		{
			Name:       "WinnerCount",
			SchemaName: "winner_count",
		},
		{
			Name:       "MonthCount",
			SchemaName: "month_count",
		},
		{
			Name:       "StoreProductID",
			SchemaName: "store_product_id",
		},
		{
			Name:       "StoreProductQuantity",
			SchemaName: "store_product_quantity",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PremiumGiftCodePaymentOption) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode premiumGiftCodePaymentOption#e5fe2de as nil")
	}
	b.PutID(PremiumGiftCodePaymentOptionTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PremiumGiftCodePaymentOption) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode premiumGiftCodePaymentOption#e5fe2de as nil")
	}
	b.PutString(p.Currency)
	b.PutInt53(p.Amount)
	b.PutInt32(p.WinnerCount)
	b.PutInt32(p.MonthCount)
	b.PutString(p.StoreProductID)
	b.PutInt32(p.StoreProductQuantity)
	return nil
}

// Decode implements bin.Decoder.
func (p *PremiumGiftCodePaymentOption) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode premiumGiftCodePaymentOption#e5fe2de to nil")
	}
	if err := b.ConsumeID(PremiumGiftCodePaymentOptionTypeID); err != nil {
		return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: %w", err)
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PremiumGiftCodePaymentOption) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode premiumGiftCodePaymentOption#e5fe2de to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field currency: %w", err)
		}
		p.Currency = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field amount: %w", err)
		}
		p.Amount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field winner_count: %w", err)
		}
		p.WinnerCount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field month_count: %w", err)
		}
		p.MonthCount = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field store_product_id: %w", err)
		}
		p.StoreProductID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field store_product_quantity: %w", err)
		}
		p.StoreProductQuantity = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (p *PremiumGiftCodePaymentOption) EncodeTDLibJSON(b tdjson.Encoder) error {
	if p == nil {
		return fmt.Errorf("can't encode premiumGiftCodePaymentOption#e5fe2de as nil")
	}
	b.ObjStart()
	b.PutID("premiumGiftCodePaymentOption")
	b.Comma()
	b.FieldStart("currency")
	b.PutString(p.Currency)
	b.Comma()
	b.FieldStart("amount")
	b.PutInt53(p.Amount)
	b.Comma()
	b.FieldStart("winner_count")
	b.PutInt32(p.WinnerCount)
	b.Comma()
	b.FieldStart("month_count")
	b.PutInt32(p.MonthCount)
	b.Comma()
	b.FieldStart("store_product_id")
	b.PutString(p.StoreProductID)
	b.Comma()
	b.FieldStart("store_product_quantity")
	b.PutInt32(p.StoreProductQuantity)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (p *PremiumGiftCodePaymentOption) DecodeTDLibJSON(b tdjson.Decoder) error {
	if p == nil {
		return fmt.Errorf("can't decode premiumGiftCodePaymentOption#e5fe2de to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("premiumGiftCodePaymentOption"); err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: %w", err)
			}
		case "currency":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field currency: %w", err)
			}
			p.Currency = value
		case "amount":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field amount: %w", err)
			}
			p.Amount = value
		case "winner_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field winner_count: %w", err)
			}
			p.WinnerCount = value
		case "month_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field month_count: %w", err)
			}
			p.MonthCount = value
		case "store_product_id":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field store_product_id: %w", err)
			}
			p.StoreProductID = value
		case "store_product_quantity":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode premiumGiftCodePaymentOption#e5fe2de: field store_product_quantity: %w", err)
			}
			p.StoreProductQuantity = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetCurrency returns value of Currency field.
func (p *PremiumGiftCodePaymentOption) GetCurrency() (value string) {
	if p == nil {
		return
	}
	return p.Currency
}

// GetAmount returns value of Amount field.
func (p *PremiumGiftCodePaymentOption) GetAmount() (value int64) {
	if p == nil {
		return
	}
	return p.Amount
}

// GetWinnerCount returns value of WinnerCount field.
func (p *PremiumGiftCodePaymentOption) GetWinnerCount() (value int32) {
	if p == nil {
		return
	}
	return p.WinnerCount
}

// GetMonthCount returns value of MonthCount field.
func (p *PremiumGiftCodePaymentOption) GetMonthCount() (value int32) {
	if p == nil {
		return
	}
	return p.MonthCount
}

// GetStoreProductID returns value of StoreProductID field.
func (p *PremiumGiftCodePaymentOption) GetStoreProductID() (value string) {
	if p == nil {
		return
	}
	return p.StoreProductID
}

// GetStoreProductQuantity returns value of StoreProductQuantity field.
func (p *PremiumGiftCodePaymentOption) GetStoreProductQuantity() (value int32) {
	if p == nil {
		return
	}
	return p.StoreProductQuantity
}
