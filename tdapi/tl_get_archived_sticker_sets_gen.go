// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// GetArchivedStickerSetsRequest represents TL type `getArchivedStickerSets#7706ef86`.
type GetArchivedStickerSetsRequest struct {
	// Pass true to return mask stickers sets; pass false to return ordinary sticker sets
	IsMasks bool
	// Identifier of the sticker set from which to return the result
	OffsetStickerSetID int64
	// The maximum number of sticker sets to return; up to 100
	Limit int32
}

// GetArchivedStickerSetsRequestTypeID is TL type id of GetArchivedStickerSetsRequest.
const GetArchivedStickerSetsRequestTypeID = 0x7706ef86

// Ensuring interfaces in compile-time for GetArchivedStickerSetsRequest.
var (
	_ bin.Encoder     = &GetArchivedStickerSetsRequest{}
	_ bin.Decoder     = &GetArchivedStickerSetsRequest{}
	_ bin.BareEncoder = &GetArchivedStickerSetsRequest{}
	_ bin.BareDecoder = &GetArchivedStickerSetsRequest{}
)

func (g *GetArchivedStickerSetsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.IsMasks == false) {
		return false
	}
	if !(g.OffsetStickerSetID == 0) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetArchivedStickerSetsRequest) String() string {
	if g == nil {
		return "GetArchivedStickerSetsRequest(nil)"
	}
	type Alias GetArchivedStickerSetsRequest
	return fmt.Sprintf("GetArchivedStickerSetsRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetArchivedStickerSetsRequest) TypeID() uint32 {
	return GetArchivedStickerSetsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetArchivedStickerSetsRequest) TypeName() string {
	return "getArchivedStickerSets"
}

// TypeInfo returns info about TL type.
func (g *GetArchivedStickerSetsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getArchivedStickerSets",
		ID:   GetArchivedStickerSetsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "IsMasks",
			SchemaName: "is_masks",
		},
		{
			Name:       "OffsetStickerSetID",
			SchemaName: "offset_sticker_set_id",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetArchivedStickerSetsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getArchivedStickerSets#7706ef86 as nil")
	}
	b.PutID(GetArchivedStickerSetsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetArchivedStickerSetsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getArchivedStickerSets#7706ef86 as nil")
	}
	b.PutBool(g.IsMasks)
	b.PutLong(g.OffsetStickerSetID)
	b.PutInt32(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetArchivedStickerSetsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getArchivedStickerSets#7706ef86 to nil")
	}
	if err := b.ConsumeID(GetArchivedStickerSetsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetArchivedStickerSetsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getArchivedStickerSets#7706ef86 to nil")
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: field is_masks: %w", err)
		}
		g.IsMasks = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: field offset_sticker_set_id: %w", err)
		}
		g.OffsetStickerSetID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (g *GetArchivedStickerSetsRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getArchivedStickerSets#7706ef86 as nil")
	}
	b.ObjStart()
	b.PutID("getArchivedStickerSets")
	b.FieldStart("is_masks")
	b.PutBool(g.IsMasks)
	b.FieldStart("offset_sticker_set_id")
	b.PutLong(g.OffsetStickerSetID)
	b.FieldStart("limit")
	b.PutInt32(g.Limit)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (g *GetArchivedStickerSetsRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if g == nil {
		return fmt.Errorf("can't decode getArchivedStickerSets#7706ef86 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("getArchivedStickerSets"); err != nil {
				return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: %w", err)
			}
		case "is_masks":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: field is_masks: %w", err)
			}
			g.IsMasks = value
		case "offset_sticker_set_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: field offset_sticker_set_id: %w", err)
			}
			g.OffsetStickerSetID = value
		case "limit":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode getArchivedStickerSets#7706ef86: field limit: %w", err)
			}
			g.Limit = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetIsMasks returns value of IsMasks field.
func (g *GetArchivedStickerSetsRequest) GetIsMasks() (value bool) {
	return g.IsMasks
}

// GetOffsetStickerSetID returns value of OffsetStickerSetID field.
func (g *GetArchivedStickerSetsRequest) GetOffsetStickerSetID() (value int64) {
	return g.OffsetStickerSetID
}

// GetLimit returns value of Limit field.
func (g *GetArchivedStickerSetsRequest) GetLimit() (value int32) {
	return g.Limit
}

// GetArchivedStickerSets invokes method getArchivedStickerSets#7706ef86 returning error if any.
func (c *Client) GetArchivedStickerSets(ctx context.Context, request *GetArchivedStickerSetsRequest) (*StickerSets, error) {
	var result StickerSets

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
