// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// CreateNewSupergroupChatRequest represents TL type `createNewSupergroupChat#ce83a6c1`.
type CreateNewSupergroupChatRequest struct {
	// Title of the new chat; 1-128 characters
	Title string
	// True, if a channel chat needs to be created
	IsChannel bool
	// Creates a new supergroup or channel and sends a corresponding
	// messageSupergroupChatCreate. Returns the newly created chat
	Description string
	// Chat location if a location-based supergroup is being created; pass null to create an
	// ordinary supergroup chat
	Location ChatLocation
	// True, if the supergroup is created for importing messages using importMessage
	ForImport bool
}

// CreateNewSupergroupChatRequestTypeID is TL type id of CreateNewSupergroupChatRequest.
const CreateNewSupergroupChatRequestTypeID = 0xce83a6c1

// Ensuring interfaces in compile-time for CreateNewSupergroupChatRequest.
var (
	_ bin.Encoder     = &CreateNewSupergroupChatRequest{}
	_ bin.Decoder     = &CreateNewSupergroupChatRequest{}
	_ bin.BareEncoder = &CreateNewSupergroupChatRequest{}
	_ bin.BareDecoder = &CreateNewSupergroupChatRequest{}
)

func (c *CreateNewSupergroupChatRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Title == "") {
		return false
	}
	if !(c.IsChannel == false) {
		return false
	}
	if !(c.Description == "") {
		return false
	}
	if !(c.Location.Zero()) {
		return false
	}
	if !(c.ForImport == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *CreateNewSupergroupChatRequest) String() string {
	if c == nil {
		return "CreateNewSupergroupChatRequest(nil)"
	}
	type Alias CreateNewSupergroupChatRequest
	return fmt.Sprintf("CreateNewSupergroupChatRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*CreateNewSupergroupChatRequest) TypeID() uint32 {
	return CreateNewSupergroupChatRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*CreateNewSupergroupChatRequest) TypeName() string {
	return "createNewSupergroupChat"
}

// TypeInfo returns info about TL type.
func (c *CreateNewSupergroupChatRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "createNewSupergroupChat",
		ID:   CreateNewSupergroupChatRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "IsChannel",
			SchemaName: "is_channel",
		},
		{
			Name:       "Description",
			SchemaName: "description",
		},
		{
			Name:       "Location",
			SchemaName: "location",
		},
		{
			Name:       "ForImport",
			SchemaName: "for_import",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *CreateNewSupergroupChatRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode createNewSupergroupChat#ce83a6c1 as nil")
	}
	b.PutID(CreateNewSupergroupChatRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *CreateNewSupergroupChatRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode createNewSupergroupChat#ce83a6c1 as nil")
	}
	b.PutString(c.Title)
	b.PutBool(c.IsChannel)
	b.PutString(c.Description)
	if err := c.Location.Encode(b); err != nil {
		return fmt.Errorf("unable to encode createNewSupergroupChat#ce83a6c1: field location: %w", err)
	}
	b.PutBool(c.ForImport)
	return nil
}

// Decode implements bin.Decoder.
func (c *CreateNewSupergroupChatRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode createNewSupergroupChat#ce83a6c1 to nil")
	}
	if err := b.ConsumeID(CreateNewSupergroupChatRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *CreateNewSupergroupChatRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode createNewSupergroupChat#ce83a6c1 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field title: %w", err)
		}
		c.Title = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field is_channel: %w", err)
		}
		c.IsChannel = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field description: %w", err)
		}
		c.Description = value
	}
	{
		if err := c.Location.Decode(b); err != nil {
			return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field location: %w", err)
		}
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field for_import: %w", err)
		}
		c.ForImport = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *CreateNewSupergroupChatRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode createNewSupergroupChat#ce83a6c1 as nil")
	}
	b.ObjStart()
	b.PutID("createNewSupergroupChat")
	b.FieldStart("title")
	b.PutString(c.Title)
	b.FieldStart("is_channel")
	b.PutBool(c.IsChannel)
	b.FieldStart("description")
	b.PutString(c.Description)
	b.FieldStart("location")
	if err := c.Location.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode createNewSupergroupChat#ce83a6c1: field location: %w", err)
	}
	b.FieldStart("for_import")
	b.PutBool(c.ForImport)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *CreateNewSupergroupChatRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode createNewSupergroupChat#ce83a6c1 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("createNewSupergroupChat"); err != nil {
				return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: %w", err)
			}
		case "title":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field title: %w", err)
			}
			c.Title = value
		case "is_channel":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field is_channel: %w", err)
			}
			c.IsChannel = value
		case "description":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field description: %w", err)
			}
			c.Description = value
		case "location":
			if err := c.Location.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field location: %w", err)
			}
		case "for_import":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode createNewSupergroupChat#ce83a6c1: field for_import: %w", err)
			}
			c.ForImport = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetTitle returns value of Title field.
func (c *CreateNewSupergroupChatRequest) GetTitle() (value string) {
	return c.Title
}

// GetIsChannel returns value of IsChannel field.
func (c *CreateNewSupergroupChatRequest) GetIsChannel() (value bool) {
	return c.IsChannel
}

// GetDescription returns value of Description field.
func (c *CreateNewSupergroupChatRequest) GetDescription() (value string) {
	return c.Description
}

// GetLocation returns value of Location field.
func (c *CreateNewSupergroupChatRequest) GetLocation() (value ChatLocation) {
	return c.Location
}

// GetForImport returns value of ForImport field.
func (c *CreateNewSupergroupChatRequest) GetForImport() (value bool) {
	return c.ForImport
}

// CreateNewSupergroupChat invokes method createNewSupergroupChat#ce83a6c1 returning error if any.
func (c *Client) CreateNewSupergroupChat(ctx context.Context, request *CreateNewSupergroupChatRequest) (*Chat, error) {
	var result Chat

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
