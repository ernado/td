// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SupergroupFullInfo represents TL type `supergroupFullInfo#9c9c1807`.
type SupergroupFullInfo struct {
	// Chat photo; may be null
	Photo ChatPhoto
	// Contains full information about a supergroup or channel
	Description string
	// Number of members in the supergroup or channel; 0 if unknown
	MemberCount int32
	// Number of privileged users in the supergroup or channel; 0 if unknown
	AdministratorCount int32
	// Number of restricted users in the supergroup; 0 if unknown
	RestrictedCount int32
	// Number of users banned from chat; 0 if unknown
	BannedCount int32
	// Chat identifier of a discussion group for the channel, or a channel, for which the
	// supergroup is the designated discussion group; 0 if none or unknown
	LinkedChatID int64
	// Delay between consecutive sent messages for non-administrator supergroup members, in
	// seconds
	SlowModeDelay int32
	// Time left before next message can be sent in the supergroup, in seconds. An
	// updateSupergroupFullInfo update is not triggered when value of this field changes, but
	// both new and old values are non-zero
	SlowModeDelayExpiresIn float64
	// True, if members of the chat can be retrieved
	CanGetMembers bool
	// True, if the chat username can be changed
	CanSetUsername bool
	// True, if the supergroup sticker set can be changed
	CanSetStickerSet bool
	// True, if the supergroup location can be changed
	CanSetLocation bool
	// True, if the supergroup or channel statistics are available
	CanGetStatistics bool
	// True, if new chat members will have access to old messages. In public or discussion
	// groups and both public and private channels, old messages are always available, so
	// this option affects only private supergroups without a linked chat. The value of this
	// field is only available for chat administrators
	IsAllHistoryAvailable bool
	// Identifier of the supergroup sticker set; 0 if none
	StickerSetID int64
	// Location to which the supergroup is connected; may be null
	Location ChatLocation
	// Primary invite link for this chat; may be null. For chat administrators with
	// can_invite_users right only
	InviteLink ChatInviteLink
	// List of commands of bots in the group
	BotCommands []BotCommands
	// Identifier of the basic group from which supergroup was upgraded; 0 if none
	UpgradedFromBasicGroupID int64
	// Identifier of the last message in the basic group from which supergroup was upgraded;
	// 0 if none
	UpgradedFromMaxMessageID int64
}

// SupergroupFullInfoTypeID is TL type id of SupergroupFullInfo.
const SupergroupFullInfoTypeID = 0x9c9c1807

// Ensuring interfaces in compile-time for SupergroupFullInfo.
var (
	_ bin.Encoder     = &SupergroupFullInfo{}
	_ bin.Decoder     = &SupergroupFullInfo{}
	_ bin.BareEncoder = &SupergroupFullInfo{}
	_ bin.BareDecoder = &SupergroupFullInfo{}
)

func (s *SupergroupFullInfo) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Photo.Zero()) {
		return false
	}
	if !(s.Description == "") {
		return false
	}
	if !(s.MemberCount == 0) {
		return false
	}
	if !(s.AdministratorCount == 0) {
		return false
	}
	if !(s.RestrictedCount == 0) {
		return false
	}
	if !(s.BannedCount == 0) {
		return false
	}
	if !(s.LinkedChatID == 0) {
		return false
	}
	if !(s.SlowModeDelay == 0) {
		return false
	}
	if !(s.SlowModeDelayExpiresIn == 0) {
		return false
	}
	if !(s.CanGetMembers == false) {
		return false
	}
	if !(s.CanSetUsername == false) {
		return false
	}
	if !(s.CanSetStickerSet == false) {
		return false
	}
	if !(s.CanSetLocation == false) {
		return false
	}
	if !(s.CanGetStatistics == false) {
		return false
	}
	if !(s.IsAllHistoryAvailable == false) {
		return false
	}
	if !(s.StickerSetID == 0) {
		return false
	}
	if !(s.Location.Zero()) {
		return false
	}
	if !(s.InviteLink.Zero()) {
		return false
	}
	if !(s.BotCommands == nil) {
		return false
	}
	if !(s.UpgradedFromBasicGroupID == 0) {
		return false
	}
	if !(s.UpgradedFromMaxMessageID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SupergroupFullInfo) String() string {
	if s == nil {
		return "SupergroupFullInfo(nil)"
	}
	type Alias SupergroupFullInfo
	return fmt.Sprintf("SupergroupFullInfo%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SupergroupFullInfo) TypeID() uint32 {
	return SupergroupFullInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*SupergroupFullInfo) TypeName() string {
	return "supergroupFullInfo"
}

// TypeInfo returns info about TL type.
func (s *SupergroupFullInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "supergroupFullInfo",
		ID:   SupergroupFullInfoTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Photo",
			SchemaName: "photo",
		},
		{
			Name:       "Description",
			SchemaName: "description",
		},
		{
			Name:       "MemberCount",
			SchemaName: "member_count",
		},
		{
			Name:       "AdministratorCount",
			SchemaName: "administrator_count",
		},
		{
			Name:       "RestrictedCount",
			SchemaName: "restricted_count",
		},
		{
			Name:       "BannedCount",
			SchemaName: "banned_count",
		},
		{
			Name:       "LinkedChatID",
			SchemaName: "linked_chat_id",
		},
		{
			Name:       "SlowModeDelay",
			SchemaName: "slow_mode_delay",
		},
		{
			Name:       "SlowModeDelayExpiresIn",
			SchemaName: "slow_mode_delay_expires_in",
		},
		{
			Name:       "CanGetMembers",
			SchemaName: "can_get_members",
		},
		{
			Name:       "CanSetUsername",
			SchemaName: "can_set_username",
		},
		{
			Name:       "CanSetStickerSet",
			SchemaName: "can_set_sticker_set",
		},
		{
			Name:       "CanSetLocation",
			SchemaName: "can_set_location",
		},
		{
			Name:       "CanGetStatistics",
			SchemaName: "can_get_statistics",
		},
		{
			Name:       "IsAllHistoryAvailable",
			SchemaName: "is_all_history_available",
		},
		{
			Name:       "StickerSetID",
			SchemaName: "sticker_set_id",
		},
		{
			Name:       "Location",
			SchemaName: "location",
		},
		{
			Name:       "InviteLink",
			SchemaName: "invite_link",
		},
		{
			Name:       "BotCommands",
			SchemaName: "bot_commands",
		},
		{
			Name:       "UpgradedFromBasicGroupID",
			SchemaName: "upgraded_from_basic_group_id",
		},
		{
			Name:       "UpgradedFromMaxMessageID",
			SchemaName: "upgraded_from_max_message_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *SupergroupFullInfo) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode supergroupFullInfo#9c9c1807 as nil")
	}
	b.PutID(SupergroupFullInfoTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SupergroupFullInfo) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode supergroupFullInfo#9c9c1807 as nil")
	}
	if err := s.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field photo: %w", err)
	}
	b.PutString(s.Description)
	b.PutInt32(s.MemberCount)
	b.PutInt32(s.AdministratorCount)
	b.PutInt32(s.RestrictedCount)
	b.PutInt32(s.BannedCount)
	b.PutLong(s.LinkedChatID)
	b.PutInt32(s.SlowModeDelay)
	b.PutDouble(s.SlowModeDelayExpiresIn)
	b.PutBool(s.CanGetMembers)
	b.PutBool(s.CanSetUsername)
	b.PutBool(s.CanSetStickerSet)
	b.PutBool(s.CanSetLocation)
	b.PutBool(s.CanGetStatistics)
	b.PutBool(s.IsAllHistoryAvailable)
	b.PutLong(s.StickerSetID)
	if err := s.Location.Encode(b); err != nil {
		return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field location: %w", err)
	}
	if err := s.InviteLink.Encode(b); err != nil {
		return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field invite_link: %w", err)
	}
	b.PutInt(len(s.BotCommands))
	for idx, v := range s.BotCommands {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare supergroupFullInfo#9c9c1807: field bot_commands element with index %d: %w", idx, err)
		}
	}
	b.PutLong(s.UpgradedFromBasicGroupID)
	b.PutLong(s.UpgradedFromMaxMessageID)
	return nil
}

// Decode implements bin.Decoder.
func (s *SupergroupFullInfo) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode supergroupFullInfo#9c9c1807 to nil")
	}
	if err := b.ConsumeID(SupergroupFullInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SupergroupFullInfo) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode supergroupFullInfo#9c9c1807 to nil")
	}
	{
		if err := s.Photo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field photo: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field description: %w", err)
		}
		s.Description = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field member_count: %w", err)
		}
		s.MemberCount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field administrator_count: %w", err)
		}
		s.AdministratorCount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field restricted_count: %w", err)
		}
		s.RestrictedCount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field banned_count: %w", err)
		}
		s.BannedCount = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field linked_chat_id: %w", err)
		}
		s.LinkedChatID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field slow_mode_delay: %w", err)
		}
		s.SlowModeDelay = value
	}
	{
		value, err := b.Double()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field slow_mode_delay_expires_in: %w", err)
		}
		s.SlowModeDelayExpiresIn = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_get_members: %w", err)
		}
		s.CanGetMembers = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_set_username: %w", err)
		}
		s.CanSetUsername = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_set_sticker_set: %w", err)
		}
		s.CanSetStickerSet = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_set_location: %w", err)
		}
		s.CanSetLocation = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_get_statistics: %w", err)
		}
		s.CanGetStatistics = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field is_all_history_available: %w", err)
		}
		s.IsAllHistoryAvailable = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field sticker_set_id: %w", err)
		}
		s.StickerSetID = value
	}
	{
		if err := s.Location.Decode(b); err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field location: %w", err)
		}
	}
	{
		if err := s.InviteLink.Decode(b); err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field invite_link: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field bot_commands: %w", err)
		}

		if headerLen > 0 {
			s.BotCommands = make([]BotCommands, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value BotCommands
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare supergroupFullInfo#9c9c1807: field bot_commands: %w", err)
			}
			s.BotCommands = append(s.BotCommands, value)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field upgraded_from_basic_group_id: %w", err)
		}
		s.UpgradedFromBasicGroupID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field upgraded_from_max_message_id: %w", err)
		}
		s.UpgradedFromMaxMessageID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *SupergroupFullInfo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode supergroupFullInfo#9c9c1807 as nil")
	}
	b.ObjStart()
	b.PutID("supergroupFullInfo")
	b.FieldStart("photo")
	if err := s.Photo.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field photo: %w", err)
	}
	b.FieldStart("description")
	b.PutString(s.Description)
	b.FieldStart("member_count")
	b.PutInt32(s.MemberCount)
	b.FieldStart("administrator_count")
	b.PutInt32(s.AdministratorCount)
	b.FieldStart("restricted_count")
	b.PutInt32(s.RestrictedCount)
	b.FieldStart("banned_count")
	b.PutInt32(s.BannedCount)
	b.FieldStart("linked_chat_id")
	b.PutLong(s.LinkedChatID)
	b.FieldStart("slow_mode_delay")
	b.PutInt32(s.SlowModeDelay)
	b.FieldStart("slow_mode_delay_expires_in")
	b.PutDouble(s.SlowModeDelayExpiresIn)
	b.FieldStart("can_get_members")
	b.PutBool(s.CanGetMembers)
	b.FieldStart("can_set_username")
	b.PutBool(s.CanSetUsername)
	b.FieldStart("can_set_sticker_set")
	b.PutBool(s.CanSetStickerSet)
	b.FieldStart("can_set_location")
	b.PutBool(s.CanSetLocation)
	b.FieldStart("can_get_statistics")
	b.PutBool(s.CanGetStatistics)
	b.FieldStart("is_all_history_available")
	b.PutBool(s.IsAllHistoryAvailable)
	b.FieldStart("sticker_set_id")
	b.PutLong(s.StickerSetID)
	b.FieldStart("location")
	if err := s.Location.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field location: %w", err)
	}
	b.FieldStart("invite_link")
	if err := s.InviteLink.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field invite_link: %w", err)
	}
	b.FieldStart("bot_commands")
	b.ArrStart()
	for idx, v := range s.BotCommands {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode supergroupFullInfo#9c9c1807: field bot_commands element with index %d: %w", idx, err)
		}
	}
	b.ArrEnd()
	b.FieldStart("upgraded_from_basic_group_id")
	b.PutLong(s.UpgradedFromBasicGroupID)
	b.FieldStart("upgraded_from_max_message_id")
	b.PutLong(s.UpgradedFromMaxMessageID)
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *SupergroupFullInfo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode supergroupFullInfo#9c9c1807 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("supergroupFullInfo"); err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: %w", err)
			}
		case "photo":
			if err := s.Photo.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field photo: %w", err)
			}
		case "description":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field description: %w", err)
			}
			s.Description = value
		case "member_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field member_count: %w", err)
			}
			s.MemberCount = value
		case "administrator_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field administrator_count: %w", err)
			}
			s.AdministratorCount = value
		case "restricted_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field restricted_count: %w", err)
			}
			s.RestrictedCount = value
		case "banned_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field banned_count: %w", err)
			}
			s.BannedCount = value
		case "linked_chat_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field linked_chat_id: %w", err)
			}
			s.LinkedChatID = value
		case "slow_mode_delay":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field slow_mode_delay: %w", err)
			}
			s.SlowModeDelay = value
		case "slow_mode_delay_expires_in":
			value, err := b.Double()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field slow_mode_delay_expires_in: %w", err)
			}
			s.SlowModeDelayExpiresIn = value
		case "can_get_members":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_get_members: %w", err)
			}
			s.CanGetMembers = value
		case "can_set_username":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_set_username: %w", err)
			}
			s.CanSetUsername = value
		case "can_set_sticker_set":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_set_sticker_set: %w", err)
			}
			s.CanSetStickerSet = value
		case "can_set_location":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_set_location: %w", err)
			}
			s.CanSetLocation = value
		case "can_get_statistics":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field can_get_statistics: %w", err)
			}
			s.CanGetStatistics = value
		case "is_all_history_available":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field is_all_history_available: %w", err)
			}
			s.IsAllHistoryAvailable = value
		case "sticker_set_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field sticker_set_id: %w", err)
			}
			s.StickerSetID = value
		case "location":
			if err := s.Location.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field location: %w", err)
			}
		case "invite_link":
			if err := s.InviteLink.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field invite_link: %w", err)
			}
		case "bot_commands":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value BotCommands
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field bot_commands: %w", err)
				}
				s.BotCommands = append(s.BotCommands, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field bot_commands: %w", err)
			}
		case "upgraded_from_basic_group_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field upgraded_from_basic_group_id: %w", err)
			}
			s.UpgradedFromBasicGroupID = value
		case "upgraded_from_max_message_id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode supergroupFullInfo#9c9c1807: field upgraded_from_max_message_id: %w", err)
			}
			s.UpgradedFromMaxMessageID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetPhoto returns value of Photo field.
func (s *SupergroupFullInfo) GetPhoto() (value ChatPhoto) {
	return s.Photo
}

// GetDescription returns value of Description field.
func (s *SupergroupFullInfo) GetDescription() (value string) {
	return s.Description
}

// GetMemberCount returns value of MemberCount field.
func (s *SupergroupFullInfo) GetMemberCount() (value int32) {
	return s.MemberCount
}

// GetAdministratorCount returns value of AdministratorCount field.
func (s *SupergroupFullInfo) GetAdministratorCount() (value int32) {
	return s.AdministratorCount
}

// GetRestrictedCount returns value of RestrictedCount field.
func (s *SupergroupFullInfo) GetRestrictedCount() (value int32) {
	return s.RestrictedCount
}

// GetBannedCount returns value of BannedCount field.
func (s *SupergroupFullInfo) GetBannedCount() (value int32) {
	return s.BannedCount
}

// GetLinkedChatID returns value of LinkedChatID field.
func (s *SupergroupFullInfo) GetLinkedChatID() (value int64) {
	return s.LinkedChatID
}

// GetSlowModeDelay returns value of SlowModeDelay field.
func (s *SupergroupFullInfo) GetSlowModeDelay() (value int32) {
	return s.SlowModeDelay
}

// GetSlowModeDelayExpiresIn returns value of SlowModeDelayExpiresIn field.
func (s *SupergroupFullInfo) GetSlowModeDelayExpiresIn() (value float64) {
	return s.SlowModeDelayExpiresIn
}

// GetCanGetMembers returns value of CanGetMembers field.
func (s *SupergroupFullInfo) GetCanGetMembers() (value bool) {
	return s.CanGetMembers
}

// GetCanSetUsername returns value of CanSetUsername field.
func (s *SupergroupFullInfo) GetCanSetUsername() (value bool) {
	return s.CanSetUsername
}

// GetCanSetStickerSet returns value of CanSetStickerSet field.
func (s *SupergroupFullInfo) GetCanSetStickerSet() (value bool) {
	return s.CanSetStickerSet
}

// GetCanSetLocation returns value of CanSetLocation field.
func (s *SupergroupFullInfo) GetCanSetLocation() (value bool) {
	return s.CanSetLocation
}

// GetCanGetStatistics returns value of CanGetStatistics field.
func (s *SupergroupFullInfo) GetCanGetStatistics() (value bool) {
	return s.CanGetStatistics
}

// GetIsAllHistoryAvailable returns value of IsAllHistoryAvailable field.
func (s *SupergroupFullInfo) GetIsAllHistoryAvailable() (value bool) {
	return s.IsAllHistoryAvailable
}

// GetStickerSetID returns value of StickerSetID field.
func (s *SupergroupFullInfo) GetStickerSetID() (value int64) {
	return s.StickerSetID
}

// GetLocation returns value of Location field.
func (s *SupergroupFullInfo) GetLocation() (value ChatLocation) {
	return s.Location
}

// GetInviteLink returns value of InviteLink field.
func (s *SupergroupFullInfo) GetInviteLink() (value ChatInviteLink) {
	return s.InviteLink
}

// GetBotCommands returns value of BotCommands field.
func (s *SupergroupFullInfo) GetBotCommands() (value []BotCommands) {
	return s.BotCommands
}

// GetUpgradedFromBasicGroupID returns value of UpgradedFromBasicGroupID field.
func (s *SupergroupFullInfo) GetUpgradedFromBasicGroupID() (value int64) {
	return s.UpgradedFromBasicGroupID
}

// GetUpgradedFromMaxMessageID returns value of UpgradedFromMaxMessageID field.
func (s *SupergroupFullInfo) GetUpgradedFromMaxMessageID() (value int64) {
	return s.UpgradedFromMaxMessageID
}
